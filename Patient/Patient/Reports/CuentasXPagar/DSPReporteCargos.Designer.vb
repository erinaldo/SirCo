''------------------------------------------------------------------------------
'' <auto-generated>
''     This code was generated by a tool.
''     Runtime Version:2.0.50727.1433
''
''     Changes to this file may cause incorrect behavior and will be lost if
''     the code is regenerated.
'' </auto-generated>
''------------------------------------------------------------------------------

'Option Strict Off
'Option Explicit On



''''<summary>
''''Represents a strongly typed in-memory cache of data.
''''</summary>
'<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
' Global.System.Serializable(),  _
' Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
' Global.System.ComponentModel.ToolboxItem(true),  _
' Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
' Global.System.Xml.Serialization.XmlRootAttribute("DSPReporteCargos"),  _
' Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
'Partial Public Class DSPReporteCargos
'    Inherits Global.System.Data.DataSet

'    Private tableTbl_Cargos As Tbl_CargosDataTable

'    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Public Sub New()
'        MyBase.New
'        Me.BeginInit
'        Me.InitClass
'        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
'        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
'        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
'        Me.EndInit
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
'        MyBase.New(info, context, false)
'        If (Me.IsBinarySerialized(info, context) = true) Then
'            Me.InitVars(false)
'            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
'            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
'            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
'            Return
'        End If
'        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
'        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
'            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
'            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
'            If (Not (ds.Tables("Tbl_Cargos")) Is Nothing) Then
'                MyBase.Tables.Add(New Tbl_CargosDataTable(ds.Tables("Tbl_Cargos")))
'            End If
'            Me.DataSetName = ds.DataSetName
'            Me.Prefix = ds.Prefix
'            Me.Namespace = ds.Namespace
'            Me.Locale = ds.Locale
'            Me.CaseSensitive = ds.CaseSensitive
'            Me.EnforceConstraints = ds.EnforceConstraints
'            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
'            Me.InitVars
'        Else
'            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
'        End If
'        Me.GetSerializationData(info, context)
'        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
'        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
'        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
'     Global.System.ComponentModel.Browsable(false),  _
'     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
'    Public ReadOnly Property Tbl_Cargos() As Tbl_CargosDataTable
'        Get
'            Return Me.tableTbl_Cargos
'        End Get
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
'     Global.System.ComponentModel.BrowsableAttribute(true),  _
'     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
'    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
'        Get
'            Return Me._schemaSerializationMode
'        End Get
'        Set
'            Me._schemaSerializationMode = value
'        End Set
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
'     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
'    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
'        Get
'            Return MyBase.Tables
'        End Get
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
'     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
'    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
'        Get
'            Return MyBase.Relations
'        End Get
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Protected Overrides Sub InitializeDerivedDataSet()
'        Me.BeginInit
'        Me.InitClass
'        Me.EndInit
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Public Overrides Function Clone() As Global.System.Data.DataSet
'        Dim cln As DSPReporteCargos = CType(MyBase.Clone,DSPReporteCargos)
'        cln.InitVars
'        cln.SchemaSerializationMode = Me.SchemaSerializationMode
'        Return cln
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Protected Overrides Function ShouldSerializeTables() As Boolean
'        Return false
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Protected Overrides Function ShouldSerializeRelations() As Boolean
'        Return false
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
'        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
'            Me.Reset
'            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
'            ds.ReadXml(reader)
'            If (Not (ds.Tables("Tbl_Cargos")) Is Nothing) Then
'                MyBase.Tables.Add(New Tbl_CargosDataTable(ds.Tables("Tbl_Cargos")))
'            End If
'            Me.DataSetName = ds.DataSetName
'            Me.Prefix = ds.Prefix
'            Me.Namespace = ds.Namespace
'            Me.Locale = ds.Locale
'            Me.CaseSensitive = ds.CaseSensitive
'            Me.EnforceConstraints = ds.EnforceConstraints
'            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
'            Me.InitVars
'        Else
'            Me.ReadXml(reader)
'            Me.InitVars
'        End If
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
'        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
'        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
'        stream.Position = 0
'        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Friend Overloads Sub InitVars()
'        Me.InitVars(true)
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
'        Me.tableTbl_Cargos = CType(MyBase.Tables("Tbl_Cargos"),Tbl_CargosDataTable)
'        If (initTable = true) Then
'            If (Not (Me.tableTbl_Cargos) Is Nothing) Then
'                Me.tableTbl_Cargos.InitVars
'            End If
'        End If
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Private Sub InitClass()
'        Me.DataSetName = "DSPReporteCargos"
'        Me.Prefix = ""
'        Me.Namespace = "http://tempuri.org/DSPReporteCargos.xsd"
'        Me.EnforceConstraints = true
'        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
'        Me.tableTbl_Cargos = New Tbl_CargosDataTable
'        MyBase.Tables.Add(Me.tableTbl_Cargos)
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Private Function ShouldSerializeTbl_Cargos() As Boolean
'        Return false
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
'        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
'            Me.InitVars
'        End If
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
'        Dim ds As DSPReporteCargos = New DSPReporteCargos
'        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
'        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
'        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
'        any.Namespace = ds.Namespace
'        sequence.Items.Add(any)
'        type.Particle = sequence
'        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
'        If xs.Contains(dsSchema.TargetNamespace) Then
'            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
'            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
'            Try 
'                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
'                dsSchema.Write(s1)
'                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
'                Do While schemas.MoveNext
'                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
'                    s2.SetLength(0)
'                    schema.Write(s2)
'                    If (s1.Length = s2.Length) Then
'                        s1.Position = 0
'                        s2.Position = 0

'                        Do While ((s1.Position <> s1.Length)  _
'                                    AndAlso (s1.ReadByte = s2.ReadByte))


'                        Loop
'                        If (s1.Position = s1.Length) Then
'                            Return type
'                        End If
'                    End If

'                Loop
'            Finally
'                If (Not (s1) Is Nothing) Then
'                    s1.Close
'                End If
'                If (Not (s2) Is Nothing) Then
'                    s2.Close
'                End If
'            End Try
'        End If
'        xs.Add(dsSchema)
'        Return type
'    End Function

'    Public Delegate Sub Tbl_CargosRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_CargosRowChangeEvent)

'    '''<summary>
'    '''Represents the strongly named DataTable class.
'    '''</summary>
'    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
'     Global.System.Serializable(),  _
'     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
'    Partial Public Class Tbl_CargosDataTable
'        Inherits Global.System.Data.DataTable
'        Implements Global.System.Collections.IEnumerable

'        Private columnidfoliosuc As Global.System.Data.DataColumn

'        Private columncvesuc As Global.System.Data.DataColumn

'        Private columnproveedor As Global.System.Data.DataColumn

'        Private columnraz_soc As Global.System.Data.DataColumn

'        Private columnfactprov As Global.System.Data.DataColumn

'        Private columnreferenc As Global.System.Data.DataColumn

'        Private columnfecha As Global.System.Data.DataColumn

'        Private columntipo As Global.System.Data.DataColumn

'        Private columnstatus As Global.System.Data.DataColumn

'        Private columnmotivo As Global.System.Data.DataColumn

'        Private columnimporte As Global.System.Data.DataColumn

'        Private columniva As Global.System.Data.DataColumn

'        Private columnimptotal As Global.System.Data.DataColumn

'        Private columndescrip As Global.System.Data.DataColumn

'        Private columnfolio As Global.System.Data.DataColumn

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub New()
'            MyBase.New
'            Me.TableName = "Tbl_Cargos"
'            Me.BeginInit
'            Me.InitClass
'            Me.EndInit
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Friend Sub New(ByVal table As Global.System.Data.DataTable)
'            MyBase.New
'            Me.TableName = table.TableName
'            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
'                Me.CaseSensitive = table.CaseSensitive
'            End If
'            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
'                Me.Locale = table.Locale
'            End If
'            If (table.Namespace <> table.DataSet.Namespace) Then
'                Me.Namespace = table.Namespace
'            End If
'            Me.Prefix = table.Prefix
'            Me.MinimumCapacity = table.MinimumCapacity
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
'            MyBase.New(info, context)
'            Me.InitVars
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property idfoliosucColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnidfoliosuc
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property cvesucColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columncvesuc
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property proveedorColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnproveedor
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property raz_socColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnraz_soc
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property factprovColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnfactprov
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property referencColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnreferenc
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnfecha
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property tipoColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columntipo
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnstatus
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property motivoColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnmotivo
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property importeColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnimporte
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property ivaColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columniva
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property imptotalColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnimptotal
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property descripColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columndescrip
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property folioColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnfolio
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
'         Global.System.ComponentModel.Browsable(false)>  _
'        Public ReadOnly Property Count() As Integer
'            Get
'                Return Me.Rows.Count
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_CargosRow
'            Get
'                Return CType(Me.Rows(index),Tbl_CargosRow)
'            End Get
'        End Property

'        Public Event Tbl_CargosRowChanging As Tbl_CargosRowChangeEventHandler

'        Public Event Tbl_CargosRowChanged As Tbl_CargosRowChangeEventHandler

'        Public Event Tbl_CargosRowDeleting As Tbl_CargosRowChangeEventHandler

'        Public Event Tbl_CargosRowDeleted As Tbl_CargosRowChangeEventHandler

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Overloads Sub AddTbl_CargosRow(ByVal row As Tbl_CargosRow)
'            Me.Rows.Add(row)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Overloads Function AddTbl_CargosRow(ByVal idfoliosuc As String, ByVal cvesuc As String, ByVal proveedor As String, ByVal raz_soc As String, ByVal factprov As String, ByVal referenc As String, ByVal fecha As Date, ByVal tipo As String, ByVal status As String, ByVal motivo As String, ByVal importe As Double, ByVal iva As Double, ByVal imptotal As Double, ByVal descrip As String, ByVal folio As String) As Tbl_CargosRow
'            Dim rowTbl_CargosRow As Tbl_CargosRow = CType(Me.NewRow,Tbl_CargosRow)
'            Dim columnValuesArray() As Object = New Object() {idfoliosuc, cvesuc, proveedor, raz_soc, factprov, referenc, fecha, tipo, status, motivo, importe, iva, imptotal, descrip, folio}
'            rowTbl_CargosRow.ItemArray = columnValuesArray
'            Me.Rows.Add(rowTbl_CargosRow)
'            Return rowTbl_CargosRow
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
'            Return Me.Rows.GetEnumerator
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Overrides Function Clone() As Global.System.Data.DataTable
'            Dim cln As Tbl_CargosDataTable = CType(MyBase.Clone,Tbl_CargosDataTable)
'            cln.InitVars
'            Return cln
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
'            Return New Tbl_CargosDataTable
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Friend Sub InitVars()
'            Me.columnidfoliosuc = MyBase.Columns("idfoliosuc")
'            Me.columncvesuc = MyBase.Columns("cvesuc")
'            Me.columnproveedor = MyBase.Columns("proveedor")
'            Me.columnraz_soc = MyBase.Columns("raz_soc")
'            Me.columnfactprov = MyBase.Columns("factprov")
'            Me.columnreferenc = MyBase.Columns("referenc")
'            Me.columnfecha = MyBase.Columns("fecha")
'            Me.columntipo = MyBase.Columns("tipo")
'            Me.columnstatus = MyBase.Columns("status")
'            Me.columnmotivo = MyBase.Columns("motivo")
'            Me.columnimporte = MyBase.Columns("importe")
'            Me.columniva = MyBase.Columns("iva")
'            Me.columnimptotal = MyBase.Columns("imptotal")
'            Me.columndescrip = MyBase.Columns("descrip")
'            Me.columnfolio = MyBase.Columns("folio")
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Private Sub InitClass()
'            Me.columnidfoliosuc = New Global.System.Data.DataColumn("idfoliosuc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnidfoliosuc)
'            Me.columncvesuc = New Global.System.Data.DataColumn("cvesuc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columncvesuc)
'            Me.columnproveedor = New Global.System.Data.DataColumn("proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnproveedor)
'            Me.columnraz_soc = New Global.System.Data.DataColumn("raz_soc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnraz_soc)
'            Me.columnfactprov = New Global.System.Data.DataColumn("factprov", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnfactprov)
'            Me.columnreferenc = New Global.System.Data.DataColumn("referenc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnreferenc)
'            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnfecha)
'            Me.columntipo = New Global.System.Data.DataColumn("tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columntipo)
'            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnstatus)
'            Me.columnmotivo = New Global.System.Data.DataColumn("motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnmotivo)
'            Me.columnimporte = New Global.System.Data.DataColumn("importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnimporte)
'            Me.columniva = New Global.System.Data.DataColumn("iva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columniva)
'            Me.columnimptotal = New Global.System.Data.DataColumn("imptotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnimptotal)
'            Me.columndescrip = New Global.System.Data.DataColumn("descrip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columndescrip)
'            Me.columnfolio = New Global.System.Data.DataColumn("folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnfolio)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function NewTbl_CargosRow() As Tbl_CargosRow
'            Return CType(Me.NewRow,Tbl_CargosRow)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
'            Return New Tbl_CargosRow(builder)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Overrides Function GetRowType() As Global.System.Type
'            Return GetType(Tbl_CargosRow)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowChanged(e)
'            If (Not (Me.Tbl_CargosRowChangedEvent) Is Nothing) Then
'                RaiseEvent Tbl_CargosRowChanged(Me, New Tbl_CargosRowChangeEvent(CType(e.Row,Tbl_CargosRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowChanging(e)
'            If (Not (Me.Tbl_CargosRowChangingEvent) Is Nothing) Then
'                RaiseEvent Tbl_CargosRowChanging(Me, New Tbl_CargosRowChangeEvent(CType(e.Row,Tbl_CargosRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowDeleted(e)
'            If (Not (Me.Tbl_CargosRowDeletedEvent) Is Nothing) Then
'                RaiseEvent Tbl_CargosRowDeleted(Me, New Tbl_CargosRowChangeEvent(CType(e.Row,Tbl_CargosRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowDeleting(e)
'            If (Not (Me.Tbl_CargosRowDeletingEvent) Is Nothing) Then
'                RaiseEvent Tbl_CargosRowDeleting(Me, New Tbl_CargosRowChangeEvent(CType(e.Row,Tbl_CargosRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub RemoveTbl_CargosRow(ByVal row As Tbl_CargosRow)
'            Me.Rows.Remove(row)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
'            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
'            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
'            Dim ds As DSPReporteCargos = New DSPReporteCargos
'            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
'            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
'            any1.MinOccurs = New Decimal(0)
'            any1.MaxOccurs = Decimal.MaxValue
'            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
'            sequence.Items.Add(any1)
'            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
'            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
'            any2.MinOccurs = New Decimal(1)
'            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
'            sequence.Items.Add(any2)
'            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
'            attribute1.Name = "namespace"
'            attribute1.FixedValue = ds.Namespace
'            type.Attributes.Add(attribute1)
'            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
'            attribute2.Name = "tableTypeName"
'            attribute2.FixedValue = "Tbl_CargosDataTable"
'            type.Attributes.Add(attribute2)
'            type.Particle = sequence
'            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
'            If xs.Contains(dsSchema.TargetNamespace) Then
'                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
'                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
'                Try 
'                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
'                    dsSchema.Write(s1)
'                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
'                    Do While schemas.MoveNext
'                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
'                        s2.SetLength(0)
'                        schema.Write(s2)
'                        If (s1.Length = s2.Length) Then
'                            s1.Position = 0
'                            s2.Position = 0

'                            Do While ((s1.Position <> s1.Length)  _
'                                        AndAlso (s1.ReadByte = s2.ReadByte))


'                            Loop
'                            If (s1.Position = s1.Length) Then
'                                Return type
'                            End If
'                        End If

'                    Loop
'                Finally
'                    If (Not (s1) Is Nothing) Then
'                        s1.Close
'                    End If
'                    If (Not (s2) Is Nothing) Then
'                        s2.Close
'                    End If
'                End Try
'            End If
'            xs.Add(dsSchema)
'            Return type
'        End Function
'    End Class

'    '''<summary>
'    '''Represents strongly named DataRow class.
'    '''</summary>
'    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
'    Partial Public Class Tbl_CargosRow
'        Inherits Global.System.Data.DataRow

'        Private tableTbl_Cargos As Tbl_CargosDataTable

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
'            MyBase.New(rb)
'            Me.tableTbl_Cargos = CType(Me.Table,Tbl_CargosDataTable)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property idfoliosuc() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.idfoliosucColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'idfoliosuc' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.idfoliosucColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property cvesuc() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.cvesucColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'cvesuc' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.cvesucColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property proveedor() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.proveedorColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'proveedor' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.proveedorColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property raz_soc() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.raz_socColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'raz_soc' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.raz_socColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property factprov() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.factprovColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'factprov' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.factprovColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property referenc() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.referencColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'referenc' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.referencColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property fecha() As Date
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.fechaColumn),Date)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'fecha' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.fechaColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property tipo() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.tipoColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'tipo' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.tipoColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property status() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.statusColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'status' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.statusColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property motivo() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.motivoColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'motivo' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.motivoColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property importe() As Double
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.importeColumn),Double)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'importe' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.importeColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property iva() As Double
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.ivaColumn),Double)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'iva' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.ivaColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property imptotal() As Double
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.imptotalColumn),Double)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'imptotal' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.imptotalColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property descrip() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.descripColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'descrip' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.descripColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Property folio() As String
'            Get
'                Try 
'                    Return CType(Me(Me.tableTbl_Cargos.folioColumn),String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'folio' in table 'Tbl_Cargos' is DBNull.", e)
'                End Try
'            End Get
'            Set
'                Me(Me.tableTbl_Cargos.folioColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsidfoliosucNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.idfoliosucColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetidfoliosucNull()
'            Me(Me.tableTbl_Cargos.idfoliosucColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IscvesucNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.cvesucColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetcvesucNull()
'            Me(Me.tableTbl_Cargos.cvesucColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsproveedorNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.proveedorColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetproveedorNull()
'            Me(Me.tableTbl_Cargos.proveedorColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function Israz_socNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.raz_socColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub Setraz_socNull()
'            Me(Me.tableTbl_Cargos.raz_socColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsfactprovNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.factprovColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetfactprovNull()
'            Me(Me.tableTbl_Cargos.factprovColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsreferencNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.referencColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetreferencNull()
'            Me(Me.tableTbl_Cargos.referencColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsfechaNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.fechaColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetfechaNull()
'            Me(Me.tableTbl_Cargos.fechaColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IstipoNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.tipoColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SettipoNull()
'            Me(Me.tableTbl_Cargos.tipoColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsstatusNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.statusColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetstatusNull()
'            Me(Me.tableTbl_Cargos.statusColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsmotivoNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.motivoColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetmotivoNull()
'            Me(Me.tableTbl_Cargos.motivoColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsimporteNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.importeColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetimporteNull()
'            Me(Me.tableTbl_Cargos.importeColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsivaNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.ivaColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetivaNull()
'            Me(Me.tableTbl_Cargos.ivaColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsimptotalNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.imptotalColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetimptotalNull()
'            Me(Me.tableTbl_Cargos.imptotalColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsdescripNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.descripColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetdescripNull()
'            Me(Me.tableTbl_Cargos.descripColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Function IsfolioNull() As Boolean
'            Return Me.IsNull(Me.tableTbl_Cargos.folioColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub SetfolioNull()
'            Me(Me.tableTbl_Cargos.folioColumn) = Global.System.Convert.DBNull
'        End Sub
'    End Class

'    '''<summary>
'    '''Row event argument class
'    '''</summary>
'    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
'    Public Class Tbl_CargosRowChangeEvent
'        Inherits Global.System.EventArgs

'        Private eventRow As Tbl_CargosRow

'        Private eventAction As Global.System.Data.DataRowAction

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public Sub New(ByVal row As Tbl_CargosRow, ByVal action As Global.System.Data.DataRowAction)
'            MyBase.New
'            Me.eventRow = row
'            Me.eventAction = action
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property Row() As Tbl_CargosRow
'            Get
'                Return Me.eventRow
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
'        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
'            Get
'                Return Me.eventAction
'            End Get
'        End Property
'    End Class
'End Class
