using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.Globalization;
using nmExcel = Microsoft.Office.Interop.Excel;

namespace business_plan
{
    public partial class Cedula2 : Form
    {
        #region variables combos
        int Aseleccion_depto = -1;

        int Aseleccion_division = -1;

        int Aseleccion_familia = -1;

        int Aseleccion_l1 = -1;

        int Aseleccion_l2 = -1;

        int Aseleccion_l3 = -1;

        int Aseleccion_l4 = -1;

        int Aseleccion_l5 = -1;

        int Aseleccion_l6 = -1;

        int Aseleccion_linea = -1;

        int Aseleccion_sucursal = -1;
        bool bandera_depto = false;
        bool bandera_division = false;
        bool bandera_familia = false;
        bool bandera_l1 = false;
        bool bandera_l2 = false;
        bool bandera_l3 = false;
        bool bandera_l4 = false;
        bool bandera_l5 = false;
        bool bandera_l6 = false;
        bool bandera_linea = false;
        bool bandera_marca = false;
        bool bandera_sucursal = false;
        #endregion
        #region variables 
        string Aseleccion_marca = "";
        bool generarcedula = false;        
        int calculos = 1;
        private double[] cantidad = new double[1000];
        private double[] cantidadA = new double[1000];
        int cantidadmes = 0;
        private double[] cantidadpedida = new double[1000];
        private double[] cantidadV = new double[1000];
        string CED1_fechaF = "";
        string CED1_fechaI = "";
        private MySqlCommand cmd;
        double[] comprasI = new double[1000];
        double[] comprasU = new double[1000];
        private string conexion = "SERVER=" + Properties.Settings.Default.server + "; DATABASE=dwh; user=" + Properties.Settings.Default.usuario + "; PASSWORD=" + Properties.Settings.Default.pass + ";";
        private string conexion2 = "SERVER=" + Properties.Settings.Default.server + "; DATABASE=cipsis; user=" + Properties.Settings.Default.usuario + "; PASSWORD=" + Properties.Settings.Default.pass + ";";
        private MySqlConnection Conn, ConnCipsis;
        private double[] costo = new double[1000];
        private double[] costodscto = new double[1000];
        private double[] costoneto = new double[1000];
        private double diasINvCed1 = 0;
        string division = "", depto = "", fam = "", linea = "", subl1, subl2, subl3, subl4, subl5, subl6;
        DateTime fech1 = DateTime.Now;
        DateTime fech2 = DateTime.Now;
        string fechaActual = "";
        private DateTime FechaAF = DateTime.Now;
        private DateTime FechaAI = DateTime.Now;
        private DateTime fecharecibo = DateTime.Now;
        private string[] idd = new string[1000];
        string iddepto = " ";
        string iddeptovarios = " ";
        string iddivision = " ";
        string iddivisionesvarios = " ";
        string idfamilia = " ";
        string idfamiliavarios = " ";
        string idl1 = " ";
        string idl1varios = " ";
        string idl2 = " ";
        string idl2varios = " ";
        string idl3 = " ";
        string idl3varios = " ";
        string idl4 = " ";
        string idl4varios = " ";
        string idl5 = " ";
        string idl5varios = " ";
        string idl6 = " ";
        string idl6varios = " ";
        string idlinea = " ";
        string idlineavarios = " ";
        string idsucursal = " ";
        string idsucursalvarios = "(V.IDSUCURSAL= '01' OR V.IDSUCURSAL='02' OR V.IDSUCURSAL='06' OR V.IDSUCURSAL='08')";
        bool refresh = false;
        private double[] importe = new double[1000];
        private double[] importeA = new double[1000];
        private double[] importeSaldos = new double[1000];
        private double[] importeV = new double[1000];
        string marca = " ";
        string marcavarios = " ";
        private int[] mes = new int[1000];
        private double[] plazo = new double[1000];
        private double[] preciounit = new double[1000];
        bool proyectar = false;
        /////////////////////////////////////////////////////////////

        private string query;

        string[] querycargar = new string[1000];

        string[] queryExist = new string[1000];

        string[] queryguardar = new string[1000];

        string[] queryplazo = new string[1000];

        string queryunidadesAsignadas = "";

        private MySqlDataReader reader;

        private double[] rebajasimp = new double[1000];

        private double[] rebajaspor = new double[1000];

        private double rotacionCed1 = 0;

        string s, d, dd, f, l, l1, l2, l3, l4, l5, l6, m;
        bool saldosi = false;

        int seleccion_depto = -1;

        int seleccion_division = -1;

        int seleccion_familia = -1;

        int seleccion_l1 = -1;

        int seleccion_l2 = -1;

        int seleccion_l3 = -1;

        int seleccion_l4 = -1;

        int seleccion_l5 = -1;

        int seleccion_l6 = -1;

        int seleccion_linea = -1;

        string seleccion_marca = "";

        int seleccion_sucursal = -1;

        string solocalzadoDropdown = "";

        string solocalzadowhere = " ";

        bool solototal;

        string sucursalcargar, divisioncargar, departamentocargar, familiacargar, lineacargar, l1cargar, l2cargar, l3cargar, l4cargar, l5cargar, l6cargar;

        bool total = true;

        private double[] unidadesrecibo = new double[1000];

        private double[] unidadesSaldo = new double[1000];

        private double[] unidadesV = new double[1000];

        bool valoresform = false;

        private double VTICed1 = 0;

        private double VTUCed1 = 0;

        string[] wherequery = new string[1000];
        #endregion
        string where = "";
        bool soloSuc = false;
        string groupby = "";
        string whereLeft = "";
        public Cedula2()
        {
            InitializeComponent();
            tabcontrol.DrawMode = TabDrawMode.OwnerDrawFixed;
            tabcontrol.DrawItem += new DrawItemEventHandler(tabcontrol_DrawItem);
            #region Abrir conexion dwh

            Conn = new MySqlConnection(conexion);
            try
            {
                Conn.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }

            #endregion Abrir conexion dwh
            #region Abrir conexion cipsis

            ConnCipsis = new MySqlConnection(conexion2);
            try
            {
                ConnCipsis.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            #endregion Abrir conexion cipsis
        }

        /// ///////////////////////////////////////////////////// 
        public Cedula2(bool band_sucursal, int selecc_sucursal, bool band_division, int selecc_division,
                        bool band_depto, int selecc_depto, bool band_familia, int selecc_familia,
                        bool band_linea, int selecc_linea, bool band_l1, int selecc_l1,
                        bool band_l2, int selecc_l2, bool band_l3, int selecc_l3,
                        bool band_l4, int selecc_l4, bool band_l5, int selecc_l5,
                        bool band_l6, int selecc_l6, bool band_marca, string selecc_marca)
        {
            InitializeComponent();
            #region Abrir conexion dwh

            Conn = new MySqlConnection(conexion);
            try
            {
                Conn.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }

            #endregion Abrir conexion dwh
            #region Abrir conexion cipsis

            ConnCipsis = new MySqlConnection(conexion2);
            try
            {
                ConnCipsis.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }

            #endregion Abrir conexion cipsis

            #region valoresform
            valoresform = true;
            bandera_sucursal = band_sucursal; seleccion_sucursal = selecc_sucursal;
            bandera_division = band_division; seleccion_division = selecc_division;
            bandera_depto = band_depto; seleccion_depto = selecc_depto;
            bandera_familia = band_familia; seleccion_familia = selecc_familia;
            bandera_linea = band_linea; seleccion_linea = selecc_linea;
            bandera_l1 = band_l1; seleccion_l1 = selecc_l1;
            bandera_l2 = band_l2; seleccion_l2 = selecc_l2;
            bandera_l3 = band_l3; seleccion_l3 = selecc_l3;
            bandera_l4 = band_l4; seleccion_l4 = selecc_l4;
            bandera_l5 = band_l5; seleccion_l5 = selecc_l5;
            bandera_l6 = band_l6; seleccion_l6 = selecc_l6;
            bandera_marca = band_marca; seleccion_marca = selecc_marca;

            #endregion
        }

        public Cedula2(int selecc_sucursal, int selecc_division, int selecc_depto, int selecc_familia,
                          int selecc_linea, int selecc_l1, int selecc_l2, int selecc_l3, int selecc_l4,
                          int selecc_l5, int selecc_l6, string selecc_marca)
        {
            InitializeComponent();
            #region Abrir conexion dwh

            Conn = new MySqlConnection(conexion);
            try
            {
                Conn.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }

            #endregion Abrir conexion dwh
            #region Abrir conexion cipsis

            ConnCipsis = new MySqlConnection(conexion2);
            try
            {
                ConnCipsis.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }

            #endregion Abrir conexion cipsis

            #region valoresform
            valoresform = true;
            seleccion_sucursal = selecc_sucursal;
            seleccion_division = selecc_division;
            seleccion_depto = selecc_depto;
            seleccion_familia = selecc_familia;
            seleccion_linea = selecc_linea;
            seleccion_l1 = selecc_l1;
            seleccion_l2 = selecc_l2;
            seleccion_l3 = selecc_l3;
            seleccion_l4 = selecc_l4;
            seleccion_l5 = selecc_l5;
            seleccion_l6 = selecc_l6;
            seleccion_marca = selecc_marca;
            if(seleccion_sucursal!=-1)
            {
                bandera_sucursal = true;
            }
            if(seleccion_division!=-1)
            {
                bandera_division = true;
            }
            if(seleccion_depto!=-1)
            {
                bandera_depto = true;
            }
            if(seleccion_familia!=-1)
            {
                bandera_familia = true;
            }
            if(seleccion_linea!=-1)
            {
                bandera_linea = true;
            }
            if(seleccion_l1!=-1)
            {
                bandera_l1 = true;
            }
            if (seleccion_l2 != -1)
            {
                bandera_l2 = true;
            }
            if (seleccion_l3 != -1)
            {
                bandera_l3 = true;
            }
            if (seleccion_l4 != -1)
            {
                bandera_l4 = true;
            }
            if (seleccion_l5 != -1)
            {
                bandera_l5 = true;
            }
            if (seleccion_l6 != -1)
            {
                bandera_l6 = true;
            }
            if(seleccion_marca!="-1")
            {
                bandera_marca = true;
            }
            #endregion
        }

        #region menu
        public bool comprobar_guardar(int año, int mes, int i)
        {
            bool comprobar = true;
            for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
            {
                string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and anio=" + año + " and mes=" + mes + " " + querycargar[(x - 1)];
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                if (reader.HasRows == true)
                {
                    comprobar = true;
                }
                else
                {
                    comprobar = false;
                }
                reader.Close();
                if (comprobar == false)
                {
                    insertar(año, mes, i, x);
                }
                else
                {
                    update(año, mes, i, x);
                }
            }
            return true;
        }

        public bool comprobar_guardarT(int año, int mes, int i)
        {
            bool comprobar = true;
            for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            {
                string s = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and anio=" + año + " and mes=" + mes + " and ZapateriasTorreon=1";
                cmd = new MySqlCommand(s, Conn);
                reader = cmd.ExecuteReader();
                if (reader.HasRows == true)
                {
                    comprobar = true;
                }
                else
                {
                    comprobar = false;
                }
                reader.Close();
                if (comprobar == false)
                {
                    insertarT(año, mes, i, x);
                }
                else
                {
                    updateT(año, mes, i, x);
                }
            }
            return true;
        }

        public void insertar(int año, int mes, int grid, int renglon)
        {
            double c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17;
            c10 = 0;
            c11 = 0;
            switch (grid)
            {
                case 1:
                    #region insertar Mes1
                    c1 = double.Parse(dgv1.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv1.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv1.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv1.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv1.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv1.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv1.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv1.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv1.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv1.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv1.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv1.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv1.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv1.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv1.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv1.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv1.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    string q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 2:
                    #region insertar Mes2
                    c1 = double.Parse(dgv2.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv2.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv2.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv2.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv2.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv2.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv2.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv2.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv2.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv2.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv2.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv2.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv2.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv2.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv2.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv2.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv2.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 3:
                    #region insertar Mes3
                    c1 = double.Parse(dgv3.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv3.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv3.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv3.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv3.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv3.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv3.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv3.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv3.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv3.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv3.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv3.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv3.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv3.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv3.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv3.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv3.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 4:
                    #region insertar Mes4
                    c1 = double.Parse(dgv4.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv4.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv4.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv4.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv4.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv4.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv4.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv4.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv4.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv4.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv4.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv4.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv4.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv4.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv4.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv4.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv4.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 5:
                    #region insertar Mes5
                    c1 = double.Parse(dgv5.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv5.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv5.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv5.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv5.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv5.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv5.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv5.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv5.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv5.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv5.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv5.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv5.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv5.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv5.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv5.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv5.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 6:
                    #region insertar Mes6
                    c1 = double.Parse(dgv6.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv6.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv6.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv6.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv6.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv6.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv6.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv6.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv6.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv6.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv6.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv6.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv6.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv6.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv6.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv6.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv6.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 7:
                    #region insertar Mes7
                    c1 = double.Parse(dgv7.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv7.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv7.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv7.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv7.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv7.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv7.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv7.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv7.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv7.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv7.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv7.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv7.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv7.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv7.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv7.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv7.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 8:
                    #region insertar Mes8
                    c1 = double.Parse(dgv8.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv8.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv8.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv8.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv8.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv8.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv8.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv8.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv8.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv8.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv8.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv8.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv8.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv8.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv8.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv8.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv8.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 9:
                    #region insertar Mes9
                    c1 = double.Parse(dgv9.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv9.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv9.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv9.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv9.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv9.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv9.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv9.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv9.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv9.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv9.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv9.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv9.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv9.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv9.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv9.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv9.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 10:
                    #region insertar Mes10
                    c1 = double.Parse(dgv10.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv10.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv10.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv10.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv10.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv10.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv10.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv10.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv10.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv10.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv10.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv10.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv10.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv10.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv10.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv10.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv10.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 11:
                    #region insertar Mes11
                    c1 = double.Parse(dgv11.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv11.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv11.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv11.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv11.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv11.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv11.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv11.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv11.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv11.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv11.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv11.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv11.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv11.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv11.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv11.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv11.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 12:
                    #region insertar Mes12
                    c1 = double.Parse(dgv12.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv12.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv12.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv12.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv12.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv12.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv12.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv12.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv12.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    //c10 = double.Parse(dgv12.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    //c11 = double.Parse(dgv12.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c10 = 0;
                    c11 = 0;
                    c12 = double.Parse(dgv12.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv12.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv12.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency); //rotacion
                    c15 = double.Parse(dgv12.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency); //rotacion mes
                    c16 = double.Parse(dgv12.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);   // rotacion a
                    c17 = double.Parse(dgv12.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);  // dias inv
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte,SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,idsucursal,iddivisiones,iddepto,idfamilia,idlinea,idl1,idl2,idl3,idl4,idl5,idl6,marca) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + c16.ToString() + "," + c17.ToString() + "," + mes.ToString() + "," + año.ToString() + " " + queryguardar[(renglon - 1)] + ")";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
            }
        }

        public void insertarT(int año, int mes, int grid, int renglon)
        {
            double c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
            switch (grid)
            {
                case 1:
                    #region insertar mes1
                    c1 = double.Parse(dgv1.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv1.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv1.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv1.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv1.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv1.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv1.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv1.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv1.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv1.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv1.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv1.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv1.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv1.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv1.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    string q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 2:
                    #region insertar mes2
                    c1 = double.Parse(dgv2.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv2.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv2.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv2.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv2.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv2.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv2.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv2.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv2.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv2.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv2.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv2.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv2.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv2.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv2.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 3:
                    #region insertar mes3
                    c1 = double.Parse(dgv3.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv3.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv3.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv3.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv3.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv3.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv3.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv3.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv3.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv3.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv3.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv3.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv3.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv3.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv3.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 4:
                    #region insertar mes4
                    c1 = double.Parse(dgv4.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv4.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv4.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv4.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv4.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv4.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv4.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv4.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv4.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv4.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv4.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv4.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv4.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv4.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv4.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 5:
                    #region insertar mes5
                    c1 = double.Parse(dgv5.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv5.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv5.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv5.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv5.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv5.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv5.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv5.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv5.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv5.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv5.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv5.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv5.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv5.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv5.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 6:
                    #region insertar mes6
                    c1 = double.Parse(dgv6.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv6.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv6.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv6.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv6.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv6.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv6.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv6.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv6.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv6.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv6.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv6.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv6.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv6.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv6.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 7:
                    #region insertar mes7
                    c1 = double.Parse(dgv7.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv7.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv7.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv7.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv7.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv7.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv7.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv7.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv7.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv7.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv7.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv7.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv7.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv7.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv7.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 8:
                    #region insertar mes8
                    c1 = double.Parse(dgv8.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv8.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv8.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv8.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv8.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv8.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv8.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv8.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv8.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv8.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv8.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv8.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv8.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv8.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv8.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 9:
                    #region insertar mes9
                    c1 = double.Parse(dgv9.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv9.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv9.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv9.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv9.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv9.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv9.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv9.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv9.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv9.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv9.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv9.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv9.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv9.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv9.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 10:
                    #region insertar mes10
                    c1 = double.Parse(dgv10.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv10.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv10.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv10.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv10.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv10.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv10.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv10.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv10.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv10.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv10.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv10.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv10.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv10.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv10.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 11:
                    #region insertar mes11
                    c1 = double.Parse(dgv11.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv11.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv11.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv11.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv11.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv11.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv11.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv11.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv11.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv11.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv11.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv11.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv11.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv11.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv11.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 12:
                    #region insertar mes12
                    c1 = double.Parse(dgv12.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv12.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv12.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv12.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv12.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv12.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv12.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv12.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv12.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv12.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv12.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv12.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv12.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv12.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv12.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "insert into cedula3 (nombre,SIunidades,SIimporte,CostoNeto,plazopago,unidadesrecibo,importerecibo,VentasUnidades,preciounitario,Ventasimporte, SFunidades,SFimportes,rotacion,rotacionM,rotacionA,DiasInventario,mes,anio,ZapateriasTorreon) values ('" + Properties.Settings.Default.escenario + "'," + c1.ToString() + "," + c2.ToString() + "," + c3.ToString() + "," + c4.ToString() + "," + c5.ToString() + "," + c6.ToString() + "," + c7.ToString() + "," + c8.ToString() + "," + c9.ToString() + "," + c10.ToString() + "," + c11.ToString() + "," + c12.ToString() + "," + c13.ToString() + "," + c14.ToString() + "," + c15.ToString() + "," + mes.ToString() + "," + año.ToString() + ",1)";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
            }
        }

        public void m_ADD_ROWS_DGV()
        {
            dgv1.Rows.Add(); dgv2.Rows.Add(); dgv3.Rows.Add(); dgv4.Rows.Add(); dgv5.Rows.Add();
            dgv6.Rows.Add(); dgv7.Rows.Add(); dgv8.Rows.Add(); dgv9.Rows.Add(); dgv10.Rows.Add();
            dgv11.Rows.Add(); dgv12.Rows.Add(); dgvTotales.Rows.Add();
        }

        public void m_cantidadXmes(string fecha_inicio, string fecha_final) /////////////////////////////se usa en todos 
        {
            cantidadmes = 0;
            int fecha_inicio_dia = Convert.ToInt32(fecha_inicio.Substring(0, 2));
            int fecha_inicio_mes = Convert.ToInt32(fecha_inicio.Substring(3, 2));
            int fecha_inicio_ano = Convert.ToInt32(fecha_inicio.Substring(6, 4));

            int fecha_final_dia = Convert.ToInt32(fecha_final.Substring(0, 2));
            int fecha_final_mes = Convert.ToInt32(fecha_final.Substring(3, 2));
            int fecha_final_ano = Convert.ToInt32(fecha_final.Substring(6, 4));
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));

            #region añomes
            int i = 1; calculos = 1;
            for (; fecha_inicio_ano <= fecha_final_ano; fecha_inicio_ano++)
            {
                if (fecha_inicio_mes <= fecha_final_mes)
                {
                    for (; fecha_inicio_mes <= fecha_final_mes; fecha_inicio_mes++, i++)
                    {
                        try
                        {

                            m_TABS(fecha_inicio_mes, fecha_inicio_ano);/////////////////////se usa en todos

                            cantidadmes++;
                            this.Invoke(new Action(() =>
                            {
                            tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;

                            }));

                        }
                        catch{ }
                        //{ MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                if (fecha_final_mes < fecha_inicio_mes && fecha_inicio_ano != fecha_final_ano)
                {
                    for (; fecha_inicio_mes <= 12; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            m_TABS(fecha_inicio_mes, fecha_inicio_ano);/////////////////////se usa en todos

                            cantidadmes++;
                            this.Invoke(new Action(() =>
                            {
                                tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;

                            }));
                        }
                        catch{ }
                        //{ MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                fecha_inicio_mes = 1;
                
            }
            #endregion
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
        }

        public void m_CLEAR_DGV() //// nuevo limpia los dgvs siempre que se hace algo nuevo
        {
            dgv1.Rows.Clear(); dgv4.Rows.Clear(); dgv7.Rows.Clear(); dgv10.Rows.Clear();
            dgv2.Rows.Clear(); dgv5.Rows.Clear(); dgv8.Rows.Clear(); dgv11.Rows.Clear();
            dgv3.Rows.Clear(); dgv6.Rows.Clear(); dgv9.Rows.Clear(); dgv12.Rows.Clear(); dgvTotales.Rows.Clear();
        }

        public void m_compras(int mes, int ano, int i) // ejemplo query 
        {
            for (int x = 0; x <= dgv1.Rows.Count - 2; x++)
            {
                m_REFRESH_DGV();
                #region query compras x mes
                string q = "SELECT SUM(CTD_PEDIDA) AS CANTIDAD_PEDIDA,SUM(CTD_RECIB) AS unidadesrecibo, SUM(COSTO_RECIB) AS costo_descto FROM recibo_base AS V INNER JOIN fecha AS F ON V.idfecha=F.idfecha INNER JOIN estarticulo AS E ON v.`IDARTICULO`=E.IDARTICULO WHERE F.fecha BETWEEN '" + FechaAI.ToString("yyyy-MM-dd") + "' AND '" + FechaAF.ToString("yyyy-MM-dd") + "' AND F.`Mes`='" + mes + "' and f.anio='" + ano + "'   " + wherequery[x];
                #endregion query compras x mes
                #region ejecutar Compras por mes
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["unidadesrecibo"].ToString() != "")
                    {
                        unidadesrecibo[x] = double.Parse(reader["unidadesrecibo"].ToString());
                    }
                    else { unidadesrecibo[x] = 0; }
                    if (reader["costo_descto"].ToString() != "")
                    {
                        costodscto[x] = double.Parse(reader["costo_descto"].ToString());
                    }
                    else { costodscto[x] = 0; }
                    if (reader["CANTIDAD_PEDIDA"].ToString() != "")
                    {
                        cantidadpedida[x] = double.Parse(reader["CANTIDAD_PEDIDA"].ToString());
                    }
                    else { cantidadpedida[x] = 0; }
                }
                reader.Close();
                #endregion ejecutar query

            }
        }

        public void m_comprasT(int mes, int ano, int i) // ejemplo query 
        {
            string q = "";
            if (solocalzadowhere == "")
            {
                q = "SELECT SUM(CTD_PEDIDA) AS CANTIDAD_PEDIDA,SUM(CTD_RECIB) AS unidadesrecibo, SUM(COSTO_RECIB) AS costo_descto FROM recibo_base AS V INNER JOIN fecha AS F ON V.idfecha=F.idfecha INNER JOIN estarticulo AS E ON v.`IDARTICULO`=E.IDARTICULO WHERE F.fecha BETWEEN '" + FechaAI.ToString("yyyy-MM-dd") + "' AND '" + FechaAF.ToString("yyyy-MM-dd") + "' AND F.`Mes`='" + mes + "' and f.anio='" + ano + "'   ";
            }
            else
            {
                q = "SELECT SUM(CTD_PEDIDA) AS CANTIDAD_PEDIDA,SUM(CTD_RECIB) AS unidadesrecibo, SUM(COSTO_RECIB) AS costo_descto FROM recibo_base AS V INNER JOIN fecha AS F ON V.idfecha=F.idfecha INNER JOIN estarticulo AS E ON v.`IDARTICULO`=E.IDARTICULO WHERE F.fecha BETWEEN '" + FechaAI.ToString("yyyy-MM-dd") + "' AND '" + FechaAF.ToString("yyyy-MM-dd") + "' AND F.`Mes`='" + mes + "' and f.anio='" + ano + "'   and V.iddivisiones=1";
            }
            for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            {
                m_REFRESH_DGV();

                #region ejecutar Compras por mes
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["unidadesrecibo"].ToString() != "")
                    {
                        unidadesrecibo[x] = double.Parse(reader["unidadesrecibo"].ToString());
                    }
                    else { unidadesrecibo[x] = 0; }
                    if (reader["costo_descto"].ToString() != "")
                    {
                        costodscto[x] = double.Parse(reader["costo_descto"].ToString());
                    }
                    else { costodscto[x] = 0; }
                    if (reader["CANTIDAD_PEDIDA"].ToString() != "")
                    {
                        cantidadpedida[x] = double.Parse(reader["CANTIDAD_PEDIDA"].ToString());
                    }
                    else { cantidadpedida[x] = 0; }
                }
                reader.Close();
                #endregion ejecutar query

            }
        }

        public void m_costocantidad(int mes, int ano, int dia, int i) // ejemplo query 
        {
            string m = "";
            string di = "";
            if (mes <= 9)
            {
                m = "0" + mes.ToString();
            }
            else
            {
                m = mes.ToString();
            }
            if (dia <= 9)
            {
                di = "0" + dia.ToString();
            }
            else
            {
                di = dia.ToString();
            }
            DateTime fsaldoss = DateTime.Parse(ano + "-" + m + "-" + di);
            //f = DateTime.Now;
            //f.AddYears(+2);
            if (saldosi == true)
            {
                saldosi = false;
                #region consulta angiguo
                //for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                //{
                //    m_REFRESH_DGV();
                //    if (solocalzadowhere == "")
                //    {
                //        q = "SELECT sum(ventat) AS costo,sum(ctd) AS cantidad FROM EXIST AS E INNER JOIN SUCURSAL AS S ON E.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = E.IDFECHA inner join estarticulo as V on E.idarticulo=V.idarticulo WHERE  F.FECHA= '" + fsaldoss.AddDays(-1).ToString("yyyy-MM-dd") + "' " + queryExist[(x - 1)];
                //    }
                //    else
                //    {
                //        q = "SELECT sum(ventat) AS costo,sum(ctd) AS cantidad FROM EXIST AS E INNER JOIN SUCURSAL AS S ON E.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = E.IDFECHA inner join estarticulo as V on E.idarticulo=V.idarticulo WHERE  F.FECHA= '" + fsaldoss.AddDays(-1).ToString("yyyy-MM-dd") + "' and V.iddivisiones=1 " + queryExist[(x - 1)];
                //    }
                //    cmd = new MySqlCommand(q, Conn);
                //    reader = cmd.ExecuteReader();
                //    while (reader.Read())
                //    {
                //        if (reader["costo"].ToString() != "")
                //        {
                //            costo[x] = double.Parse(reader["costo"].ToString());
                //        }
                //        else { costo[x] = 0; }
                //        if (reader["cantidad"].ToString() != "")
                //        {
                //            cantidad[x] = double.Parse(reader["cantidad"].ToString());
                //        }
                //        else { cantidad[x] = 0; }
                //        if (costo[x] != 0 && cantidad[x] != 0)
                //        {
                //            costoneto[x] = costo[x] / cantidad[x];
                //        }
                //        else
                //        {
                //            costoneto[x] = 0;
                //        }
                //        m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                //        m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                //        m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                //    }
                //    reader.Close();
                //}
                #endregion
                SaldosInicialesConsulta(mes,ano,i,fsaldoss);
            }
            else
            {
                switch (i)
                {
                    case 2:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv1.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv1.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }

                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 3:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv2.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv2.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 4:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv3.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv3.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 5:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv4.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv4.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 6:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv5.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv5.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 7:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv6.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv6.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 8:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv7.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv7.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 9:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv8.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv8.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 10:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv9.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv9.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 11:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv10.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv10.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                    case 12:
                        #region
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
                                cantidad[x] = double.Parse(dgv11.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                costo[x] = double.Parse(dgv11.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));

                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        #endregion
                        break;
                }

            }
        }

        public void m_costocantidadT(int mes, int ano, int i) // ejemplo query 
        {
            DateTime f = fech1;
            if (saldosi==true)
            {
                saldosi = false;
                for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                {
                    m_REFRESH_DGV();
                    if (solocalzadowhere == "")
                    {
                        string s = "SELECT sum(ventat) AS costo,sum(ctd) AS cantidad FROM EXIST AS E INNER JOIN SUCURSAL AS S ON E.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = E.IDFECHA inner join estarticulo as V on E.idarticulo=V.idarticulo WHERE  F.FECHA= '" + f.AddDays(-1).ToString("yyyy-MM-dd") + "' ";
                    }
                    else
                    {
                        s = "SELECT sum(ventat) AS costo,sum(ctd) AS cantidad FROM EXIST AS E INNER JOIN SUCURSAL AS S ON E.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = E.IDFECHA inner join estarticulo as V on E.idarticulo=V.idarticulo WHERE  F.FECHA= '" + f.AddDays(-1).ToString("yyyy-MM-dd") + "' and V.iddivisiones=1 ";
                    }
                    cmd = new MySqlCommand(s, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["costo"].ToString() != "")
                        {
                            costo[x] = double.Parse(reader["costo"].ToString());
                        }
                        else { costo[x] = 0; }
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidad[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidad[x] = 0; }
                        if (costo[x] != 0 && cantidad[x] != 0)
                        {
                            costoneto[x] = costo[x] / cantidad[x];
                        }
                        else
                        {
                            costoneto[x] = 0;
                        }
                        m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                        m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                        m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                    }
                    reader.Close();
                }
            }
            else
            {
                switch (i)
                {
                    case 2:
                        #region
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
 cantidad[x] = double.Parse(dgv1.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv1.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
#endregion
                        break;
                    case 3:
                        #region
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
cantidad[x] = double.Parse(dgv2.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv2.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
#endregion
                        break;
                    case 4:
                        #region 
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
  cantidad[x] = double.Parse(dgv3.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv3.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                          
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
#endregion
                        break;
                    case 5:
                        #region
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
  cantidad[x] = double.Parse(dgv4.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv4.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                          
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
#endregion
                        break;
                    case 6:
                        #region
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
cantidad[x] = double.Parse(dgv5.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv5.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
#endregion
                        break;
                    case 7:
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
 cantidad[x] = double.Parse(dgv6.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv6.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        break;
                    case 8:
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
 cantidad[x] = double.Parse(dgv7.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv7.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        break;
                    case 9:
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
cantidad[x] = double.Parse(dgv8.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv8.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        break;
                    case 10:
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
cantidad[x] = double.Parse(dgv9.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv9.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        break;
                    case 11:
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
cantidad[x] = double.Parse(dgv10.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv10.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        break;
                    case 12:
                        for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
cantidad[x] = double.Parse(dgv11.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            costo[x] = double.Parse(dgv11.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (costo[x] != 0 && cantidad[x] != 0)
                            {
                                costoneto[x] = costo[x] / cantidad[x];
                            }
                            else
                            {
                                costoneto[x] = 0;
                            }
                            m_LLENAR_DGV(i, x, 1, cantidad[x].ToString("n0"));
                            m_LLENAR_DGV(i, x, 2, costo[x].ToString("C2"));
                            m_LLENAR_DGV(i, x, 3, costoneto[x].ToString("C2"));
                        }
                        break;
                }

            }
        }

        public void m_DIASMESESANOS(string fecha_inicio, string fecha_final) /////////////////////////////se usa en todos 
        {
            //m_cantidadXmes(fecha_inicio, fecha_final);
            saldosi = true;
            m_limpiardgvTotalperiodo();
            int[] imespendiente = new int[1000];
            int fecha_inicio_dia = Convert.ToInt32(fecha_inicio.Substring(0, 2));
            int fecha_inicio_mes = Convert.ToInt32(fecha_inicio.Substring(3, 2));
            int fecha_inicio_ano = Convert.ToInt32(fecha_inicio.Substring(6, 4));

            int fecha_final_dia = Convert.ToInt32(fecha_final.Substring(0, 2));
            int fecha_final_mes = Convert.ToInt32(fecha_final.Substring(3, 2));
            int fecha_final_ano = Convert.ToInt32(fecha_final.Substring(6, 4));

            int fecha_creacion_dia = int.Parse(fechaActual.Substring(0, 2));
            int fecha_creacion_mes = int.Parse(fechaActual.Substring(3, 2));
            int fecha_creacion_anio = int.Parse(fechaActual.Substring(6, 4));
            int mesesrotacionPendiente = 0;
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
            #region añomes
            int i = 1; calculos = 1;
            for (; fecha_inicio_ano <= fecha_final_ano; fecha_inicio_ano++)
            {

                if (fecha_inicio_mes <= fecha_final_mes)
                {
                    for (; fecha_inicio_mes <= fecha_final_mes; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region
                            //m_TABS(fecha_inicio_mes, fecha_inicio_ano);/////////////////////se usa en todos
                            if (comprobarCargar(fecha_inicio_ano + 1, fecha_inicio_mes, i) == true)
                            {
                                cargar(fecha_inicio_mes, fecha_inicio_ano + 1, i);
                                m_cifracontrol(i);
                            }
                            else
                            {
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidad(fecha_inicio_mes, (fecha_inicio_ano + 1), fecha_creacion_dia, i);
                                        //m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        //m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_obtenercedula1(i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        //m_compraHistoricaParcial(fecha_inicio_mes, fecha_inicio_ano, i, fecha_creacion_dia); // compra y saldos
                                        ConsultaParcial(fecha_inicio_mes, fecha_inicio_ano, (fecha_creacion_dia), i);

                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidad(fecha_inicio_mes, fecha_creacion_anio, 1, i);
                                        //m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_creacion_anio, i);
                                        ConsultaHistorico(fecha_inicio_mes, fecha_creacion_anio,i);
                                        m_plazo(fecha_inicio_mes, fecha_creacion_anio, i);
                                        //m_comprasHmescompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_creacion_anio, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidad(fecha_inicio_mes, fecha_inicio_ano, 1, i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_ventasMes(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1(i);
                                        ConsultaProyectado(fecha_inicio_mes, fecha_inicio_ano,i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano);
                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);
                            }
                            if (proyectar == false)
                            {
                                m_calcularRenglonTotal(i);

                                m_calcularTotalPeriodo(i);
                            }                            //tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;
                            #endregion
                        }
                        catch (Exception x)
                        {
                            this.Invoke(new Action(() =>
                            {
                            MessageBox.Show("Error con las fechas " + x);
                            }));
                        }
                    }
                }
                if (fecha_final_mes < fecha_inicio_mes && fecha_inicio_ano != fecha_final_ano)
                {
                    for (; fecha_inicio_mes <= 12; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region años posteriores
                           // m_TABS(fecha_inicio_mes, fecha_inicio_ano);/////////////////////se usa en todos
                            if (comprobarCargar(fecha_inicio_ano + 1, fecha_inicio_mes, i) == true)
                            {
                                cargar(fecha_inicio_mes, fecha_inicio_ano + 1, i);
                                m_cifracontrol(i);
                            }
                            else
                            {
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidad(fecha_inicio_mes, (fecha_inicio_ano + 1), fecha_creacion_dia, i);
                                        m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_obtenercedula1(i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        m_compraHistoricaParcial(fecha_inicio_mes, fecha_inicio_ano, i, fecha_creacion_dia); // compra y saldos
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidad(fecha_inicio_mes, fecha_creacion_anio, 1, i);
                                        m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_creacion_anio, i);

                                        m_plazo(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_comprasHmescompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_creacion_anio, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidad(fecha_inicio_mes, fecha_inicio_ano, 1, i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasMes(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);

                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1(i);
                                        m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano);
                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);

                            }
                            if (proyectar == false)
                            {
                                m_calcularRenglonTotal(i);
                                m_calcularTotalPeriodo(i);
                            }                            //tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;
                            #endregion
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                fecha_inicio_mes = 1;
            }
            #endregion
            this.Invoke(new Action(() =>
            {
            tabcontrol.SelectedIndex = 0;
            }));
            m_cifracontrol((cantidadmes + 1));
            if (mesesrotacionPendiente >= 1)
            {
                while (mesesrotacionPendiente >= 1)
                {
                    if (proyectar == false)
                    {
                        m_calcularRenglonTotal(imespendiente[mesesrotacionPendiente]);
                        m_calcularTotalPeriodo(imespendiente[mesesrotacionPendiente]);
                    }
                    m_rotacionesPendientes(imespendiente[mesesrotacionPendiente]);
                    mesesrotacionPendiente--;
                }
            }
            else { }
            
        }

        public void m_DIASMESESANOS_guardar(string fecha_inicio, string fecha_final) /////////////////////////////se usa en todos 
        {
            tabcontrol.SelectedIndex = 0;
            int fecha_inicio_dia = Convert.ToInt32(fecha_inicio.Substring(0, 2));
            int fecha_inicio_mes = Convert.ToInt32(fecha_inicio.Substring(3, 2));
            int fecha_inicio_ano = 1 + (Convert.ToInt32(fecha_inicio.Substring(6, 4)));

            int fecha_final_dia = Convert.ToInt32(fecha_final.Substring(0, 2));
            int fecha_final_mes = Convert.ToInt32(fecha_final.Substring(3, 2));
            int fecha_final_ano = 1 + (Convert.ToInt32(fecha_final.Substring(6, 4)));

            #region añomes
            int i = 1; calculos = 1;
            for (; fecha_inicio_ano <= fecha_final_ano; fecha_inicio_ano++)
            {
                if (fecha_inicio_mes <= fecha_final_mes)
                {
                    for (; fecha_inicio_mes <= fecha_final_mes; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            comprobar_guardar(fecha_inicio_ano, fecha_inicio_mes, i);
                            tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                if (fecha_final_mes < fecha_inicio_mes && fecha_inicio_ano != fecha_final_ano)
                {
                    for (; fecha_inicio_mes <= 12; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            comprobar_guardar(fecha_inicio_ano, fecha_inicio_mes, i);
                            tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                fecha_inicio_mes = 1;
            }
            #endregion
            tabcontrol.SelectedIndex = 0;
        }

        public void m_DIASMESESANOS_guardarT(string fecha_inicio, string fecha_final) /////////////////////////////se usa en todos 
        {
            tabcontrol.SelectedIndex = 0;
            int fecha_inicio_dia = Convert.ToInt32(fecha_inicio.Substring(0, 2));
            int fecha_inicio_mes = Convert.ToInt32(fecha_inicio.Substring(3, 2));
            int fecha_inicio_ano = Convert.ToInt32(fecha_inicio.Substring(6, 4));

            int fecha_final_dia = Convert.ToInt32(fecha_final.Substring(0, 2));
            int fecha_final_mes = Convert.ToInt32(fecha_final.Substring(3, 2));
            int fecha_final_ano = Convert.ToInt32(fecha_final.Substring(6, 4));

            #region añomes
            int i = 1; calculos = 1;
            for (; fecha_inicio_ano <= fecha_final_ano; fecha_inicio_ano++)
            {
                if (fecha_inicio_mes <= fecha_final_mes)
                {
                    for (; fecha_inicio_mes <= fecha_final_mes; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            comprobar_guardarT(fecha_inicio_ano + 1, fecha_inicio_mes, i);
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                if (fecha_final_mes < fecha_inicio_mes && fecha_inicio_ano != fecha_final_ano)
                {
                    for (; fecha_inicio_mes <= 12; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            comprobar_guardarT(fecha_inicio_ano + 1, fecha_inicio_mes, i);
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                fecha_inicio_mes = 1;
            }
            #endregion
        }

        public void m_DIASMESESANOS_Refresh(string fecha_inicio, string fecha_final) /////////////////////////////se usa en todos 
        {
            m_limpiardgvTotalperiodo();
            saldosi = true;
            int[] imespendiente = new int[1000];
            int fecha_inicio_dia = Convert.ToInt32(fecha_inicio.Substring(0, 2));
            int fecha_inicio_mes = Convert.ToInt32(fecha_inicio.Substring(3, 2));
            int fecha_inicio_ano = Convert.ToInt32(fecha_inicio.Substring(6, 4));

            int fecha_final_dia = Convert.ToInt32(fecha_final.Substring(0, 2));
            int fecha_final_mes = Convert.ToInt32(fecha_final.Substring(3, 2));
            int fecha_final_ano = Convert.ToInt32(fecha_final.Substring(6, 4));

            int fecha_creacion_dia = int.Parse(fechaActual.Substring(0, 2));
            int fecha_creacion_mes = int.Parse(fechaActual.Substring(3, 2));
            int fecha_creacion_anio = int.Parse(fechaActual.Substring(6, 4));
            int mesesrotacionPendiente = 0;
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
            #region añomes
            int i = 1; calculos = 1;
            for (; fecha_inicio_ano <= fecha_final_ano; fecha_inicio_ano++)
            {

                if (fecha_inicio_mes <= fecha_final_mes)
                {
                    for (; fecha_inicio_mes <= fecha_final_mes; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region
                            //m_TABS(fecha_inicio_mes, fecha_inicio_ano);/////////////////////se usa en todos
                            
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidad(fecha_inicio_mes, (fecha_inicio_ano + 1), fecha_creacion_dia, i);
                                        m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_obtenercedula1(i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        m_compraHistoricaParcial(fecha_inicio_mes, fecha_inicio_ano, i, fecha_creacion_dia); // compra y saldos
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidad(fecha_inicio_mes, fecha_creacion_anio, 1, i);
                                        m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_creacion_anio, i);

                                        m_plazo(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_comprasHmescompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_creacion_anio, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidad(fecha_inicio_mes, fecha_inicio_ano, 1, i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasMes(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1(i);
                                        m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano);
                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);
                            if (proyectar == false)
                            {
                                m_calcularRenglonTotal(i);

                                m_calcularTotalPeriodo(i);
                            }                            //tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;
                            #endregion
                        }
                        catch (Exception x)
                        {
                            this.Invoke(new Action(() =>
                            {
                                MessageBox.Show("Error con las fechas " + x);
                            }));
                        }
                    }
                }
                if (fecha_final_mes < fecha_inicio_mes && fecha_inicio_ano != fecha_final_ano)
                {
                    for (; fecha_inicio_mes <= 12; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region años posteriores
                            // m_TABS(fecha_inicio_mes, fecha_inicio_ano);/////////////////////se usa en todos
                            
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidad(fecha_inicio_mes, (fecha_inicio_ano + 1), fecha_creacion_dia, i);
                                        m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_obtenercedula1(i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        m_compraHistoricaParcial(fecha_inicio_mes, fecha_inicio_ano, i, fecha_creacion_dia); // compra y saldos
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidad(fecha_inicio_mes, fecha_creacion_anio, 1, i);
                                        m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_creacion_anio, i);

                                        m_plazo(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_comprasHmescompleto(fecha_inicio_mes, fecha_creacion_anio, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_creacion_anio, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidad(fecha_inicio_mes, fecha_inicio_ano, 1, i);
                                        //m_compras(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasMes(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);

                                        m_plazo(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1(i);
                                        m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano);
                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);

                            if (proyectar == false)
                            {
                                m_calcularRenglonTotal(i);
                                m_calcularTotalPeriodo(i);
                            }                            //tabcontrol.SelectedIndex = tabcontrol.SelectedIndex + 1;
                            #endregion
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                fecha_inicio_mes = 1;
            }
            #endregion
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
            m_cifracontrol((cantidadmes + 1));
            if (mesesrotacionPendiente >= 1)
            {
                while (mesesrotacionPendiente >= 1)
                {
                    if (proyectar == false)
                    {
                        m_calcularRenglonTotal(imespendiente[mesesrotacionPendiente]);
                        m_calcularTotalPeriodo(imespendiente[mesesrotacionPendiente]);
                    }
                    m_rotacionesPendientes(imespendiente[mesesrotacionPendiente]);
                    mesesrotacionPendiente--;
                }
            }
            else { }
        }

        public void m_DIASMESESANOS_total(string fecha_inicio, string fecha_final)
        {
            //m_cantidadXmes(fecha_inicio, fecha_final);
            saldosi = true;
            int[] imespendiente = new int[1000];
            int fecha_inicio_dia = Convert.ToInt32(fecha_inicio.Substring(0, 2));
            int fecha_inicio_mes = Convert.ToInt32(fecha_inicio.Substring(3, 2));
            int fecha_inicio_ano = Convert.ToInt32(fecha_inicio.Substring(6, 4));

            int fecha_final_dia = Convert.ToInt32(fecha_final.Substring(0, 2));
            int fecha_final_mes = Convert.ToInt32(fecha_final.Substring(3, 2));
            int fecha_final_ano = Convert.ToInt32(fecha_final.Substring(6, 4));

            int fecha_creacion_dia = int.Parse(fechaActual.Substring(0, 2));
            int fecha_creacion_mes = int.Parse(fechaActual.Substring(3, 2));
            int fecha_creacion_anio = int.Parse(fechaActual.Substring(6, 4));
            int mesesrotacionPendiente = 0;
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
            #region añomes
            int i = 1; calculos = 1;
            for (; fecha_inicio_ano <= fecha_final_ano; fecha_inicio_ano++)
            {

                if (fecha_inicio_mes <= fecha_final_mes)
                {
                    for (; fecha_inicio_mes <= fecha_final_mes; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region
                            if (comprobarCargarT(fecha_inicio_ano + 1, fecha_inicio_mes, i) == true)
                            {
                                cargarT(fecha_inicio_mes, fecha_inicio_ano + 1, i);
                                m_cifracontrol(i);
                            }
                            else
                            {
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        m_obtenercedula1(i);
                                        //(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        m_compraHistoricaParcialT(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia)); // compra y saldos
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);

                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidadT(fecha_inicio_mes, (fecha_inicio_ano + 1), i);
                                        m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        // m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_comprasHmescompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;

                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_comprasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_VentasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasMesT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1T(i);
                                        m_CALCULOST(i, fecha_inicio_mes, fecha_inicio_ano);
                                        
                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);
                            }
                            if (proyectar == false)
                            {
                                m_calcularTotalPeriodo(i);
                            }
                           
                            #endregion
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                if (fecha_final_mes < fecha_inicio_mes && fecha_inicio_ano != fecha_final_ano)
                {
                    for (; fecha_inicio_mes <= 12; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region años posteriores
                            if (comprobarCargarT(fecha_inicio_ano + 1, fecha_inicio_mes, i) == true)
                            {
                                cargarT(fecha_inicio_mes, fecha_inicio_ano + 1, i);
                                m_cifracontrol(i);
                            }
                            else
                            {
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        m_obtenercedula1(i);
                                        //(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        m_compraHistoricaParcialT(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia)); // compra y saldos
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);

                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;

                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidadT(fecha_inicio_mes, (fecha_inicio_ano + 1), i);
                                        m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        // m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_comprasHmescompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;

                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_comprasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_VentasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasMesT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1T(i);
                                        m_CALCULOST(i, fecha_inicio_mes, fecha_inicio_ano);
                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);
                            }
                            if (proyectar == false)
                            {
                                m_calcularTotalPeriodo(i);
                            }
                            #endregion
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                fecha_inicio_mes = 1;
            }
            #endregion
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
            m_cifracontrol((cantidadmes + 1));
            if (mesesrotacionPendiente >= 1)
            {
                while (mesesrotacionPendiente >= 1)
                {
                    if (proyectar == false)
                    {
                        m_calcularTotalPeriodo(imespendiente[mesesrotacionPendiente]);
                    }
                    m_rotacionesPendientes(imespendiente[mesesrotacionPendiente]);
                    mesesrotacionPendiente--;
                }
            }
            else { }
        }

        public void m_DIASMESESANOS_total_Refresh(string fecha_inicio, string fecha_final)
        {
            saldosi = true;
            int[] imespendiente = new int[1000];
            int fecha_inicio_dia = Convert.ToInt32(fecha_inicio.Substring(0, 2));
            int fecha_inicio_mes = Convert.ToInt32(fecha_inicio.Substring(3, 2));
            int fecha_inicio_ano = Convert.ToInt32(fecha_inicio.Substring(6, 4));

            int fecha_final_dia = Convert.ToInt32(fecha_final.Substring(0, 2));
            int fecha_final_mes = Convert.ToInt32(fecha_final.Substring(3, 2));
            int fecha_final_ano = Convert.ToInt32(fecha_final.Substring(6, 4));

            int fecha_creacion_dia = int.Parse(fechaActual.Substring(0, 2));
            int fecha_creacion_mes = int.Parse(fechaActual.Substring(3, 2));
            int fecha_creacion_anio = int.Parse(fechaActual.Substring(6, 4));
            int mesesrotacionPendiente = 0;
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
            #region añomes
            int i = 1; calculos = 1;
            for (; fecha_inicio_ano <= fecha_final_ano; fecha_inicio_ano++)
            {

                if (fecha_inicio_mes <= fecha_final_mes)
                {
                    for (; fecha_inicio_mes <= fecha_final_mes; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region
                            
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        m_obtenercedula1(i);
                                        //(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        m_compraHistoricaParcialT(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia)); // compra y saldos
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);

                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;
                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidadT(fecha_inicio_mes, (fecha_inicio_ano + 1), i);
                                        m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        // m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_comprasHmescompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;

                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_comprasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_VentasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasMesT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1T(i);
                                        m_CALCULOST(i, fecha_inicio_mes, fecha_inicio_ano);

                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);
                            if (proyectar == false)
                            {
                                m_calcularTotalPeriodo(i);
                            }

                            #endregion
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                if (fecha_final_mes < fecha_inicio_mes && fecha_inicio_ano != fecha_final_ano)
                {
                    for (; fecha_inicio_mes <= 12; fecha_inicio_mes++, i++)
                    {
                        try
                        {
                            #region años posteriores
                            
                                if (fecha_inicio_mes == fecha_creacion_mes)
                                {
                                    //// sacar dias
                                    if (fecha_creacion_dia >= 1)
                                    {
                                        /// cantidad de dias Extra
                                        #region Mes mixto (dias proyectados --- dias historicos)
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasHistoricasParcial(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia));
                                        m_obtenercedula1(i);
                                        //(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_CALCULOS(i, fecha_inicio_mes, fecha_inicio_ano-1);
                                        m_compraHistoricaParcialT(fecha_inicio_mes, fecha_inicio_ano, i, (fecha_creacion_dia)); // compra y saldos
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;

                                        #endregion
                                    }

                                }
                                else
                                {
                                    if (fecha_inicio_mes <= fecha_creacion_mes)
                                    {
                                        /// mes completo Historico
                                        /// 
                                        #region mes historico completo
                                        m_costocantidadT(fecha_inicio_mes, (fecha_inicio_ano + 1), i);
                                        m_VentasHistoricoMesCompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        // m_precioPromedioVentas(fecha_inicio_mes, (fecha_inicio_ano + 1), i);

                                        m_comprasHmescompleto(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_saldosFinalesH(fecha_inicio_mes, fecha_inicio_ano, i);
                                        mesesrotacionPendiente++;
                                        imespendiente[mesesrotacionPendiente] = i;

                                        #endregion
                                    }
                                    if (fecha_inicio_mes >= fecha_creacion_mes)
                                    {
                                        //proceso normal
                                        #region Mes proyectado
                                        m_costocantidadT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_comprasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        //m_VentasT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_ventasMesT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_precioPromedioVentas(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_plazoT(fecha_inicio_mes, fecha_inicio_ano, i);
                                        m_obtenercedula1T(i);
                                        m_CALCULOST(i, fecha_inicio_mes, fecha_inicio_ano);
                                        #endregion
                                    }
                                }
                                m_cifracontrol(i);
                                rotacionesExtra(i);
                            if (proyectar == false)
                            {
                                m_calcularTotalPeriodo(i);
                            }
                            #endregion
                        }
                        catch (Exception x)
                        { MessageBox.Show("Error con las fechas " + x); }
                    }
                }
                fecha_inicio_mes = 1;
            }
            #endregion
            this.Invoke(new Action(() =>
            {
                tabcontrol.SelectedIndex = 0;
            }));
            m_cifracontrol((cantidadmes + 1));
            if (mesesrotacionPendiente >= 1)
            {
                while (mesesrotacionPendiente >= 1)
                {
                    if (proyectar == false)
                    {
                        m_calcularTotalPeriodo(imespendiente[mesesrotacionPendiente]);
                    }
                    m_rotacionesPendientes(imespendiente[mesesrotacionPendiente]);
                    mesesrotacionPendiente--;
                }
            }
            else { }
        }

        public void m_ESTRUCTURA()
        {
            #region cargar estructura
            int i = 1;
            m_CLEAR_DGV();
            m_ADD_ROWS_DGV();
            m_PASS_VALUES_DGV("Total", 0);
            dgv1.Rows[0].Cells[0].Value = "Total";
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                m_REFRESH_DGV();
                m_ADD_ROWS_DGV();
                dgv1.Rows[i].Cells[0].Value = reader["descrip"].ToString();
                m_PASS_VALUES_DGV(dgv1.Rows[i].Cells[0].Value.ToString(), i);
                i++;
            }
            reader.Close();
            #endregion
        }

        public void m_PASS_VALUES_DGV(string val, int renglon)
        {
            dgv2.Rows[renglon].Cells[0].Value = val; dgv3.Rows[renglon].Cells[0].Value = val;
            dgv4.Rows[renglon].Cells[0].Value = val; dgv5.Rows[renglon].Cells[0].Value = val;
            dgv6.Rows[renglon].Cells[0].Value = val; dgv7.Rows[renglon].Cells[0].Value = val;
            dgv8.Rows[renglon].Cells[0].Value = val; dgv9.Rows[renglon].Cells[0].Value = val;
            dgv10.Rows[renglon].Cells[0].Value = val; dgv11.Rows[renglon].Cells[0].Value = val;
            dgv12.Rows[renglon].Cells[0].Value = val; dgvTotales.Rows[renglon].Cells[0].Value = val;
        }

        public void m_plazo(int mes, int ano, int i) // ejemplo query   
        {
            string j = "";
            j = "select dias from diaspagosprov";
            cmd = new MySqlCommand(j, ConnCipsis);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (reader["dias"].ToString() != "")
                {
                    plazo[0] = double.Parse(reader["dias"].ToString());
                }
                else { plazo[0] = 0; }
                //m_LLENAR_DGV(i, 1, 4, plazo[0].ToString("n0"));
            }
            reader.Close();
            for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
            {
                m_REFRESH_DGV();
                m_LLENAR_DGV(i, x, 4, plazo[0].ToString("n0"));
            }
            //m_defaultColumnValue_DGV(i,4,plazo[0].ToString());
        }

        public void m_plazoT(int mes, int ano, int i) // ejemplo query 
        {
            string j = "";
            //if (solocalzadowhere == "")
            //{
            //     j = "SELECT AVG(diaspp) AS plazo FROM condicionesp AS E INNER JOIN estarticulo AS V ON E.`marca`=V.`marca` AND diaspp <> 0 ";
            //}
            //else
            //{
            //     j = "SELECT AVG(diaspp) AS plazo FROM condicionesp AS E INNER JOIN estarticulo AS V ON E.`marca`=V.`marca` AND diaspp <> 0 and v.iddivisiones=1";
            //}
            j = "select dias from diaspagosprov";
            cmd = new MySqlCommand(j, ConnCipsis);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (reader["dias"].ToString() != "")
                {
                    plazo[0] = double.Parse(reader["dias"].ToString());
                }
                else { plazo[0] = 0; }
                m_LLENAR_DGV(i, 0, 4, plazo[0].ToString("n0"));
            }
            reader.Close();
            //for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            //{
            //    m_REFRESH_DGV();
            //    m_LLENAR_DGV(i, 0, 4, plazo[0].ToString("n0"));

            //}
        }

        public void m_precioPromedioVentas(int mes, int ano, int i) // ejemplo query 
        {
            int x = 0;
            string q = "";
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            for (; x <= dgv1.Rows.Count - 1; x++)
            {
                m_REFRESH_DGV();
                #region ventas
                if (solototal == true)
                {
                    //q = "SELECT ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' ";
                    q = "SELECT ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit FROM VENTASBASE as V INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' ";
                }
                else
                {
                    //q = "SELECT ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                    q = "SELECT ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit FROM VENTASBASE AS V INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                }

                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {


                    if (reader["preciounit"].ToString() != "")
                    {
                        preciounit[x] = double.Parse(reader["preciounit"].ToString());
                    }
                    else { preciounit[x] = 0; }

                    m_LLENAR_DGV(i, x, 8, preciounit[x].ToString("C2"));

                }
                reader.Close();
                switch (i)
                {

                    case 1:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv1.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 2:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));
                        break;
                    case 3:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));
                        break;
                    case 4:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));
                        break;
                    case 5:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 6:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 7:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 8:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 9:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 10:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 11:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                    case 12:
                        this.Invoke(new Action(() =>
                        {
                            importe[x] = double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency) * double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }));

                        m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));

                        break;
                }
                #endregion ejecutar query

            }
        }

        public void m_precioPromedioVentasT(int mes, int ano, int i) // ejemplo query 
        {
            for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            {
                m_REFRESH_DGV();
                #region ventas

                string q = "SELECT SUM(impllenototal) AS importe,SUM(ctdneta) AS cantidad ,ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit, (SUM(rebajaregsiva)+SUM(rebajapromsiva)+SUM(rebajanormalsiva)+SUM(rebajadesctosiva)) AS rebajasimp, ((SUM(rebajaregsiva)+SUM(rebajapromsiva)+SUM(rebajanormalsiva)+SUM(rebajadesctosiva))/SUM(impllenototal))*100  AS rebajaspor FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' ";

                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["importe"].ToString() != "")
                    {
                        importe[x] = double.Parse(reader["importe"].ToString());
                    }
                    else { importe[x] = 0; }
                    if (reader["preciounit"].ToString() != "")
                    {
                        preciounit[x] = double.Parse(reader["preciounit"].ToString());
                    }
                    else { preciounit[x] = 0; }

                    m_LLENAR_DGV(i, x, 8, preciounit[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));
                }
                reader.Close();
                #endregion ejecutar query
            }
        }

        public void m_REFRESH_DGV()
        {
            this.Invoke(new Action(() =>
            {
                dgv1.Refresh(); dgv2.Refresh(); dgv3.Refresh(); dgv4.Refresh(); dgv5.Refresh();
                dgv6.Refresh(); dgv7.Refresh(); dgv8.Refresh(); dgv9.Refresh(); dgv10.Refresh();
                dgv11.Refresh(); dgv12.Refresh(); dgvTotales.Refresh();
            }));

        }

        public void m_renglonTotal()
        {
            dgv1.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv2.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv3.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv4.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv5.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv6.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv7.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv8.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv9.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv10.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv11.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgv12.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
            dgvTotales.Rows[0].DefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#F7FE2E");
        }

        public void m_TABS(int mes, int ano)
        {
            ano++;
            string mestab = "";
            this.Invoke(new Action(() =>
            {
                switch (mes)
                {
                    case 1: mestab = "Enero"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 2: mestab = "Febrero"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 3: mestab = "Marzo"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 4: mestab = "Abril"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 5: mestab = "Mayo"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 6: mestab = "Junio"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 7: mestab = "Julio"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 8: mestab = "Agosto"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 9: mestab = "Septiembre"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 10: mestab = "Octubre"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 11: mestab = "Noviembre"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;
                    case 12: mestab = "Diciembre"; tabcontrol.SelectedTab.Text = mestab + " " + ano;
                        break;

                }
            }));

        }

        public void m_VentasT(int mes, int ano, int i) // ejemplo query 
        {
            string q = "";
            if (solocalzadowhere == "")
            {
                q = "SELECT SUM(impllenototal) AS importe,SUM(ctdneta) AS cantidad ,ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit, (SUM(rebajaregsiva)+SUM(rebajapromsiva)+SUM(rebajanormalsiva)+SUM(rebajadesctosiva)) AS rebajasimp, ((SUM(rebajaregsiva)+SUM(rebajapromsiva)+SUM(rebajanormalsiva)+SUM(rebajadesctosiva))/SUM(impllenototal))*100  AS rebajaspor FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.FECHA BETWEEN '" + FechaAI.ToString("yyyy-MM-dd") + "' AND '" + FechaAF.ToString("yyyy-MM-dd") + "' AND F.Mes='" + mes + "' and f.anio='" + ano + "' ";
            }
            else
            {
                q = "SELECT SUM(impllenototal) AS importe,SUM(ctdneta) AS cantidad ,ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit, (SUM(rebajaregsiva)+SUM(rebajapromsiva)+SUM(rebajanormalsiva)+SUM(rebajadesctosiva)) AS rebajasimp, ((SUM(rebajaregsiva)+SUM(rebajapromsiva)+SUM(rebajanormalsiva)+SUM(rebajadesctosiva))/SUM(impllenototal))*100  AS rebajaspor FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.FECHA BETWEEN '" + FechaAI.ToString("yyyy-MM-dd") + "' AND '" + FechaAF.ToString("yyyy-MM-dd") + "' AND F.Mes='" + mes + "' and f.anio='" + ano + "' and V.iddivisiones=1";
            }
            for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            {
                m_REFRESH_DGV();
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["importe"].ToString() != "")
                    {
                        importe[x] = double.Parse(reader["importe"].ToString());
                    }
                    else { importe[x] = 0; }

                    if (reader["cantidad"].ToString() != "")
                    {
                        cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                    }
                    else { cantidadV[x] = 0; }

                    if (reader["preciounit"].ToString() != "")
                    {
                        preciounit[x] = double.Parse(reader["preciounit"].ToString());
                    }
                    else { preciounit[x] = 0; }

                    if (reader["rebajasimp"].ToString() != "")
                    {
                        rebajasimp[x] = double.Parse(reader["rebajasimp"].ToString());
                    }
                    else { rebajasimp[x] = 0; }

                    if (reader["rebajaspor"].ToString() != "")
                    {
                        rebajaspor[x] = double.Parse(reader["rebajaspor"].ToString());
                    }
                    else { rebajaspor[x] = 0; }
                    //if (unidadesSaldo[x] <= 0)
                    //{
                    //    unidadesSaldo[x] = 0;
                    //}
                    //else { }
                    m_LLENAR_DGV(i, x, 7, cantidadV[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 8, preciounit[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 9, importe[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, rebajaspor[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, rebajasimp[x].ToString("C2"));
                    //m_LLENAR_DGV(i, x , 12, unidadesSaldo[x].ToString("n0"));
                }
                reader.Close();

                #endregion ejecutar query

            }
        }

        public void rotacionesExtra(int i)
        {
            double saldosI = 0;
            double saldosF = 0;
            double ventas = 0;
            double rotacionM = 0;
            double rotacionA = 0;
            int x = 0;
            switch (i)
            {
                case 1:
                    if (1 <= cantidadmes)
                    {
                        #region mes1
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv1.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM;
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM;
                            }
                            dgv1.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv1.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    }
                    break;
                case 2:
                    if (2 <= cantidadmes)
                    {
                        #region mes2
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv2.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
 saldosI = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv2.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv1.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv1.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv2.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv2.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                           
                        }
                        #endregion
                    }
                    break;
                case 3:
                    if (3 <= cantidadmes)
                    {
                        #region mes3
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
 saldosI = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv3.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv2.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv2.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv3.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv3.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                           
                        }
                        #endregion
                    }
                    break;
                case 4:
                    if (4 <= cantidadmes)
                    {
                        #region mes4
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv4.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv3.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv3.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv4.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv4.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    }
                    break;
                case 5:
                    if (5 <= cantidadmes)
                    {
                        #region mes5
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv5.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv4.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv4.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv5.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv5.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    } break;
                case 6:
                    if (6 <= cantidadmes)
                    {
                        #region mes6
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv6.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv5.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv5.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv6.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv6.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    }
                    break;
                case 7:
                    if (7 <= cantidadmes)
                    {
                        #region mes7
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
 saldosI = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv7.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv6.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv6.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv7.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv7.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                           
                        }
                        #endregion
                    }
                    break;
                case 8:
                    if (8 <= cantidadmes)
                    {
                        #region mes8
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv8.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv7.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv7.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv8.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv8.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    }
                    break;
                case 9:
                    if (9 <= cantidadmes)
                    {
                        #region mes9
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv9.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv8.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv8.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv9.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv9.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    }
                    break;
                case 10:
                    if (10 <= cantidadmes)
                    {
                        #region mes10
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv10.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv9.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv9.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv10.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv10.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    }
                    break;
                case 11:
                    if (11 <= cantidadmes)
                    {
                        #region mes11
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
 saldosI = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv11.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv10.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv10.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv11.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv11.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                           
                        }
                        #endregion
                    }
                    break;
                case 12:
                    if (12 <= cantidadmes)
                    {
                        #region mes12
                        if (solototal == true)
                        {
                            x = 0;
                        }
                        else
                        {
                            x = 1;
                        }
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            this.Invoke(new Action(() =>
                            {
saldosI = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString());
                            saldosF = double.Parse(dgv12.Rows[x].Cells[10].Value.ToString());
                            ventas = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString());
                            if (ventas != 0 && (saldosI + saldosF) != 0)
                            {
                                rotacionM = ventas / ((saldosI + saldosF) / 2);
                                rotacionA = rotacionM + double.Parse(dgv11.Rows[x].Cells[14].Value.ToString());
                            }
                            else
                            {
                                rotacionM = 0;
                                rotacionA = rotacionM + double.Parse(dgv11.Rows[x].Cells[14].Value.ToString());
                            }
                            dgv12.Rows[x].Cells[13].Value = rotacionM.ToString("n6");
                            dgv12.Rows[x].Cells[14].Value = rotacionA.ToString("n6");
                            }));
                            
                        }
                        #endregion
                    }
                    break;
            }
        }

        public void update(int año, int mes, int grid, int renglon)
        {
            double c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
            switch (grid)
            {
                case 1:
                    #region insertar mes1
                    c1 = double.Parse(dgv1.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv1.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv1.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv1.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv1.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv1.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv1.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv1.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv1.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv1.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv1.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv1.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv1.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv1.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv1.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    string q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 2:
                    #region insertar mes1
                    c1 = double.Parse(dgv2.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv2.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv2.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv2.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv2.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv2.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv2.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv2.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv2.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv2.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv2.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv2.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv2.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv2.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv2.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 3:
                    #region insertar mes1
                    c1 = double.Parse(dgv3.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv3.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv3.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv3.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv3.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv3.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv3.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv3.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv3.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv3.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv3.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv3.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv3.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv3.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv3.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 4:
                    #region insertar mes1
                    c1 = double.Parse(dgv4.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv4.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv4.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv4.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv4.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv4.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv4.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv4.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv4.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv4.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv4.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv4.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv4.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv4.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv4.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 5:
                    #region insertar mes1
                    c1 = double.Parse(dgv5.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv5.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv5.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv5.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv5.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv5.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv5.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv5.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv5.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv5.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv5.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv5.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv5.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv5.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv5.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 6:
                    #region insertar mes1
                    c1 = double.Parse(dgv6.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv6.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv6.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv6.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv6.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv6.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv6.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv6.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv6.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv6.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv6.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv6.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv6.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv6.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv6.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 7:
                    #region insertar mes1
                    c1 = double.Parse(dgv7.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv7.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv7.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv7.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv7.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv7.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv7.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv7.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv7.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv7.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv7.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv7.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv7.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv7.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv7.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 8:
                    #region insertar mes1
                    c1 = double.Parse(dgv8.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv8.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv8.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv8.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv8.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv8.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv8.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv8.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv8.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv8.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv8.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv8.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv8.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv8.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv8.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 9:
                    #region insertar mes1
                    c1 = double.Parse(dgv9.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv9.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv9.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv9.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv9.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv9.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv9.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv9.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv9.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv9.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv9.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv9.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv9.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv9.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv9.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 10:
                    #region insertar mes1
                    c1 = double.Parse(dgv10.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv10.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv10.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv10.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv10.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv10.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv10.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv10.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv10.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv10.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv10.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv10.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv10.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv10.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv10.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 11:
                    #region insertar mes1
                    c1 = double.Parse(dgv11.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv11.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv11.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv11.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv11.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv11.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv11.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv11.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv11.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv11.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv11.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv11.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv11.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv11.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv11.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 12:
                    #region insertar mes1
                    c1 = double.Parse(dgv12.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv12.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv12.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv12.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv12.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv12.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv12.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv12.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv12.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv12.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv12.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv12.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv12.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv12.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv12.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c3.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ", rotacionM=" + c13.ToString() + ", rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " " + querycargar[(renglon - 1)];
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
            }
        }

        public void updateT(int año, int mes, int grid, int renglon)
        {
            double c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

            switch (grid)
            {
                case 1:
                    #region insertar mes1
                    c1 = double.Parse(dgv1.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv1.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv1.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv1.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv1.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv1.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv1.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv1.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv1.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv1.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv1.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv1.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv1.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv1.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv1.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    string q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 2:
                    #region insertar mes2
                    c1 = double.Parse(dgv2.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv2.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv2.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv2.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv2.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv2.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv2.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv2.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv2.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv2.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv2.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv2.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv2.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv2.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv2.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 3:
                    #region insertar mes3
                    c1 = double.Parse(dgv3.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv3.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv3.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv3.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv3.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv3.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv3.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv3.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv3.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv3.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv3.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv3.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv3.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv3.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv3.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 4:
                    #region insertar mes4
                    c1 = double.Parse(dgv4.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv4.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv4.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv4.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv4.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv4.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv4.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv4.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv4.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv4.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv4.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv4.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv4.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv4.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv4.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);

                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 5:
                    #region insertar mes5
                    c1 = double.Parse(dgv5.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv5.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv5.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv5.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv5.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv5.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv5.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv5.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv5.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv5.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv5.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv5.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv5.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv5.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv5.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 6:
                    #region insertar mes6
                    c1 = double.Parse(dgv6.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv6.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv6.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv6.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv6.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv6.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv6.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv6.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv6.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv6.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv6.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv6.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv6.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv6.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv6.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 7:
                    #region insertar mes7
                    c1 = double.Parse(dgv7.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv7.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv7.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv7.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv7.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv7.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv7.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv7.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv7.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv7.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv7.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv7.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv7.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv7.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv7.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 8:
                    #region insertar mes8
                    c1 = double.Parse(dgv8.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv8.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv8.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv8.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv8.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv8.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv8.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv8.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv8.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv8.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv8.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv8.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv8.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv8.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv8.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 9:
                    #region insertar mes9
                    c1 = double.Parse(dgv9.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv9.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv9.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv9.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv9.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv9.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv9.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv9.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv9.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv9.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv9.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv9.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv9.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv9.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv9.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 10:
                    #region insertar mes10
                    c1 = double.Parse(dgv10.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv10.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv10.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv10.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv10.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv10.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv10.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv10.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv10.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv10.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv10.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv10.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv10.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv10.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv10.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 11:
                    #region insertar mes11
                    c1 = double.Parse(dgv11.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv11.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv11.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv11.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv11.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv11.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv11.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv11.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv11.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv11.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv11.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv11.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv11.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv11.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv11.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
                case 12:
                    #region insertar mes12
                    c1 = double.Parse(dgv12.Rows[renglon].Cells[1].Value.ToString(), NumberStyles.Currency);
                    c2 = double.Parse(dgv12.Rows[renglon].Cells[2].Value.ToString(), NumberStyles.Currency);
                    c3 = double.Parse(dgv12.Rows[renglon].Cells[3].Value.ToString(), NumberStyles.Currency);
                    c4 = double.Parse(dgv12.Rows[renglon].Cells[4].Value.ToString(), NumberStyles.Currency);
                    c5 = double.Parse(dgv12.Rows[renglon].Cells[5].Value.ToString(), NumberStyles.Currency);
                    c6 = double.Parse(dgv12.Rows[renglon].Cells[6].Value.ToString(), NumberStyles.Currency);
                    c7 = double.Parse(dgv12.Rows[renglon].Cells[7].Value.ToString(), NumberStyles.Currency);
                    c8 = double.Parse(dgv12.Rows[renglon].Cells[8].Value.ToString(), NumberStyles.Currency);
                    c9 = double.Parse(dgv12.Rows[renglon].Cells[9].Value.ToString(), NumberStyles.Currency);
                    c10 = double.Parse(dgv12.Rows[renglon].Cells[10].Value.ToString(), NumberStyles.Currency);
                    c11 = double.Parse(dgv12.Rows[renglon].Cells[11].Value.ToString(), NumberStyles.Currency);
                    c12 = double.Parse(dgv12.Rows[renglon].Cells[12].Value.ToString(), NumberStyles.Currency);
                    c13 = double.Parse(dgv12.Rows[renglon].Cells[13].Value.ToString(), NumberStyles.Currency);
                    c14 = double.Parse(dgv12.Rows[renglon].Cells[14].Value.ToString(), NumberStyles.Currency);
                    c15 = double.Parse(dgv12.Rows[renglon].Cells[15].Value.ToString(), NumberStyles.Currency);
                    q = "update cedula3 set SIunidades=" + c1.ToString() + ",SIimporte=" + c2.ToString() + ",CostoNeto=" + c13.ToString() + ",plazopago=" + c4.ToString() + ",unidadesrecibo=" + c5.ToString() + ",importerecibo=" + c6.ToString() + ",VentasUnidades=" + c7.ToString() + ",preciounitario=" + c8.ToString() + ",Ventasimporte=" + c9.ToString() + ",SFunidades=" + c10.ToString() + ",SFimportes=" + c11.ToString() + ",rotacion=" + c12.ToString() + ",DiasInventario=" + c15.ToString() + ",rotacionM=" + c13.ToString() + ",rotacionA=" + c14.ToString() + " where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes + " and anio=" + año + " and ZapateriasTorreon=1";
                    cmd = new MySqlCommand(q, Conn);
                    cmd.ExecuteNonQuery();
                    #endregion
                    break;
            }
        }

        private void bgw_DoWork(object sender, DoWorkEventArgs e) // proceso normal
        {
            this.Invoke(new Action(() =>
            {
                waitingbar.Visible = true;
                waitingbar.StartWaiting();
            }));
            if (refresh == true)
            {
                m_DIASMESESANOS_Refresh(CED1_fechaI, CED1_fechaF);
            }
            else
            {
                m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);

            }
            refresh = false;

            if ((bgw_DMAnormal.CancellationPending == true))
            {
                e.Cancel = true;
                return;
            }
        }

        private void bgw_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            //System.Threading.Thread.Sleep(1000);
            waitingbar.Visible = false;
            waitingbar.StopWaiting();
        }

        private void btnCancelar_Click(object sender, EventArgs e)
        {
            if (bgw_DMAnormal.WorkerSupportsCancellation == true)
            {
                // Cancel the asynchronous operation.
                bgw_DMAnormal.CancelAsync();
            }
        }

        private void btnGuardar_Click(object sender, EventArgs e)
        {
            if (solototal == true)
            {
                m_DIASMESESANOS_guardarT(CED1_fechaI, CED1_fechaF);
            }
            else
            {
                m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
            }
            MessageBox.Show("Guardado");
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            refresh = true;
            if (dgv1.Rows.Count == 1)
            {
                #region banderas
                bandera_sucursal = false;
                bandera_division = false;
                bandera_depto = false;
                bandera_familia = false;
                bandera_linea = false;
                bandera_l1 = false;
                bandera_l2 = false;
                bandera_l3 = false;
                bandera_l4 = false;
                bandera_l5 = false;
                bandera_l6 = false;
                bandera_marca = false;
                seleccion_sucursal = -1;
                seleccion_division = -1;
                seleccion_depto = -1;
                seleccion_familia = -1;
                seleccion_linea = -1;
                seleccion_l1 = -1;
                seleccion_l2 = -1;
                seleccion_l3 = -1;
                seleccion_l4 = -1;
                seleccion_l5 = -1;
                seleccion_l6 = -1;
                seleccion_marca = "";
                s = ",-1"; d = ",-1"; dd = ",-1"; f = ",-1"; l = ",-1"; l1 = ",-1"; l2 = ",-1"; l3 = ",-1"; l4 = ",-1"; l5 = ",-1"; l6 = ",-1"; m = ",'-1'";
                #endregion
                solototal = true;
                m_CLEAR_DGV();
                m_ADD_ROWS_DGV();
                m_PASS_VALUES_DGV("Total", 0);
                dgv1.Rows[0].Cells[0].Value = "Total";
                //m_DIASMESESANOS_total_Refresh(CED1_fechaI, CED1_fechaF);
                queryunidadesAsignadas = "SELECT * FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' AND ZapateriasTorreon=1";
                //m_calcularTotalPeriodo();
                bgw_DMAtotal.RunWorkerAsync();
            }
            else
            {
                bgw_DMAnormal.RunWorkerAsync();
                //m_DIASMESESANOS_Refresh(CED1_fechaI, CED1_fechaF);
            }
        }

        private void btnsimular_Click(object sender, EventArgs e)
        {
            //m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
            //m_calcularRenglonTotal();
            //m_calcularTotalPeriodo();
            //bgw.RunWorkerAsync();
            ////m_calcularTotalPeriodo();
            if (bgw_DMAnormal.IsBusy == false)
            {
                bgw_DMAnormal.RunWorkerAsync();

            }
            else
            {
                if (bgw_DMAnormal.IsBusy == true && bgw_DMAnormal.WorkerSupportsCancellation == true)
                {
                    bgw_DMAnormal.CancelAsync();
                } 
                //bgw_DMAnormal.CancelAsync();
                //bgw_DMAnormal.Dispose();
            }

        }

        private void button2_Click(object sender, EventArgs e)
        {
            //Cedula1 c1 = new Cedula1();
            //c1.Show(); this.Close();
            if (bandera_sucursal == true)
            {

                Cedula1 c1 = new Cedula1(seleccion_sucursal, seleccion_division, seleccion_depto, seleccion_familia, seleccion_linea, seleccion_l1, seleccion_l2, seleccion_l3, seleccion_l4, seleccion_l5, seleccion_l6, seleccion_marca);
                this.Hide();
                c1.ShowDialog();
                this.Close();
            }
            else
            {
                Cedula1 c1 = new Cedula1();
                this.Hide();
                c1.ShowDialog();
                this.Close();
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            //pablo
            if (bandera_sucursal == true)
            {
                //Cedula3 c3 = new Cedula3(bandera_sucursal, seleccion_sucursal, bandera_division, seleccion_division, bandera_depto, seleccion_depto, bandera_familia, seleccion_familia, bandera_linea, seleccion_linea, bandera_l1, seleccion_l1, bandera_l2, seleccion_l2, bandera_l3, seleccion_l3, bandera_l4, seleccion_l4, bandera_l5, seleccion_l5, bandera_l6, seleccion_l6, bandera_marca, seleccion_marca);
                Cedula3 c3 = new Cedula3();
                this.Hide();
                c3.ShowDialog();
                this.Close();
            }
            else
            {
                Cedula3 c3 = new Cedula3();
                this.Hide();
                c3.ShowDialog();
                this.Close();
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            cedula4 c4 = new cedula4();
            this.Hide();
            c4.ShowDialog();
            this.Close();
        }

        private void button6_Click(object sender, EventArgs e)
        {
            if (bandera_sucursal == true)
            {

                cedula5 c5 = new cedula5(seleccion_sucursal, seleccion_division, seleccion_depto, seleccion_familia, seleccion_linea, seleccion_l1, seleccion_l2, seleccion_l3, seleccion_l4, seleccion_l5, seleccion_l6, seleccion_marca);
                c5.Show(); this.Close();
            }
            else
            {
                cedula5 c5 = new cedula5();
                c5.Show();
                this.Close();
            }
        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (bandera_sucursal == true)
            {

                cedula6 c6 = new cedula6(seleccion_sucursal, seleccion_division, seleccion_depto, seleccion_familia, seleccion_linea, seleccion_l1, seleccion_l2, seleccion_l3, seleccion_l4, seleccion_l5, seleccion_l6, seleccion_marca);
                this.Hide();
                c6.ShowDialog();
                this.Close();
            }
            else
            {
                cedula6 c6 = new cedula6();
                this.Hide();
                c6.ShowDialog();
                this.Close();
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            //pablo
            if (bandera_sucursal == true)
            {
                Cedula7 c7 = new Cedula7(bandera_sucursal, seleccion_sucursal, bandera_division, seleccion_division, bandera_depto, seleccion_depto, bandera_familia, seleccion_familia, bandera_linea, seleccion_linea, bandera_l1, seleccion_l1, bandera_l2, seleccion_l2, bandera_l3, seleccion_l3, bandera_l4, seleccion_l4, bandera_l5, seleccion_l5, bandera_l6, seleccion_l6, bandera_marca, seleccion_marca);
                this.Hide();
                c7.ShowDialog();
                this.Close();
            }
            else
            {
                Cedula7 c7 = new Cedula7();
                this.Hide();
                c7.ShowDialog();
                this.Close();
            }
        }

        private void button9_Click(object sender, EventArgs e)
        {

            Cedula8 c8 = new Cedula8();
            this.Hide();
            c8.ShowDialog();
            this.Close();
        }
        #endregion
      
        #region combos

        private void cbDepto_DropDown(object sender, EventArgs e)
        {
            cbDepto.Items.Clear();
            cbDepto.Items.Add("Total");
            string[] texto = iddivision.Split('.');
            int i = 1;
            query = "SELECT descrip,iddepto from estdepartamento where visiblebp='1' and iddivisiones=1";
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    iddeptovarios = "and (e.iddepto= " + reader["iddepto"].ToString();
                }
                else
                {
                    iddeptovarios += " or e.iddepto=" + reader["iddepto"].ToString();
                }
                cbDepto.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["iddepto"].ToString();
                i++;
            }
            reader.Close();
            iddeptovarios += ")";
        }

        private void cbDepto_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_depto = true;
            #region banderas
            bandera_familia = false;
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_familia = -1;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (cbDepto.Text != "Total")
            {
                seleccion_depto = Convert.ToInt32(idd[cbDepto.SelectedIndex]);

                iddepto = "and V.iddepto=" + idd[cbDepto.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddepto;
                iddeptovarios = iddepto;
                total = false;
                string[] texto = cbDepto.Text.Split('=');
                lbdepartamento.Text = "Departamento=" + texto[0];
                query = "SELECT descrip,iddepto from estdepartamento where visiblebp='1' and iddepto=" + idd[cbDepto.SelectedIndex];
                depto = "and iddepto=" + idd[cbDepto.SelectedIndex];
                queryguardar[0] = s + " " + d + "," + idd[cbDepto.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                dd = "," + idd[cbDepto.SelectedIndex];
                querycargar[0] = sucursalcargar + " " + divisioncargar + " and iddepto=" + idd[cbDepto.SelectedIndex] + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                queryplazo[0] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddepto;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddepto;
                departamentocargar = "and iddepto=" + idd[cbDepto.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "iddepto";
                where = "  e.iddivisiones=1 " + iddepto;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "iddepto";
                where = " e.iddivisiones=1";
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " and iddepto=-1";
                iddepto = " ";
                iddeptovarios = " ";
                for (int i = 0; i <= cbDepto.Items.Count - 1; i++)
                {
                    iddepto = "and V.iddepto=" + idd[(i + 1)];

                    if (cbSucursales.Text == "" && cbDivisiones.Text == "")
                    {
                        wherequery[i] = iddepto + " and v.iddivisiones=1";
                        queryguardar[i] = ",-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=" + idd[(i + 1)] + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        queryplazo[i] = "Where V.iddivisiones=1 " + iddepto;
                        queryExist[i] = " and v.iddivisiones=1 " + iddepto;
                    }
                    else
                    {
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " and iddepto=" + idd[(i + 1)] + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + " " + iddepto;
                        queryguardar[i] = s + " " + d + " ," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                        queryplazo[i] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddepto;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddepto;
                    }
                }
                total = true;
                lbdepartamento.Text = "Departamento=Total";
                depto = " ";
                dd = ",0";
                departamentocargar = "and iddepto=0";
                seleccion_depto = 0;
            }
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbDivision_DropDown(object sender, EventArgs e)
        {
            //int i = 0;
            int i = 1;
            cbDivisiones.Items.Clear();
            cbDivisiones.Items.Add("Total");
            query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1' " + solocalzadoDropdown;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                cbDivisiones.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["iddivisiones"].ToString();
                i++;
            }
            reader.Close();
        }

        private void cbDivision_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_division = true;
            #region banderas
            bandera_depto = false;
            bandera_familia = false;
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_depto = -1;
            seleccion_familia = -1;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbdepartamento.Text = "Departamento";
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            iddivision = " ";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            d = ",-1"; dd = ",-1"; f = ",-1"; l = ",-1"; l1 = ",-1"; l2 = ",-1"; l3 = ",-1"; l4 = ",-1"; l5 = ",-1"; l6 = ",-1"; m = ",'-1'";
            #endregion

            if (cbDivisiones.Text != "Total")
            {
                seleccion_division = Convert.ToInt32(idd[cbDivisiones.SelectedIndex]);

                iddivision = "and V.iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                total = false;
                string[] texto = cbDivisiones.Text.Split('=');
                lbDivision.Text = "Division=" + texto[0];
                query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1' and iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivision;
                iddivisionesvarios = iddivision;
                division = "and iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                queryguardar[0] = s + "," + idd[cbDivisiones.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                querycargar[0] = sucursalcargar + " and iddivisiones=" + idd[cbDivisiones.SelectedIndex] + " and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                d = "," + idd[cbDivisiones.SelectedIndex];
                queryplazo[0] = "Where V.iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivision;
                divisioncargar = "and iddivisiones=" + idd[cbDivisiones.SelectedIndex] + "";
                if (solocalzadoDropdown != " ")
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " and iddivisiones=-1";
                }
                else
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                }
                groupby = "iddivisiones";
                where = "  e.iddivisiones=1";
                whereLeft = idsucursalvarios;
                iddivisionesvarios="e.iddivisiones=1";
            }
            else
            {
                groupby = "iddivisiones";
                where = "  e.iddivisiones=1";
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar;
                iddivision = " ";
                iddivisionesvarios = " e.iddivisiones=1 ";
                division = " ";
                for (int i = 0; i <= cbDivisiones.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " and iddivisiones=" + idd[(i + 1)] + " and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    iddivision = "and V.iddivisiones=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivision;
                    queryguardar[i] = s + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                    queryplazo[i] = "Where V.iddivisiones=" + idd[(i + 1)];
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivision;
                }
                lbDivision.Text = "Division=Total";
                total = true;
                //query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1'";
                d = ",0";
                divisioncargar = "and iddivisiones=0";
                seleccion_division = 0;
                if (solocalzadoDropdown != " and iddivisiones=1")
                {
                    query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1'";

                }
                else
                {
                    query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1' and iddivisiones=1";

                }
            }
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbFamilia_DropDown(object sender, EventArgs e)
        {
            #region reiniciar V
            fam = "";
            linea = "";
            subl1 = "";
            subl2 = "";
            subl3 = "";
            subl4 = "";
            subl5 = "";
            subl6 = "";
            #endregion
            if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "")
            {
                cbFamilia.Items.Clear();
                cbFamilia.Items.Add("Total");
                int i = 1;
                query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1'  and iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    cbFamilia.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idfamilia"].ToString();
                    i++;
                }
                reader.Close();
            }
            else
            {
                cbFamilia.Items.Clear();
                cbFamilia.Items.Add("Total");
                int i = 1;
                query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1' " + division + " " + depto + "";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idfamiliavarios = "and (e.idfamilia= " + reader["idfamilia"].ToString();
                    }
                    else
                    {
                        idfamiliavarios += " or e.idfamilia=" + reader["idfamilia"].ToString();
                    }
                    cbFamilia.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idfamilia"].ToString();
                    i++;
                }
                reader.Close();
                idfamiliavarios += ")";
            }
        }

        private void cbFamilia_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_familia = true; 
            #region banderas
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (cbFamilia.Text != "Total")
            {
                seleccion_familia = Convert.ToInt32(idd[cbFamilia.SelectedIndex]);

                idfamilia = "and V.idfamilia=" + idd[cbFamilia.SelectedIndex];
                idfamiliavarios = idfamilia;
                total = false;
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                string[] texto = cbFamilia.Text.Split('=');
                lbfamilia.Text = "Familia=" + texto[0].ToString();
                query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1' and idfamilia=" + idd[cbFamilia.SelectedIndex] + "";
                fam = "and idfamilia=" + idd[cbFamilia.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + "," + idd[cbFamilia.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,'-1'";
                f = "," + idd[cbFamilia.SelectedIndex];
                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=" + idd[cbFamilia.SelectedIndex] + " and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                queryplazo[0] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamilia;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                familiacargar = "and idfamilia=" + idd[cbFamilia.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idfamilia";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                whereLeft = idsucursalvarios;
            }
            else
            {
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + " and idfamilia=-1";
                idfamiliavarios = " ";
                for (int i = 0; i <= cbFamilia.Items.Count - 1; i++)
                {


                    if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "")
                    {
                        idfamilia = "and V.idfamilia=" + idd[(i + 1)];

                        queryplazo[i] = "Where V.iddivisiones=1  " + idfamilia;
                        queryExist[i] = " and v.iddivisiones=1 " + idfamilia;
                        wherequery[i] = idfamilia + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=" + idd[(i + 1)] + " and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1'  and iddivisiones=1";

                    }
                    else
                    {
                        idfamilia = "and V.idfamilia=" + idd[(i + 1)];
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                        queryguardar[i] = s + " " + d + " " + dd + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=" + idd[(i + 1)] + " and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryplazo[i] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamilia;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                        query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1' " + division + " " + depto;
                        groupby = "idfamilia";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios;
                        whereLeft = idsucursalvarios;
                    }
                }
                total = true;
                lbfamilia.Text = "Familia=Total";
                fam = " ";
                f = ",0";
                familiacargar = "and idfamilia=0";
                seleccion_familia = 0;
            }
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbL1_DropDown(object sender, EventArgs e)
        {
            #region reiniciar V

            subl1 = "";
            subl2 = "";
            subl3 = "";
            subl4 = "";
            subl5 = "";
            subl6 = "";
            #endregion
            if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "" && cbFamilia.Text == "" && cbLinea.Text == "")
            {
                cbL1.Items.Clear();
                cbL1.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idl1 from estl1 where visiblebp='1' and iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idl1varios = "and (e.idl1= " + reader["idl1"].ToString();
                    }
                    else
                    {
                        idl1varios += " or e.idl1=" + reader["idl1"].ToString();
                    }
                    cbL1.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idl1"].ToString();
                    i++;
                }
                idl1varios += ")";
                reader.Close();
            }
            else
            {
                cbL1.Items.Clear();
                cbL1.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idl1 from estl1 where visiblebp='1'" + division + " " + depto + " " + fam + " " + linea;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idl1varios = "and (e.idl1= " + reader["idl1"].ToString();
                    }
                    else
                    {
                        idl1varios += " or e.idl1=" + reader["idl1"].ToString();
                    }
                    cbL1.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idl1"].ToString();
                    i++;
                }
                idl1varios += ")";
                reader.Close();
            }
            if (cbL1.Items.Count == 1)
            {
                cbL1.Items.Clear();
            }
        }

        private void cbL1_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_l1 = true;  
            #region banderas
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (cbL1.Text != "Total")
            {
                seleccion_l1 = int.Parse(idd[cbL1.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " and idl1=" + idd[cbL1.SelectedIndex] + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl1 = "and V.idl1=" + idd[cbL1.SelectedIndex];
                idl1varios = idl1;
                string[] texto = cbL1.Text.Split('=');
                total = false;
                lbl1.Text = "L1=" + texto[0].ToString();
                query = "SELECT descrip,idl1 from estl1 where visiblebp='1' and idl1=" + idd[cbL1.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                subl1 = "and idl1=" + idd[cbL1.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + "," + idd[cbL1.SelectedIndex] + ",-1,-1,-1,-1,-1,'-1'";
                l1 = "," + idd[cbL1.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                l1cargar = "and idl1=" + idd[cbL1.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl1";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl1";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " and idl1=-1";
                for (int i = 0; i <= cbL1.Items.Count - 1; i++)
                {

                    if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "" && cbFamilia.Text == "" && cbLinea.Text == "")
                    {
                        idl1 = "and V.idl1=" + idd[(i + 1)];

                        queryplazo[i] = " where V.iddivisiones=1" + idl1;
                        queryExist[i] = " and v.iddivisiones=1 " + idl1;
                        wherequery[i] = idl1 + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1,-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=" + idd[(i + 1)] + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT descrip,idl1 from estl1 where visiblebp='1' and iddivisiones=1";
                    }
                    else
                    {
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " and idl1=" + idd[(i + 1)] + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        idl1 = "and V.idl1=" + idd[(i + 1)];
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                        queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,'-1'";
                        queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                        query = "SELECT descrip,idl1 from estl1 where visiblebp='1' " + division + " " + depto + " " + fam + " " + linea;

                    }
                }
                subl1 = " ";
                lbl1.Text = "L1=Total";
                total = true;
                l = ",0";
                l1cargar = "and idl1=0";
                seleccion_l1 = 0;
            }
            lbl1.Text = "L1=" + cbL1.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbL2_DropDown(object sender, EventArgs e)
        {
            cbL2.Items.Clear();
            cbL2.Items.Add("Total");
            int i = 1;

            query = "SELECT descrip,idl2 from estl2 where visiblebp='1' " + division + " " + depto + " " + fam + " " + linea + " " + subl1;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl2varios = "and (e.idl2= " + reader["idl2"].ToString();
                }
                else
                {
                    idl2varios += " or e.idl2=" + reader["idl2"].ToString();
                }
                cbL2.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl2"].ToString();
                i++;
            }
            idl2varios += ")";
            reader.Close();
            if (cbL2.Items.Count == 1)
            {
                cbL2.Items.Clear();
            }
        }

        private void cbL2_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_l2 = true; 
            #region banderas
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (cbL2.Text != "Total")
            {
                seleccion_l2 = int.Parse(idd[cbL2.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=" + idd[cbL2.SelectedIndex] + " and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl2 = "and V.idl2=" + idd[cbL2.SelectedIndex];
                idl2varios = idl2;
                total = false;
                query = "SELECT descrip,idl2 from estl2 where visiblebp='1' and idl2=" + idd[cbL2.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                subl2 = "and idl2=" + idd[cbL2.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + "," + idd[cbL2.SelectedIndex] + ",-1,-1,-1,-1,'-1'";
                l2 = "," + idd[cbL2.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                l2cargar = "and idl2=" + idd[cbL2.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl2";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios;
                whereLeft = idsucursalvarios;

            }
            else
            {
                groupby = "idl2";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1";
                idl2varios = " ";
                subl2 = " ";
                for (int i = 0; i <= cbL2.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=" + idd[(i + 1)] + " and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idl2 = "and V.idl2=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " ," + idd[(i + 1)] + ",-1,-1,-1,-1,'-1'";
                    queryplazo[i] = "where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;

                }
                l2 = ",0";
                l2cargar = "and idl2=0";
                total = true;
                query = "SELECT descrip,idl2 from estl2 where visiblebp='1' " + division + " " + depto + " " + fam + " " + linea + " " + subl1;
                seleccion_l2 = 0;
            }
            lbL2.Text = "L2=" + cbL2.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbL3_DropDown(object sender, EventArgs e)
        {
            cbL3.Items.Clear();
            cbL3.Items.Add("Total");
            int i = 1;

            query = "SELECT descrip,idl3 from estl3 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl3varios = "and (e.idl3= " + reader["idl3"].ToString();
                }
                else
                {
                    idl3varios += " or e.idl3=" + reader["idl3"].ToString();
                }
                cbL3.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl3"].ToString();
                i++;
            }
            idl3varios += ")";
            reader.Close();
            if (cbL3.Items.Count == 1)
            {
                cbL3.Items.Clear();
            }
        }

        private void cbL3_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_l3 = true;
            #region banderas
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (cbL3.Text != "Total")
            {
                seleccion_l3 = int.Parse(idd[cbL3.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " and idl3=" + idd[cbL3.SelectedIndex] + " and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl3 = "and V.idl3=" + idd[cbL3.SelectedIndex];
                idl3varios = idl3;
                total = false;
                query = "SELECT descrip,idl3 from estl3 where visiblebp='1' and idl3=" + idd[cbL3.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                subl3 = "and idl3=" + idd[cbL3.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + "," + idd[cbL3.SelectedIndex] + ",-1,-1,-1,'-1'";
                l3 = "," + idd[cbL3.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                l3cargar = "and idl3=" + idd[cbL3.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl3";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl3";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " and idl3=-1";
                idl3varios = " ";
                subl3 = " ";
                for (int i = 0; i <= cbL3.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " and idl3=" + idd[(i + 1)] + " and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idl3 = "and V.idl3=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + "," + idd[(i + 1)] + ",-1,-1,-1,'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                    seleccion_l3 = 0;
                }
                total = true;
                query = "SELECT descrip,idl3 from estl3 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2;
                l3 = ",0";
                l3cargar = "and idl3=0";
            }
            lbL3.Text = "L3=" + cbL3.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbL4_DropDown(object sender, EventArgs e)
        {
            cbL4.Items.Clear();
            cbL4.Items.Add("Total");
            int i = 1;

            query = "SELECT descrip,idl4 from estl4 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl4varios = "and (e.idl4= " + reader["idl4"].ToString();
                }
                else
                {
                    idl4varios += " or e.idl4=" + reader["idl4"].ToString();
                }
                cbL4.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl4"].ToString();
                i++;
            }
            reader.Close();
            idl4varios += ")";
            if (cbL4.Items.Count == 1)
            {
                cbL4.Items.Clear();
            }
        }

        private void cbL4_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_l4 = true; 
            #region banderas
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (cbL4.Text != "Total")
            {
                seleccion_l4 = int.Parse(idd[cbL4.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " and idl4=" + idd[cbL4.SelectedIndex] + " and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl4 = "and V.idl4=" + idd[cbL4.SelectedIndex];
                idl4varios = idl4;
                total = false;
                query = "SELECT descrip,idl4 from estl4 where visiblebp='1' and idl4=" + idd[cbL4.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                subl4 = "and idl4=" + idd[cbL4.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + "," + idd[cbL4.SelectedIndex] + ",-1,-1,'-1'";
                l4 = "," + idd[cbL4.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                l4cargar = "and idl4=" + idd[cbL4.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl4";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl4";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=-1";
                idl4varios = " ";
                subl4 = " ";
                for (int i = 0; i <= cbL4.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " and idl4=" + idd[(i + 1)] + " and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idl4 = "and V.idl4=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + "," + idd[(i + 1)] + ",-1,-1,'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                }
                total = true;
                query = "SELECT descrip,idl4 from estl4 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3;
                l4 = ",0";
                l4cargar = "and idl4=0";
                seleccion_l4 = 0;
            }
            lbL4.Text = "L4=" + cbL4.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbL5_DropDown(object sender, EventArgs e)
        {
            cbL5.Items.Clear();
            cbL5.Items.Add("Total");
            int i = 1;

            query = "SELECT descrip,idl5 from estl5 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl5varios = "and (e.idl5= " + reader["idl5"].ToString();
                }
                else
                {
                    idl5varios += " or e.idl5=" + reader["idl5"].ToString();
                }
                cbL5.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl5"].ToString();
                i++;
            }
            idl5varios += ")";
            reader.Close();
            if (cbL5.Items.Count == 1)
            {
                cbL5.Items.Clear();
            }
        }

        private void cbL5_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_l5 = true;
            #region banderas
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (cbL5.Text != "Total")
            {
                seleccion_l5 = int.Parse(idd[cbL5.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=" + idd[cbL5.SelectedIndex] + " and idl6=-1 and marca='-1'  ";
                idl5 = "and V.idl5=" + idd[cbL5.SelectedIndex];
                idl5varios = idl5;
                total = false;
                query = "SELECT descrip,idl5 from estl5 where visiblebp='1' and idl5=" + idd[cbL5.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                subl5 = "and idl5=" + idd[cbL5.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + "," + idd[cbL5.SelectedIndex] + ",-1,'-1'";
                l5 = "," + idd[cbL5.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                l5cargar = "and idl5=" + idd[cbL5.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl5";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl5";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=-1";
                idl5varios = " ";
                subl5 = " ";
                for (int i = 0; i <= cbL5.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=" + idd[(i + 1)] + " and idl6=-1 and marca='-1'  ";
                    idl5 = "and V.idl5=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + "," + idd[(i + 1)] + ",-1,'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                }
                total = true;
                query = "SELECT descrip,idl5 from estl5 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4;
                l5 = ",0";
                l5cargar = "and idl5=0";
                seleccion_l5 = 0;
            }
            lbL5.Text = "L5=" + cbL5.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbL6_DropDown(object sender, EventArgs e)
        {
            cbL6.Items.Clear();
            cbL6.Items.Add("Total");
            int i = 1;

            query = "SELECT descrip,idl6 from estl6 where visiblebp='1'" + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4 + " " + subl5;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl6varios = "and (e.idl6= " + reader["idl6"].ToString();
                }
                else
                {
                    idl6varios += " or e.idl6=" + reader["idl6"].ToString();
                }
                cbL6.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl6"].ToString();
                i++;
            }
            reader.Close();
            idl6varios += ")";
            if (cbL6.Items.Count == 1)
            {
                cbL6.Items.Clear();
            }
        }

        private void cbL6_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_l6 = true;   
            #region banderas
            bandera_marca = false;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl6 = " ";
            marca = " ";
            #endregion

            if (cbL6.Text != "Total")
            {
                seleccion_l6 = int.Parse(idd[cbL6.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " and idl6=" + idd[cbL6.SelectedIndex] + " and marca='-1'  ";
                idl6 = "and V.idl6=" + idd[cbL6.SelectedIndex];
                idl6varios = idl6;
                total = false;
                query = "SELECT descrip,idl6 from estl6 where visiblebp='1' and idl6=" + idd[cbL6.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios;
                subl6 = "and idl6=" + idd[cbL6.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + "," + idd[cbL6.SelectedIndex] + ",'-1'";
                l6 = "," + idd[cbL6.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                l6cargar = "and idl6=" + idd[cbL6.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl6";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl6";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " and idl6=-1";
                subl6 = " ";
                idl6 = " ";
                for (int i = 0; i <= cbL6.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " and idl6=" + idd[(i + 1)] + " and marca='-1'  ";
                    idl6 = "and V.idl6=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + "," + idd[(i + 1)] + ",'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                }
                total = true;
                query = "SELECT descrip,idl6 from estl6 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4 + " " + subl5;
                l6 = ",0";
                l6cargar = "and idl6=0";
                seleccion_l6 = 0;
            }
            lbL6.Text = "L6=" + cbL6.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbLinea_DropDown(object sender, EventArgs e)
        {
            #region reiniciar V
            linea = "";
            subl1 = "";
            subl2 = "";
            subl3 = "";
            subl4 = "";
            subl5 = "";
            subl6 = "";
            #endregion
            if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "" && cbFamilia.Text == "")
            {
                cbLinea.Items.Clear();
                cbLinea.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idlinea from estlinea where visiblebp='1' and iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idlineavarios = "and (e.idlinea= " + reader["idlinea"].ToString();
                    }
                    else
                    {
                        idlineavarios += " or e.idlinea=" + reader["idlinea"].ToString();
                    }
                    cbLinea.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idlinea"].ToString();
                    i++;
                }
                idlineavarios += ")";
            }
            else
            {
                cbLinea.Items.Clear();
                cbLinea.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idlinea from estlinea where visiblebp='1' " + division + " " + depto + "" + " " + fam;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idlineavarios = "and (e.idlinea= " + reader["idlinea"].ToString();
                    }
                    else
                    {
                        idlineavarios += " or e.idlinea=" + reader["idlinea"].ToString();
                    }
                    cbLinea.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idlinea"].ToString();
                    i++;
                }
                reader.Close();
                idlineavarios += ")";
            }
        }

        private void cbLinea_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_linea = true;
            #region banderas
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (cbLinea.Text != "Total")
            {
                seleccion_linea = Convert.ToInt32(idd[cbLinea.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " and idlinea=" + idd[cbLinea.SelectedIndex] + " and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idlinea = "and V.idlinea=" + idd[cbLinea.SelectedIndex];
                idlineavarios = idlinea;
                total = false;
                string[] texto = cbLinea.Text.Split('=');
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                query = "SELECT descrip,idlinea from estlinea where visiblebp='1' and idlinea=" + idd[cbLinea.SelectedIndex] + "";
                linea = "and idlinea=" + idd[cbLinea.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + "," + idd[cbLinea.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,'-1'";
                l = "," + idd[cbLinea.SelectedIndex];
                queryplazo[0] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea; lineacargar = "and idlinea=" + idd[cbLinea.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idlinea";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idlinea";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " and idlinea=-1";
                idlineavarios = " ";
                for (int i = 0; i <= cbLinea.Items.Count - 1; i++)
                {


                    if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "" && cbFamilia.Text == "")
                    {
                        idlinea = "and V.idlinea=" + idd[(i + 1)];
                        wherequery[i] = idlinea + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=" + idd[(i + 1)] + " and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT descrip,idlinea from estlinea where visiblebp='1' and iddivisiones=1";
                        queryplazo[i] = "Where V.iddivisiones=1 " + idlinea;
                        queryExist[i] = " and v.iddivisiones=1 " + idlinea;

                    }
                    else
                    {
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " and idlinea=" + idd[(i + 1)] + " and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        idlinea = "and V.idlinea=" + idd[(i + 1)];
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                        queryguardar[i] = s + "  " + d + " " + dd + " " + f + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,'-1'";
                        queryplazo[i] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                        query = "SELECT descrip,idlinea from estlinea where visiblebp='1' " + division + " " + depto + "" + " " + fam;
                    }
                }
                total = true;
                linea = " ";
                l = ",0";
                lineacargar = "and idlinea=0";
                seleccion_linea = 0;
            }
            lblinea.Text = "Linea=" + cbLinea.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbMarca_DropDown(object sender, EventArgs e)
        {
            if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "" && cbFamilia.Text == "" && cbLinea.Text == "" && cbL1.Text == "" && cbL2.Text == "" && cbL3.Text == "" && cbL4.Text == "" && cbL5.Text == "" && cbL6.Text == "" && cbMarca.Text == "")
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                           {
                               marcavarios = "and (e.marca= '" + reader["marca"].ToString()+"'";
                           }
                           else
                           {
                               marcavarios += " or e.marca='" + reader["marca"].ToString()+"'";
                           }
                           cbMarca.Items.Add(reader["descrip"].ToString());
                           idd[i] = reader["marca"].ToString();
                           i++;
                       }
                       reader.Close();
                total = true;
            }
            if (bandera_l6 == true && bandera_l5 == true)
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1 " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        marcavarios = "and (e.marca='" + reader["marca"].ToString() + "'";
                    }
                    else
                    {
                        marcavarios += " or e.marca='" + reader["marca"].ToString() + "'";
                    }
                    cbMarca.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["marca"].ToString();
                    i++;
                }
                reader.Close();
                total = true;
            }
            if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1" + iddeptovarios;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        marcavarios = "and (e.marca='" + reader["marca"].ToString() + "'";
                    }
                    else
                    {
                        marcavarios += " or e.marca='" + reader["marca"].ToString() + "'";
                    }
                    cbMarca.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["marca"].ToString();
                    i++;
                }
                reader.Close();
                total = true;
            }
            if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_familia == true && bandera_linea == true && bandera_l1 == true && bandera_l2 == false)
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1 " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        marcavarios = "and (e.marca='" + reader["marca"].ToString() + "'";
                    }
                    else
                    {
                        marcavarios += " or e.marca='" + reader["marca"].ToString() + "'";
                    }
                    cbMarca.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["marca"].ToString();
                    i++;
                }
                reader.Close();
                total = true;
            }
            marcavarios += ")";
        }

        private void cbMarca_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = false;
            bandera_marca = true;
            seleccion_marca = cbMarca.SelectedText;
            if (cbMarca.Text == "Total")
            {
                for (int i = 0; i <= cbMarca.Items.Count - 1; i++)
                {
                    marca = " and V.marca='" + idd[(i + 1)] + "'";
                    if (bandera_l6 == true && bandera_l5 == true)
                    {
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios + " " + marca;
                        queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + " " + l6 + ",'" + idd[(i + 1)] + "'";
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='" + idd[(i + 1)] + "'  ";
                        queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marca;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + "  " + "and V.marca='" + idd[(i + 1)] + "'";
                        groupby = "marca";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios + " " + marcavarios;
                        whereLeft = idsucursalvarios;
                    }

                    if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
                    {
                        wherequery[i] = idsucursalvarios + " " + iddeptovarios + " and iddivisiones=1 " + marca;
                        queryguardar[i] = s + " " + d + " " + dd + ",-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[(i + 1)] + "'";

                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[(i + 1)] + "'  ";
                        queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marca;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + "  " + "and V.marca='" + idd[(i + 1)] + "'";
                        groupby = "marca";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + marcavarios;
                        whereLeft = idsucursalvarios;
                    }
                    if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "" && cbFamilia.Text == "" && cbLinea.Text == "" && cbL1.Text == "" && cbL2.Text == "" && cbL3.Text == "" && cbL4.Text == "" && cbL5.Text == "" && cbL6.Text == "")
                    {
                        wherequery[i] = marca + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[(i + 1)] + "'";
                        querycargar[i] = " and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[(i + 1)] + "'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1";
                        queryExist[i] = " and v.iddivisiones=1  " + "and  V.marca='" + idd[(i + 1)] + "'";
                        queryplazo[i] = " where V.iddivisiones= 1 " + marca;
                        groupby = "marca";
                        where = "  e.iddivisiones=1 " + marcavarios;
                        whereLeft = "";
                    }
                    if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_familia == true && bandera_linea == true && bandera_l1 == true && bandera_l2 == false)
                    {
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marca;
                        queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + ",-1,-1,-1,-1,-1, '" + idd[(i + 1)] + "'";
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[(i + 1)] + "'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1 and marca='-1'";
                        // query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1";
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + "  " + "and V.marca='" + idd[(i + 1)] + "'";
                        groupby = "marca";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marcavarios;
                        whereLeft = idsucursalvarios;
                    }

                }

                if (bandera_l6 == true && bandera_l5 == true)
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='-1'";
                }

                if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and iddepto=" + seleccion_depto.ToString() + " and idsucursal=" + seleccion_sucursal.ToString() + " and iddivisiones=" + seleccion_division.ToString() + " and idfamilia=-1";
                }
                seleccion_marca = "0";
                total = true;
            }
            else
            {
                total = false;
                //queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + " " + l6 + ",'" + idd[cbMarca.SelectedIndex] + "'";
                //querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                //query = query + " and M.marca='" + idd[cbMarca.SelectedIndex] + "'";
                //marca = " and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                //// wherequery[0] = idsucursalvarios + marca;
                //wherequery[0] = idsucursalvarios + " " + idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios + " " + marca;
                //total = false;
                //queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6 + " " + marca;
                //queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6 + " " + "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                //queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                if (bandera_l6 == true && bandera_l5 == true)
                {
                    wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios + " " + marca;
                    queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + " " + l6 + ",'" + idd[cbMarca.SelectedIndex] + "'";
                    querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='-1'";
                    queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6 + " " + "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios + " " + marcavarios;
                    whereLeft = idsucursalvarios;
                }
                if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
                {
                    wherequery[0] = idsucursalvarios + " " + iddeptovarios + " and iddivisiones=1 " + marca;
                    queryguardar[0] = s + " " + d + " " + dd + ",-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[cbMarca.SelectedIndex] + "'";

                    querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and iddepto=" + seleccion_depto.ToString() + " and idsucursal=" + seleccion_sucursal.ToString() + " and iddivisiones=" + seleccion_division.ToString() + " and idfamilia=-1 and marca='-1'";
                    queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + marcavarios;
                    whereLeft = idsucursalvarios;
                }
                if (cbSucursales.Text == "" && cbDivisiones.Text == "" && cbDepto.Text == "" && cbFamilia.Text == "" && cbLinea.Text == "" && cbL1.Text == "" && cbL2.Text == "" && cbL3.Text == "" && cbL4.Text == "" && cbL5.Text == "" && cbL6.Text == "")
                {
                    wherequery[0] = marca + " and iddivisiones=1";
                    queryguardar[0] = ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[cbMarca.SelectedIndex] + "'";
                    querycargar[0] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[cbMarca.SelectedIndex];
                    query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1 and m.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    queryExist[0] =  "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = "  e.iddivisiones=1 " + marcavarios;
                    whereLeft = "";
                }
                if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_familia == true && bandera_linea == true && bandera_l1 == true && bandera_l2 == false)
                {
                    wherequery[0] = marca + " and iddivisiones=1";
                    queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + ",-1,-1,-1,-1,-1, '" + idd[cbMarca.SelectedIndex] + "'";
                    querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1  " + querycargar[0];
                    query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1 and m.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marcavarios;
                    whereLeft = idsucursalvarios;
                }
            }
            lbMarca.Text = "Marca=" + cbMarca.Text;
            if (!valoresform)
                M_cargargrid(total);
            solototal = false;
        }

        private void cbSucursales_DropDown(object sender, EventArgs e)
        {

            #region reiniciar valores
            lbsucursal.Text = "Sucursal";
            lbDivision.Text = "Division";
            lbdepartamento.Text = "Departamento";
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idsucursal = " ";
            idsucursal = " ";
            iddivision = " ";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            cbSucursales.Items.Clear();
            cbSucursales.Items.Add("Total");
            int i = 1;
            query = "SELECT descrip,idsucursal from sucursal where visible='S'";
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idsucursalvarios = "and (V.idsucursal= " + reader["idsucursal"].ToString();
                }
                else
                {
                    idsucursalvarios += " or V.idsucursal=" + reader["idsucursal"].ToString();
                }
                this.Invoke(new Action(() =>
                {
                    cbSucursales.Items.Add(reader["descrip"].ToString());
                }));
                idd[i] = reader["idsucursal"].ToString();
                i++;
            }
            idsucursalvarios += ")";
            reader.Close();
        }
        private void cbSucursales_SelectedIndexChanged(object sender, EventArgs e)
        {
            soloSuc = true;
            bandera_sucursal = true; 
            #region banderas
            bandera_division = false;
            bandera_depto = false;
            bandera_familia = false;
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_division = -1;
            seleccion_depto = -1;
            seleccion_familia = -1;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbDivision.Text = "Division";
            lbdepartamento.Text = "Departamento";
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idsucursal = " ";
            iddivision = " ";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            s = ",-1"; d = ",-1"; dd = ",-1"; f = ",-1"; l = ",-1"; l1 = ",-1"; l2 = ",-1"; l3 = ",-1"; l4 = ",-1"; l5 = ",-1"; l6 = ",-1"; m = ",'-1'";
            #endregion
            if (cbSucursales.Text != "Total")
            {
                seleccion_sucursal = Convert.ToInt32(idd[cbSucursales.SelectedIndex]);

                idsucursal = " and V.idsucursal=" + idd[cbSucursales.SelectedIndex];
                wherequery[0] = "and V.idsucursal=" + idd[cbSucursales.SelectedIndex] + " " + solocalzadowhere;
                total = false;
                string[] texto = cbSucursales.Text.Split('=');
                lbsucursal.Text = "Sucursal=" + texto[0];
                query = "SELECT descrip,idsucursal from sucursal where visible='S' and idsucursal=" + idd[cbSucursales.SelectedIndex] + "";
                queryguardar[0] = "," + idd[cbSucursales.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                idsucursalvarios = "and V.idsucursal=" + idd[cbSucursales.SelectedIndex];
                s = "," + idd[cbSucursales.SelectedIndex];
                querycargar[0] = "and idsucursal=" + idd[cbSucursales.SelectedIndex] + " and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'";
                queryplazo[0] = " ";
                queryExist[0] = "and E.idsucursal=" + idd[cbSucursales.SelectedIndex];
                sucursalcargar = "and idsucursal=" + idd[cbSucursales.SelectedIndex] + "";
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "'" + querycargar[0];
                groupby = "idsucursal";
                where = "";
                whereLeft = idsucursal;
            }
            else
            {
                where = "";
                groupby = " idsucursal";
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "select * from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                idsucursalvarios = "and (V.IDSUCURSAL= '01' OR V.IDSUCURSAL='02' OR V.IDSUCURSAL='06' OR V.IDSUCURSAL='08')";
                for (int i = 0; i <= cbSucursales.Items.Count - 1; i++)
                {
                    querycargar[i] = "and idsucursal=" + idd[(i + 1)] + " and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idsucursal = "and V.idsucursal= " + idd[(i + 1)];
                    wherequery[i] = "and V.idsucursal=" + idd[(i + 1)] + " " + solocalzadowhere;
                    queryguardar[i] = "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                    queryplazo[i] = " ";
                    queryExist[i] = "and E.idsucursal=" + idd[(i + 1)];
                }
                lbsucursal.Text = "Sucursal=Total";
                query = "SELECT descrip,idsucursal from sucursal where visible='S'";
                total = true;
                s = ",0";
                sucursalcargar = "and idsucursal=0";
                seleccion_sucursal = 0;
            }
            if (!valoresform)
                M_cargargrid(total); solototal = false;
        }
        #endregion
        private void Cedula2_Load(object sender, EventArgs e)
        {
            Control.CheckForIllegalCrossThreadCalls = false;
            m_ESCENARIO(Properties.Settings.Default.escenario);
            M_pintarcolumnas();
            #region @est@
            ///////////////////////////////
            ///////////////////////////////
            //@est@



            //if (seleccion_sucursal != -1)
            //{
            Aseleccion_sucursal = seleccion_sucursal;
            Aseleccion_division = seleccion_division;
            Aseleccion_depto = seleccion_depto;
            Aseleccion_familia = seleccion_familia;
            Aseleccion_linea = seleccion_linea;
            Aseleccion_l1 = seleccion_l1;
            Aseleccion_l2 = seleccion_l2;
            Aseleccion_l3 = seleccion_l3;
            Aseleccion_l4 = seleccion_l4;
            Aseleccion_l5 = seleccion_l5;
            Aseleccion_l6 = seleccion_l6;
            Aseleccion_marca = seleccion_marca;
            // }


            if (seleccion_sucursal >= 0)
                m_drop_sucursales();

            seleccion_division = Aseleccion_division;
            if (seleccion_division >= 0)
                m_drop_division();

            seleccion_depto = Aseleccion_depto;
            if (seleccion_depto >= 0)
                m_drop_depto();

            seleccion_familia = Aseleccion_familia;
            if (seleccion_familia >= 0)
                m_drop_familia();

            seleccion_linea = Aseleccion_linea;
            if (seleccion_linea >= 0)
                m_drop_linea();

            seleccion_l1 = Aseleccion_l1;
            if (seleccion_l1 >= 0)
                m_drop_l1();

            seleccion_l2 = Aseleccion_l2;
            if (seleccion_l2 >= 0)
                m_drop_l2();

            seleccion_l3 = Aseleccion_l3;
            if (seleccion_l3 >= 0)
                m_drop_l3();

            seleccion_l4 = Aseleccion_l4;
            if (seleccion_l4 >= 0)
                m_drop_l4();

            seleccion_l5 = Aseleccion_l5;
            if (seleccion_l5 >= 0)
                m_drop_l5();

            seleccion_l6 = Aseleccion_l6;
            if (seleccion_l6 >= 0)
                m_drop_l6();

            try
            {
                if (Aseleccion_marca != "")
                    //if (Convert.ToInt32(seleccion_marca) != "0")
                    m_drop_marca();
            }
            catch
            {

                if (seleccion_marca != "")
                    m_drop_marca();
            }


            seleccion_sucursal = Aseleccion_sucursal;
            seleccion_division = Aseleccion_division;
            seleccion_depto = Aseleccion_depto;
            seleccion_familia = Aseleccion_familia;
            seleccion_linea = Aseleccion_linea;
            seleccion_l1 = Aseleccion_l1;
            seleccion_l2 = Aseleccion_l2;
            seleccion_l3 = Aseleccion_l3;
            seleccion_l4 = Aseleccion_l4;
            seleccion_l5 = Aseleccion_l5;
            seleccion_l6 = Aseleccion_l6;
            seleccion_marca = Aseleccion_marca;

            ////////////////////////////////

            ////////////////////////////////

            #region si hay valores cedula anterior 
            if (valoresform == true)
            {
                M_cargargrid(total);
                bgw_DMAnormal.RunWorkerAsync();
                valoresform = false;
            }
            #endregion
            this.Refresh();
            #endregion
            if(generarcedula==true)
            {
                bgw_Generar.RunWorkerAsync();
            }
        }
        private void CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            double importeC = 0, unidadesC = 0;
            double preciopromedio = 0;
            double saldoFinalU = 0;
            double ventaactualU = 0;
            double saldosIniciales = 0;
            double salfinalImporte = 0;
            double rot = 0;
            double venta2 = 0;
            double diasinv = 0;
            int dgv = 0;
            int v = 0;
            #region comprobar cual dgv se modifico
            this.Invoke(new Action(() =>
            {
if (tabcontrol.SelectedIndex == 0 && e.ColumnIndex >= 0 && dgv1.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 1;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (tabcontrol.SelectedIndex == 1 && e.ColumnIndex >= 0 && dgv2.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 2;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv2.Focused == true && e.ColumnIndex >= 0 && dgv2.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 2;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv3.Focused == true && e.ColumnIndex >= 0 && dgv3.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 3;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv4.Focused == true && e.ColumnIndex >= 0 && dgv4.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 4;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv5.Focused == true && e.ColumnIndex >= 0 && dgv5.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 5;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv6.Focused == true && e.ColumnIndex >= 0 && dgv6.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 6;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv7.Focused == true && e.ColumnIndex >= 0 && dgv7.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 7;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv8.Focused == true && e.ColumnIndex >= 0 && dgv8.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 8;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv9.Focused == true && e.ColumnIndex >= 0 && dgv9.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 9;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv10.Focused == true && e.ColumnIndex >= 0 && dgv10.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 10;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv11.Focused == true && e.ColumnIndex >= 0 && dgv11.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 11;
            }
            }));
            this.Invoke(new Action(() =>
            {
if (dgv12.Focused == true && e.ColumnIndex >= 0 && dgv12.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString() != "")
            {
                dgv = 12;
            }
            }));
            #endregion
            switch (dgv)
            {
                case 1: v = 1;
                    #region dgv1
                    int columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
unidadesC = double.Parse(dgv1.Rows[e.RowIndex].Cells[5].Value.ToString());
                            preciopromedio = double.Parse(dgv1.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                            importeC = unidadesC * preciopromedio;
                            
                            //-------------------------------------------------------//

                            dgv1.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));
                            
                           
                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
importeC = double.Parse(dgv1.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                            preciopromedio = double.Parse(dgv1.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                            unidadesC = importeC / preciopromedio;

                            dgv1.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
ventaactualU = double.Parse(dgv1.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    saldosIniciales = double.Parse(dgv1.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                    saldoFinalU = double.Parse(dgv1.Rows[e.RowIndex].Cells[10].Value.ToString());
                    salfinalImporte = saldoFinalU * double.Parse(dgv1.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                    saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                    venta2 = double.Parse(dgv2.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    TimeSpan dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
dgv1.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                    dgv1.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                    dgv1.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                    dgv1.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 2: v = 2;
                    #region dgv2
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv2.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv2.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv2.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv2.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv2.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv2.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv2.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv2.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv2.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv2.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv3.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv2.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv2.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv2.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv2.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 3: v = 3;
                    #region dgv3
                     columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv3.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv3.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv3.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv3.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv3.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv3.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv3.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv3.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv3.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv3.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv4.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv3.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv3.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv3.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv3.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 4: v = 4;
                    #region dgv4
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv4.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv4.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv4.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv4.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv4.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv4.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv4.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv4.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv4.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv4.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv5.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv4.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv4.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv4.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv4.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 5: v = 5;
                    #region dgv5
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv5.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv5.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv5.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv5.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv5.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv5.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv5.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv5.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv5.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv5.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv6.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv5.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv5.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv5.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv5.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 6: v = 6;
                    #region dgv6
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv6.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv6.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv6.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv6.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv6.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv6.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv6.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv6.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv6.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv6.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv7.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv6.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv6.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv6.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv6.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 7: v = 7;
                    #region dgv7
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv7.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv7.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv7.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv7.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv7.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv7.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv7.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv7.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv7.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv7.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv8.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv7.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv7.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv7.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv7.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 8: v = 8;
                    #region dgv8
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv8.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv8.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv8.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv8.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv8.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv8.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv8.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv8.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv8.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv8.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv9.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv8.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv8.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv8.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv8.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 9: v = 9;
                    #region dgv9
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv9.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv9.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv9.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv9.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv9.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv9.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv9.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv9.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv9.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv9.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv10.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv9.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv9.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv9.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv9.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 10: v = 10;
                    #region dgv10
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv10.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv10.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv10.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv10.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv10.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv10.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv10.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv10.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv10.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv10.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv11.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv10.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv10.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv10.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv10.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 11: v = 11;
                    #region dgv11
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv11.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv11.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv11.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv11.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv11.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv11.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv11.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv11.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv11.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv11.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv12.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv11.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv11.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv11.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv11.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
                case 12: v = 12;
                    #region dgv12
                    columnaseleccionada = e.ColumnIndex;
                    switch (columnaseleccionada)
                    {
                        case 5:
                            #region unidades
                            this.Invoke(new Action(() =>
                            {
                                unidadesC = double.Parse(dgv12.Rows[e.RowIndex].Cells[5].Value.ToString());
                                preciopromedio = double.Parse(dgv12.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                importeC = unidadesC * preciopromedio;

                                //-------------------------------------------------------//

                                dgv12.Rows[e.RowIndex].Cells[6].Value = importeC.ToString("C2");
                            }));


                            #endregion
                            break;
                        case 6:
                            #region importe
                            this.Invoke(new Action(() =>
                            {
                                importeC = double.Parse(dgv12.Rows[e.RowIndex].Cells[6].Value.ToString(), NumberStyles.Currency);
                                preciopromedio = double.Parse(dgv12.Rows[e.RowIndex].Cells[3].Value.ToString(), NumberStyles.Currency);
                                unidadesC = importeC / preciopromedio;

                                dgv12.Rows[e.RowIndex].Cells[5].Value = unidadesC.ToString("N0");

                            }));
                            #endregion
                            break;
                    }
                    this.Invoke(new Action(() =>
                    {
                        ventaactualU = double.Parse(dgv12.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIniciales = double.Parse(dgv12.Rows[e.RowIndex].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = double.Parse(dgv12.Rows[e.RowIndex].Cells[10].Value.ToString());
                        salfinalImporte = saldoFinalU * double.Parse(dgv12.Rows[e.RowIndex].Cells[8].Value.ToString(), NumberStyles.Currency);
                        saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                        venta2 = double.Parse(dgv1.Rows[e.RowIndex].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }));
                    rot = (cantidadmes * venta2) / (unidadesC + saldosIniciales - ventaactualU);
                    dias = FechaAF.Subtract(FechaAI);
                    if (rot >= 1)
                    {
                        diasinv = double.Parse(dias.Days.ToString()) / rot;
                    }
                    else
                    {
                        diasinv = 0;
                    }
                    //-------------------------------------------------------//
                    this.Invoke(new Action(() =>
                    {
                        dgv12.Rows[e.RowIndex].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv12.Rows[e.RowIndex].Cells[11].Value = salfinalImporte.ToString("N2");
                        dgv12.Rows[e.RowIndex].Cells[12].Value = rot.ToString("N2");
                        dgv12.Rows[e.RowIndex].Cells[15].Value = diasinv.ToString("N2");
                    }));
                    rotacionesExtra(v);
                    /////////////////////////////////////////
                    #endregion
                    break;
            }
            //m_calcularRenglonTotal(dgv);
            m_limpiardgvTotalperiodo();
            //m_calcularTotalPeriodo(dgv);
            while (v <= cantidadmes)
            {
                m_recalcularCompra(v);
                rotacionesExtra(v);
                //m_calcularRenglonTotal(dgv);
                //m_calcularTotalPeriodo(dgv);
                v++;
            }
            for (int mt = 1; mt <= cantidadmes;mt++ )
            {
                m_calcularRenglonTotal(mt);
                m_calcularTotalPeriodo(mt);
            }
        }

        private void cerrarSesionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Log_in l = new Log_in();
            this.Hide();
            l.ShowDialog();
            this.Close();
        }

        private void cerrarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private bool comprobarCargar(int año, int mes, int i)
        {
            bool comprobar = true;
            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and anio=" + año + " and mes=" + mes + " " + querycargar[0];
            cmd = new MySqlCommand(q, Conn);
            reader = cmd.ExecuteReader();
            if (reader.HasRows == true)
            {
                comprobar = true;
            }
            else
            {
                comprobar = false;
            }
            reader.Close();
            return comprobar;
        }

        private bool comprobarCargarT(int año, int mes, int i)
        {
            bool comprobar = true;
            string s = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and anio=" + año + " and mes=" + mes + " and ZapateriasTorreon=1";
            cmd = new MySqlCommand(s, Conn);
            reader = cmd.ExecuteReader();
            if (reader.HasRows == true)
            {
                comprobar = true;
            }
            else
            {
                comprobar = false;
            }
            reader.Close();
            return comprobar;
        }

        private void dgv12_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void label19_Click(object sender, EventArgs e)
        {

        }

        private void m_calcularRenglonTotal(int dgv)
        {
            double c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17;
            switch(dgv)
            {
                case 1:
                     #region renglontotal mes1
                    #region limpiar variables
                    c1 = 0;
                c2 = 0;
                c3 = 0;
                c4 = 0;
                c5 = 0;
                c6 = 0;
                c7 = 0;
                c8 = 0;
                c9 = 0;
                c10 = 0;
                c11 = 0;
                c12 = 0;
                c13 = 0;
                c14 = 0;
                c15 = 0;
                c16 = 0;
                c17 = 0;
                    #endregion
                for (int i = 1; i <= dgv1.Rows.Count - 1; i++)
                {
                    #region columna1
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[1].Value != null && dgv1.Rows[i].Cells[1].Value.ToString() != "" && dgv1.Rows[i].Cells[1].Value.ToString() != "0")
                    {
                        c1 += double.Parse(dgv1.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c1 = c1 + 0;
                    }
                    }));
                    #endregion
                    #region columna2
                    this.Invoke(new Action(() =>
                    {
 if (dgv1.Rows[i].Cells[2].Value != null && dgv1.Rows[i].Cells[2].Value.ToString() != "" && dgv1.Rows[i].Cells[2].Value.ToString() != "0")
                    {
                        c2 += double.Parse(dgv1.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c2 = c2 + 0;
                    }
                    }));
                    #endregion
                    #region columna3
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[3].Value != null && dgv1.Rows[i].Cells[3].Value.ToString() != "" && dgv1.Rows[i].Cells[3].Value.ToString() != "0")
                    {
                        c3 += double.Parse(dgv1.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c3 = c3 + 0;
                    }
                    }));
                    #endregion
                    #region columna4
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[4].Value != null && dgv1.Rows[i].Cells[4].Value.ToString() != "" && dgv1.Rows[i].Cells[4].Value.ToString() != "0")
                    {
                        c4 += double.Parse(dgv1.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c4 = c4 + 0;
                    }
                    }));
                    #endregion
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
 if (dgv1.Rows[i].Cells[5].Value != null && dgv1.Rows[i].Cells[5].Value.ToString() != "" && dgv1.Rows[i].Cells[5].Value.ToString() != "0")
                    {
                        c5 += double.Parse(dgv1.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c5 = c5 + 0;
                    }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[6].Value != null && dgv1.Rows[i].Cells[6].Value.ToString() != "" && dgv1.Rows[i].Cells[6].Value.ToString() != "0")
                    {
                        c6 += double.Parse(dgv1.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c6 = c6 + 0;
                    }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[7].Value != null && dgv1.Rows[i].Cells[7].Value.ToString() != "" && dgv1.Rows[i].Cells[7].Value.ToString() != "0")
                    {
                        c7 += double.Parse(dgv1.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c7 = c7 + 0;
                    }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
 if (dgv1.Rows[i].Cells[8].Value != null && dgv1.Rows[i].Cells[8].Value.ToString() != "" && dgv1.Rows[i].Cells[8].Value.ToString() != "0")
                    {
                        c8 += double.Parse(dgv1.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c8 = c8 + 0;
                    }
                    }));
                    #endregion
                    #region columna9
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[9].Value != null && dgv1.Rows[i].Cells[9].Value.ToString() != "" && dgv1.Rows[i].Cells[9].Value.ToString() != "0")
                    {
                        c9 += double.Parse(dgv1.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c9 = c9 + 0;
                    }
                    }));
                    #endregion
                    #region columna10
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[10].Value != null && dgv1.Rows[i].Cells[10].Value.ToString() != "" && dgv1.Rows[i].Cells[10].Value.ToString() != "0")
                    {
                        c10 += double.Parse(dgv1.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c10 = c10 + 0;
                    }
                    }));
                    #endregion
                    #region columna11
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[11].Value != null && dgv1.Rows[i].Cells[11].Value.ToString() != "" && dgv1.Rows[i].Cells[10].Value.ToString() != "0")
                    {
                        c11 += double.Parse(dgv1.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c11 = c11 + 0;
                    }
                    }));
                    #endregion
                    #region columna12
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[12].Value != null && dgv1.Rows[i].Cells[12].Value.ToString() != "" && dgv1.Rows[i].Cells[12].Value.ToString() != "0")
                    {
                        c12 += double.Parse(dgv1.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c12 = c12 + 0;
                    }
                    }));
                    #endregion
                    #region columna13
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[13].Value != null && dgv1.Rows[i].Cells[13].Value.ToString() != "" && dgv1.Rows[i].Cells[13].Value.ToString() != "0")
                    {
                        c13 += double.Parse(dgv1.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c13 = c13 + 0;
                    }
                    }));
                    #endregion
                    #region columna14
                    this.Invoke(new Action(() =>
                    {
 if (dgv1.Rows[i].Cells[14].Value != null && dgv1.Rows[i].Cells[14].Value.ToString() != "")
                    {
                        c14 += double.Parse(dgv1.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c14 = c14 + 0;
                    }
                    }));
                    #endregion
                    #region columna15
                    this.Invoke(new Action(() =>
                    {
if (dgv1.Rows[i].Cells[15].Value != null && dgv1.Rows[i].Cells[15].Value.ToString() != "")
                    {
                        c15 += double.Parse(dgv1.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c15 = c15 + 0;
                    }
                    }));
                    #endregion
                    #region columna16
                    this.Invoke(new Action(() =>
                    {
 if (dgv1.Rows[i].Cells[16].Value != null && dgv1.Rows[i].Cells[16].Value.ToString() != "")
                    {
                        c16 += double.Parse(dgv1.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        c16 = c16 + 0;
                    }
                    }));
                    #endregion
                    this.Invoke(new Action(() =>
                    {
                        dgv1.Rows[0].Cells[1].Value = c1.ToString("n0");
                        dgv1.Rows[0].Cells[2].Value = c2.ToString("C2");
                        dgv1.Rows[0].Cells[5].Value = c5.ToString("n0");
                        dgv1.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgv1.Rows[0].Cells[7].Value = c7.ToString("n0");
                        dgv1.Rows[0].Cells[9].Value = c9.ToString("C2");
                        dgv1.Rows[0].Cells[10].Value = c10.ToString("n0");
                        dgv1.Rows[0].Cells[11].Value = c11.ToString("C2");
                        //dgv1.Rows[0].Cells[12].Value = c12.ToString("n0");
                        dgv1.Rows[0].Cells[13].Value = c13.ToString();
                        dgv1.Rows[0].Cells[14].Value = c14.ToString();
                        //dgv1.Rows[0].Cells[15].Value = c15.ToString("N2");
                        //dgv1.Rows[0].Cells[16].Value = c16.ToString("N2");
                        dgv1.Refresh();
                    }));
                    
                }
                this.Invoke(new Action(() =>
                {
                   if (c8 >= 1)
                {
                    dgv1.Rows[0].Cells[8].Value = (c8 / (dgv1.Rows.Count - 1)).ToString("C2");
                }
                else
                {
                    dgv1.Rows[0].Cells[8].Value = "0";
                }
                if (c3 >= 1)
                {
                    c3 = c3 / dgv1.Rows.Count - 1;
                }
                else
                {
                    c3 = 0;
                }
                dgv1.Rows[0].Cells[3].Value = c3.ToString("C2");
                }));
                
            #endregion
                    break;
                case 2:
                    #region renglontotal mes2
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv2.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[1].Value != null && dgv2.Rows[i].Cells[1].Value.ToString() != "" && dgv2.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv2.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[2].Value != null && dgv2.Rows[i].Cells[2].Value.ToString() != "" && dgv2.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv2.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[3].Value != null && dgv2.Rows[i].Cells[3].Value.ToString() != "" && dgv2.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv2.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[4].Value != null && dgv2.Rows[i].Cells[4].Value.ToString() != "" && dgv2.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv2.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[5].Value != null && dgv2.Rows[i].Cells[5].Value.ToString() != "" && dgv2.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv2.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[6].Value != null && dgv2.Rows[i].Cells[6].Value.ToString() != "" && dgv2.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv2.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[7].Value != null && dgv2.Rows[i].Cells[7].Value.ToString() != "" && dgv2.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv2.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[8].Value != null && dgv2.Rows[i].Cells[8].Value.ToString() != "" && dgv2.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv2.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[9].Value != null && dgv2.Rows[i].Cells[9].Value.ToString() != "" && dgv2.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv2.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[10].Value != null && dgv2.Rows[i].Cells[10].Value.ToString() != "" && dgv2.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv2.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[11].Value != null && dgv2.Rows[i].Cells[11].Value.ToString() != "" && dgv2.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv2.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[12].Value != null && dgv2.Rows[i].Cells[12].Value.ToString() != "" && dgv2.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv2.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[13].Value != null && dgv2.Rows[i].Cells[13].Value.ToString() != "" && dgv2.Rows[i].Cells[13].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv2.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[14].Value != null && dgv2.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv2.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[15].Value != null && dgv2.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv2.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[i].Cells[16].Value != null && dgv2.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv2.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv2.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv2.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv2.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv2.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv2.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv2.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv2.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv2.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv2.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv2.Rows[0].Cells[13].Value = c13.ToString();
                            dgv2.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv2.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv2.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv2.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv2.Rows[0].Cells[8].Value = (c8 / (dgv2.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv2.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv2.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv2.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 3:
                    #region renglontotal mes3
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv3.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[1].Value != null && dgv3.Rows[i].Cells[1].Value.ToString() != "" && dgv3.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv3.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[2].Value != null && dgv3.Rows[i].Cells[2].Value.ToString() != "" && dgv3.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv3.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[3].Value != null && dgv3.Rows[i].Cells[3].Value.ToString() != "" && dgv3.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv3.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[4].Value != null && dgv3.Rows[i].Cells[4].Value.ToString() != "" && dgv3.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv3.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[5].Value != null && dgv3.Rows[i].Cells[5].Value.ToString() != "" && dgv3.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv3.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[6].Value != null && dgv3.Rows[i].Cells[6].Value.ToString() != "" && dgv3.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv3.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[7].Value != null && dgv3.Rows[i].Cells[7].Value.ToString() != "" && dgv3.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv3.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[8].Value != null && dgv3.Rows[i].Cells[8].Value.ToString() != "" && dgv3.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv3.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[9].Value != null && dgv3.Rows[i].Cells[9].Value.ToString() != "" && dgv3.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv3.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[10].Value != null && dgv3.Rows[i].Cells[10].Value.ToString() != "" && dgv3.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv3.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[11].Value != null && dgv3.Rows[i].Cells[11].Value.ToString() != "" && dgv3.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv3.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[12].Value != null && dgv3.Rows[i].Cells[12].Value.ToString() != "" && dgv3.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv3.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[13].Value != null && dgv3.Rows[i].Cells[13].Value.ToString() != "" && dgv3.Rows[i].Cells[13].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv3.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[14].Value != null && dgv3.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv3.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[15].Value != null && dgv3.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv3.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[i].Cells[16].Value != null && dgv3.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv3.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv3.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv3.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv3.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv3.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv3.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv3.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv3.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv3.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv3.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv3.Rows[0].Cells[13].Value = c13.ToString();
                            dgv3.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv3.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv3.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv3.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv3.Rows[0].Cells[8].Value = (c8 / (dgv3.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv3.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv3.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv3.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 4:
                    #region renglontotal mes4
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv4.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[1].Value != null && dgv4.Rows[i].Cells[1].Value.ToString() != "" && dgv4.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv4.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[2].Value != null && dgv4.Rows[i].Cells[2].Value.ToString() != "" && dgv4.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv4.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[3].Value != null && dgv4.Rows[i].Cells[3].Value.ToString() != "" && dgv4.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv4.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[4].Value != null && dgv4.Rows[i].Cells[4].Value.ToString() != "" && dgv4.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv4.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[5].Value != null && dgv4.Rows[i].Cells[5].Value.ToString() != "" && dgv4.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv4.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[6].Value != null && dgv4.Rows[i].Cells[6].Value.ToString() != "" && dgv4.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv4.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[7].Value != null && dgv4.Rows[i].Cells[7].Value.ToString() != "" && dgv4.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv4.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[8].Value != null && dgv4.Rows[i].Cells[8].Value.ToString() != "" && dgv4.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv4.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[9].Value != null && dgv4.Rows[i].Cells[9].Value.ToString() != "" && dgv4.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv4.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[10].Value != null && dgv4.Rows[i].Cells[10].Value.ToString() != "" && dgv4.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv4.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[11].Value != null && dgv4.Rows[i].Cells[11].Value.ToString() != "" && dgv4.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv4.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[12].Value != null && dgv4.Rows[i].Cells[12].Value.ToString() != "" && dgv4.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv4.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[13].Value != null && dgv4.Rows[i].Cells[13].Value.ToString() != "" && dgv4.Rows[i].Cells[13].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv4.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[14].Value != null && dgv4.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv4.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[15].Value != null && dgv4.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv4.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[i].Cells[16].Value != null && dgv4.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv4.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv4.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv4.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv4.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv4.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv4.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv4.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv4.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv4.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv4.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv4.Rows[0].Cells[13].Value = c13.ToString();
                            dgv4.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv4.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv4.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv4.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv4.Rows[0].Cells[8].Value = (c8 / (dgv4.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv4.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv4.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv4.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 5:
                    #region renglontotal mes5
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv5.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[1].Value != null && dgv5.Rows[i].Cells[1].Value.ToString() != "" && dgv5.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv5.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[2].Value != null && dgv5.Rows[i].Cells[2].Value.ToString() != "" && dgv5.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv5.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[3].Value != null && dgv5.Rows[i].Cells[3].Value.ToString() != "" && dgv5.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv5.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[4].Value != null && dgv5.Rows[i].Cells[4].Value.ToString() != "" && dgv5.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv5.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[5].Value != null && dgv5.Rows[i].Cells[5].Value.ToString() != "" && dgv5.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv5.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[6].Value != null && dgv5.Rows[i].Cells[6].Value.ToString() != "" && dgv5.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv5.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[7].Value != null && dgv5.Rows[i].Cells[7].Value.ToString() != "" && dgv5.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv5.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[8].Value != null && dgv5.Rows[i].Cells[8].Value.ToString() != "" && dgv5.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv5.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[9].Value != null && dgv5.Rows[i].Cells[9].Value.ToString() != "" && dgv5.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv5.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[10].Value != null && dgv5.Rows[i].Cells[10].Value.ToString() != "" && dgv5.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv5.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[11].Value != null && dgv5.Rows[i].Cells[11].Value.ToString() != "" && dgv5.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv5.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[12].Value != null && dgv5.Rows[i].Cells[12].Value.ToString() != "" && dgv5.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv5.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[13].Value != null && dgv5.Rows[i].Cells[13].Value.ToString() != "" && dgv5.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv5.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[14].Value != null && dgv5.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv5.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[15].Value != null && dgv5.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv5.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[i].Cells[16].Value != null && dgv5.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv5.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv5.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv5.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv5.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv5.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv5.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv5.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv5.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv5.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv5.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv5.Rows[0].Cells[13].Value = c13.ToString();
                            dgv5.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv5.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv5.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv5.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv5.Rows[0].Cells[8].Value = (c8 / (dgv5.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv5.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv5.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv5.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 6:
                    #region renglontotal mes6
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv6.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[1].Value != null && dgv6.Rows[i].Cells[1].Value.ToString() != "" && dgv6.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv6.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[2].Value != null && dgv6.Rows[i].Cells[2].Value.ToString() != "" && dgv6.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv6.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[3].Value != null && dgv6.Rows[i].Cells[3].Value.ToString() != "" && dgv6.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv6.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[4].Value != null && dgv6.Rows[i].Cells[4].Value.ToString() != "" && dgv6.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv6.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[5].Value != null && dgv6.Rows[i].Cells[5].Value.ToString() != "" && dgv6.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv6.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[6].Value != null && dgv6.Rows[i].Cells[6].Value.ToString() != "" && dgv6.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv6.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[7].Value != null && dgv6.Rows[i].Cells[7].Value.ToString() != "" && dgv6.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv6.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[8].Value != null && dgv6.Rows[i].Cells[8].Value.ToString() != "" && dgv6.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv6.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[9].Value != null && dgv6.Rows[i].Cells[9].Value.ToString() != "" && dgv6.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv6.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[10].Value != null && dgv6.Rows[i].Cells[10].Value.ToString() != "" && dgv6.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv6.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[11].Value != null && dgv6.Rows[i].Cells[11].Value.ToString() != "" && dgv6.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv6.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[12].Value != null && dgv6.Rows[i].Cells[12].Value.ToString() != "" && dgv6.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv6.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[13].Value != null && dgv6.Rows[i].Cells[13].Value.ToString() != "" && dgv6.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv6.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[14].Value != null && dgv6.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv6.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[15].Value != null && dgv6.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv6.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[i].Cells[16].Value != null && dgv6.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv6.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv6.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv6.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv6.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv6.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv6.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv6.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv6.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv6.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv6.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv6.Rows[0].Cells[13].Value = c13.ToString();
                            dgv6.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv6.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv6.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv6.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv6.Rows[0].Cells[8].Value = (c8 / (dgv6.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv6.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv6.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv6.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 7:
                    #region renglontotal mes7
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv7.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[1].Value != null && dgv7.Rows[i].Cells[1].Value.ToString() != "" && dgv7.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv7.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[2].Value != null && dgv7.Rows[i].Cells[2].Value.ToString() != "" && dgv7.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv7.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[3].Value != null && dgv7.Rows[i].Cells[3].Value.ToString() != "" && dgv7.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv7.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[4].Value != null && dgv7.Rows[i].Cells[4].Value.ToString() != "" && dgv7.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv7.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[5].Value != null && dgv7.Rows[i].Cells[5].Value.ToString() != "" && dgv7.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv7.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[6].Value != null && dgv7.Rows[i].Cells[6].Value.ToString() != "" && dgv7.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv7.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[7].Value != null && dgv7.Rows[i].Cells[7].Value.ToString() != "" && dgv7.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv7.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[8].Value != null && dgv7.Rows[i].Cells[8].Value.ToString() != "" && dgv7.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv7.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[9].Value != null && dgv7.Rows[i].Cells[9].Value.ToString() != "" && dgv7.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv7.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[10].Value != null && dgv7.Rows[i].Cells[10].Value.ToString() != "" && dgv7.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv7.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[11].Value != null && dgv7.Rows[i].Cells[11].Value.ToString() != "" && dgv7.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv7.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[12].Value != null && dgv7.Rows[i].Cells[12].Value.ToString() != "" && dgv7.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv7.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[13].Value != null && dgv7.Rows[i].Cells[13].Value.ToString() != "" && dgv7.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv7.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[14].Value != null && dgv7.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv7.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[15].Value != null && dgv7.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv7.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[i].Cells[16].Value != null && dgv7.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv7.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv7.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv7.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv7.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv7.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv7.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv7.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv7.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv7.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv7.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv7.Rows[0].Cells[13].Value = c13.ToString();
                            dgv7.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv7.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv7.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv7.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv7.Rows[0].Cells[8].Value = (c8 / (dgv7.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv7.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv7.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv7.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 8:
                    #region renglontotal mes8
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv8.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[1].Value != null && dgv8.Rows[i].Cells[1].Value.ToString() != "" && dgv8.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv8.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[2].Value != null && dgv8.Rows[i].Cells[2].Value.ToString() != "" && dgv8.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv8.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[3].Value != null && dgv8.Rows[i].Cells[3].Value.ToString() != "" && dgv8.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv8.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[4].Value != null && dgv8.Rows[i].Cells[4].Value.ToString() != "" && dgv8.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv8.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[5].Value != null && dgv8.Rows[i].Cells[5].Value.ToString() != "" && dgv8.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv8.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[6].Value != null && dgv8.Rows[i].Cells[6].Value.ToString() != "" && dgv8.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv8.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[7].Value != null && dgv8.Rows[i].Cells[7].Value.ToString() != "" && dgv8.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv8.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[8].Value != null && dgv8.Rows[i].Cells[8].Value.ToString() != "" && dgv8.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv8.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[9].Value != null && dgv8.Rows[i].Cells[9].Value.ToString() != "" && dgv8.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv8.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[10].Value != null && dgv8.Rows[i].Cells[10].Value.ToString() != "" && dgv8.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv8.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[11].Value != null && dgv8.Rows[i].Cells[11].Value.ToString() != "" && dgv8.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv8.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[12].Value != null && dgv8.Rows[i].Cells[12].Value.ToString() != "" && dgv8.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv8.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[13].Value != null && dgv8.Rows[i].Cells[13].Value.ToString() != "" && dgv8.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv8.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[14].Value != null && dgv8.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv8.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[15].Value != null && dgv8.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv8.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[i].Cells[16].Value != null && dgv8.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv8.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv8.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv8.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv8.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv8.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv8.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv8.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv8.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv8.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv8.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv8.Rows[0].Cells[13].Value = c13.ToString();
                            dgv8.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv8.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv8.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv8.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv8.Rows[0].Cells[8].Value = (c8 / (dgv8.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv8.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv8.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv8.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 9:
                    #region renglontotal mes9
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv9.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[1].Value != null && dgv9.Rows[i].Cells[1].Value.ToString() != "" && dgv9.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv9.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[2].Value != null && dgv9.Rows[i].Cells[2].Value.ToString() != "" && dgv9.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv9.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[3].Value != null && dgv9.Rows[i].Cells[3].Value.ToString() != "" && dgv9.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv9.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[4].Value != null && dgv9.Rows[i].Cells[4].Value.ToString() != "" && dgv9.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv9.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[5].Value != null && dgv9.Rows[i].Cells[5].Value.ToString() != "" && dgv9.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv9.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[6].Value != null && dgv9.Rows[i].Cells[6].Value.ToString() != "" && dgv9.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv9.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[7].Value != null && dgv9.Rows[i].Cells[7].Value.ToString() != "" && dgv9.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv9.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[8].Value != null && dgv9.Rows[i].Cells[8].Value.ToString() != "" && dgv9.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv9.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[9].Value != null && dgv9.Rows[i].Cells[9].Value.ToString() != "" && dgv9.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv9.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[10].Value != null && dgv9.Rows[i].Cells[10].Value.ToString() != "" && dgv9.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv9.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[11].Value != null && dgv9.Rows[i].Cells[11].Value.ToString() != "" && dgv9.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv9.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[12].Value != null && dgv9.Rows[i].Cells[12].Value.ToString() != "" && dgv9.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv9.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[13].Value != null && dgv9.Rows[i].Cells[13].Value.ToString() != "" && dgv9.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv9.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[14].Value != null && dgv9.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv9.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[15].Value != null && dgv9.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv9.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[i].Cells[16].Value != null && dgv9.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv9.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv9.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv9.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv9.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv9.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv9.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv9.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv9.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv9.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv9.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv9.Rows[0].Cells[13].Value = c13.ToString();
                            dgv9.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv9.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv9.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv9.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv9.Rows[0].Cells[8].Value = (c8 / (dgv9.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv9.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv9.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv9.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 10:
                    #region renglontotal mes10
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv10.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[1].Value != null && dgv10.Rows[i].Cells[1].Value.ToString() != "" && dgv10.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv10.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[2].Value != null && dgv10.Rows[i].Cells[2].Value.ToString() != "" && dgv10.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv10.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[3].Value != null && dgv10.Rows[i].Cells[3].Value.ToString() != "" && dgv10.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv10.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[4].Value != null && dgv10.Rows[i].Cells[4].Value.ToString() != "" && dgv10.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv10.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[5].Value != null && dgv10.Rows[i].Cells[5].Value.ToString() != "" && dgv10.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv10.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[6].Value != null && dgv10.Rows[i].Cells[6].Value.ToString() != "" && dgv10.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv10.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[7].Value != null && dgv10.Rows[i].Cells[7].Value.ToString() != "" && dgv10.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv10.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[8].Value != null && dgv10.Rows[i].Cells[8].Value.ToString() != "" && dgv10.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv10.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[9].Value != null && dgv10.Rows[i].Cells[9].Value.ToString() != "" && dgv10.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv10.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[10].Value != null && dgv10.Rows[i].Cells[10].Value.ToString() != "" && dgv10.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv10.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[11].Value != null && dgv10.Rows[i].Cells[11].Value.ToString() != "" && dgv10.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv10.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[12].Value != null && dgv10.Rows[i].Cells[12].Value.ToString() != "" && dgv10.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv10.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[13].Value != null && dgv10.Rows[i].Cells[13].Value.ToString() != "" && dgv10.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv10.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[14].Value != null && dgv10.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv10.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[15].Value != null && dgv10.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv10.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[i].Cells[16].Value != null && dgv10.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv10.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv10.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv10.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv10.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv10.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv10.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv10.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv10.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv10.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv10.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv10.Rows[0].Cells[13].Value = c13.ToString();
                            dgv10.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv10.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv10.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv10.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv10.Rows[0].Cells[8].Value = (c8 / (dgv10.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv10.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv10.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv10.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 11:
                    #region renglontotal mes11
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv11.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[1].Value != null && dgv11.Rows[i].Cells[1].Value.ToString() != "" && dgv11.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv11.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[2].Value != null && dgv11.Rows[i].Cells[2].Value.ToString() != "" && dgv11.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv11.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[3].Value != null && dgv11.Rows[i].Cells[3].Value.ToString() != "" && dgv11.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv11.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[4].Value != null && dgv11.Rows[i].Cells[4].Value.ToString() != "" && dgv11.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv11.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[5].Value != null && dgv11.Rows[i].Cells[5].Value.ToString() != "" && dgv11.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv11.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[6].Value != null && dgv11.Rows[i].Cells[6].Value.ToString() != "" && dgv11.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv11.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[7].Value != null && dgv11.Rows[i].Cells[7].Value.ToString() != "" && dgv11.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv11.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[8].Value != null && dgv11.Rows[i].Cells[8].Value.ToString() != "" && dgv11.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv11.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[9].Value != null && dgv11.Rows[i].Cells[9].Value.ToString() != "" && dgv11.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv11.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[10].Value != null && dgv11.Rows[i].Cells[10].Value.ToString() != "" && dgv11.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv11.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[11].Value != null && dgv11.Rows[i].Cells[11].Value.ToString() != "" && dgv11.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv11.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[12].Value != null && dgv11.Rows[i].Cells[12].Value.ToString() != "" && dgv11.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv11.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[13].Value != null && dgv11.Rows[i].Cells[13].Value.ToString() != "" && dgv11.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv11.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[14].Value != null && dgv11.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv11.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[15].Value != null && dgv11.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv11.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[i].Cells[16].Value != null && dgv11.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv11.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv11.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv11.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv11.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv11.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv11.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv11.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv11.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv11.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv11.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv11.Rows[0].Cells[13].Value = c13.ToString();
                            dgv11.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv11.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv11.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv11.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv11.Rows[0].Cells[8].Value = (c8 / (dgv11.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv11.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv11.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv11.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
                case 12:
                    #region renglontotal mes12
                    #region limpiar variables
                    c1 = 0;
                    c2 = 0;
                    c3 = 0;
                    c4 = 0;
                    c5 = 0;
                    c6 = 0;
                    c7 = 0;
                    c8 = 0;
                    c9 = 0;
                    c10 = 0;
                    c11 = 0;
                    c12 = 0;
                    c13 = 0;
                    c14 = 0;
                    c15 = 0;
                    c16 = 0;
                    c17 = 0;
                    #endregion
                    for (int i = 1; i <= dgv12.Rows.Count - 1; i++)
                    {
                        #region columna1
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[1].Value != null && dgv12.Rows[i].Cells[1].Value.ToString() != "" && dgv12.Rows[i].Cells[1].Value.ToString() != "0")
                            {
                                c1 += double.Parse(dgv12.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c1 = c1 + 0;
                            }
                        }));
                        #endregion
                        #region columna2
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[2].Value != null && dgv12.Rows[i].Cells[2].Value.ToString() != "" && dgv12.Rows[i].Cells[2].Value.ToString() != "0")
                            {
                                c2 += double.Parse(dgv12.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c2 = c2 + 0;
                            }
                        }));
                        #endregion
                        #region columna3
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[3].Value != null && dgv12.Rows[i].Cells[3].Value.ToString() != "" && dgv12.Rows[i].Cells[3].Value.ToString() != "0")
                            {
                                c3 += double.Parse(dgv12.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c3 = c3 + 0;
                            }
                        }));
                        #endregion
                        #region columna4
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[4].Value != null && dgv12.Rows[i].Cells[4].Value.ToString() != "" && dgv12.Rows[i].Cells[4].Value.ToString() != "0")
                            {
                                c4 += double.Parse(dgv12.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c4 = c4 + 0;
                            }
                        }));
                        #endregion
                        #region columna5
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[5].Value != null && dgv12.Rows[i].Cells[5].Value.ToString() != "" && dgv12.Rows[i].Cells[5].Value.ToString() != "0")
                            {
                                c5 += double.Parse(dgv12.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = c5 + 0;
                            }
                        }));
                        #endregion
                        #region columna6
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[6].Value != null && dgv12.Rows[i].Cells[6].Value.ToString() != "" && dgv12.Rows[i].Cells[6].Value.ToString() != "0")
                            {
                                c6 += double.Parse(dgv12.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = c6 + 0;
                            }
                        }));
                        #endregion
                        #region columna7
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[7].Value != null && dgv12.Rows[i].Cells[7].Value.ToString() != "" && dgv12.Rows[i].Cells[7].Value.ToString() != "0")
                            {
                                c7 += double.Parse(dgv12.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = c7 + 0;
                            }
                        }));
                        #endregion
                        #region columna8
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[8].Value != null && dgv12.Rows[i].Cells[8].Value.ToString() != "" && dgv12.Rows[i].Cells[8].Value.ToString() != "0")
                            {
                                c8 += double.Parse(dgv12.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = c8 + 0;
                            }
                        }));
                        #endregion
                        #region columna9
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[9].Value != null && dgv12.Rows[i].Cells[9].Value.ToString() != "" && dgv12.Rows[i].Cells[9].Value.ToString() != "0")
                            {
                                c9 += double.Parse(dgv12.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c9 = c9 + 0;
                            }
                        }));
                        #endregion
                        #region columna10
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[10].Value != null && dgv12.Rows[i].Cells[10].Value.ToString() != "" && dgv12.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c10 += double.Parse(dgv12.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = c10 + 0;
                            }
                        }));
                        #endregion
                        #region columna11
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[11].Value != null && dgv12.Rows[i].Cells[11].Value.ToString() != "" && dgv12.Rows[i].Cells[10].Value.ToString() != "0")
                            {
                                c11 += double.Parse(dgv12.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = c11 + 0;
                            }
                        }));
                        #endregion
                        #region columna12
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[12].Value != null && dgv12.Rows[i].Cells[12].Value.ToString() != "" && dgv12.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c12 += double.Parse(dgv12.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = c12 + 0;
                            }
                        }));
                        #endregion
                        #region columna13
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[13].Value != null && dgv12.Rows[i].Cells[13].Value.ToString() != "" && dgv12.Rows[i].Cells[12].Value.ToString() != "0")
                            {
                                c13 += double.Parse(dgv12.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c13 = c13 + 0;
                            }
                        }));
                        #endregion
                        #region columna14
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[14].Value != null && dgv12.Rows[i].Cells[14].Value.ToString() != "")
                            {
                                c14 += double.Parse(dgv12.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c14 = c14 + 0;
                            }
                        }));
                        #endregion
                        #region columna15
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[15].Value != null && dgv12.Rows[i].Cells[15].Value.ToString() != "")
                            {
                                c15 += double.Parse(dgv12.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c15 = c15 + 0;
                            }
                        }));
                        #endregion
                        #region columna16
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[i].Cells[16].Value != null && dgv12.Rows[i].Cells[16].Value.ToString() != "")
                            {
                                c16 += double.Parse(dgv12.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c16 = c16 + 0;
                            }
                        }));
                        #endregion
                        this.Invoke(new Action(() =>
                        {
                            dgv12.Rows[0].Cells[1].Value = c1.ToString("n0");
                            dgv12.Rows[0].Cells[2].Value = c2.ToString("C2");
                            dgv12.Rows[0].Cells[5].Value = c5.ToString("n0");
                            dgv12.Rows[0].Cells[6].Value = c6.ToString("C2");
                            dgv12.Rows[0].Cells[7].Value = c7.ToString("n0");
                            dgv12.Rows[0].Cells[9].Value = c9.ToString("C2");
                            dgv12.Rows[0].Cells[10].Value = c10.ToString("n0");
                            dgv12.Rows[0].Cells[11].Value = c11.ToString("C2");
                            //dgv12.Rows[0].Cells[12].Value = c12.ToString("n0");
                            dgv12.Rows[0].Cells[13].Value = c13.ToString();
                            dgv12.Rows[0].Cells[14].Value = c14.ToString();
                            //dgv12.Rows[0].Cells[15].Value = c15.ToString("N2");
                            //dgv12.Rows[0].Cells[16].Value = c16.ToString("N2");
                            dgv12.Refresh();
                        }));

                    }
                    this.Invoke(new Action(() =>
                    {
                        if (c8 >= 1)
                        {
                            dgv12.Rows[0].Cells[8].Value = (c8 / (dgv12.Rows.Count - 1)).ToString("C2");
                        }
                        else
                        {
                            dgv12.Rows[0].Cells[8].Value = "0";
                        }
                        if (c3 >= 1)
                        {
                            c3 = c3 / dgv12.Rows.Count - 1;
                        }
                        else
                        {
                            c3 = 0;
                        }
                        dgv12.Rows[0].Cells[3].Value = c3.ToString("C2");
                    }));

                    #endregion
                    break;
            }
            #region
            //#region renglontotal mes2
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv2.Rows.Count - 1; i++)
            //{
            //    if (dgv2.Rows[i].Cells[1].Value != null && dgv2.Rows[i].Cells[1].Value.ToString() != "" && dgv2.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv2.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[2].Value != null && dgv2.Rows[i].Cells[2].Value.ToString() != "" && dgv2.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv2.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[3].Value != null && dgv2.Rows[i].Cells[3].Value.ToString() != "" && dgv2.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv2.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[4].Value != null && dgv2.Rows[i].Cells[4].Value.ToString() != "" && dgv2.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv2.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[5].Value != null && dgv2.Rows[i].Cells[5].Value.ToString() != "" && dgv2.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv2.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[6].Value != null && dgv2.Rows[i].Cells[6].Value.ToString() != "" && dgv2.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv2.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[7].Value != null && dgv2.Rows[i].Cells[7].Value.ToString() != "" && dgv2.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv2.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[8].Value != null && dgv2.Rows[i].Cells[8].Value.ToString() != "" && dgv2.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv2.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[9].Value != null && dgv2.Rows[i].Cells[9].Value.ToString() != "" && dgv2.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv2.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[10].Value != null && dgv2.Rows[i].Cells[10].Value.ToString() != "" && dgv2.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv2.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[11].Value != null && dgv2.Rows[i].Cells[11].Value.ToString() != "" && dgv2.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv2.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[12].Value != null && dgv2.Rows[i].Cells[12].Value.ToString() != "" && dgv2.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv2.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[13].Value != null && dgv2.Rows[i].Cells[13].Value.ToString() != "" && dgv2.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv2.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[14].Value != null && dgv2.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv2.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[15].Value != null && dgv2.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv2.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[15].Value != null && dgv2.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv2.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv2.Rows[i].Cells[16].Value != null && dgv2.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv2.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv2.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv2.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv2.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv2.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv2.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv2.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv2.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv2.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv2.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv2.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv2.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv2.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv2.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv2.Rows[0].Cells[8].Value = (c8 / (dgv2.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv2.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv2.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv2.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes3
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv3.Rows.Count - 1; i++)
            //{
            //    if (dgv3.Rows[i].Cells[1].Value != null && dgv3.Rows[i].Cells[1].Value.ToString() != "" && dgv3.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv3.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[2].Value != null && dgv3.Rows[i].Cells[2].Value.ToString() != "" && dgv3.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv3.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[3].Value != null && dgv3.Rows[i].Cells[3].Value.ToString() != "" && dgv3.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv3.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[4].Value != null && dgv3.Rows[i].Cells[4].Value.ToString() != "" && dgv3.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv3.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[5].Value != null && dgv3.Rows[i].Cells[5].Value.ToString() != "" && dgv3.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv3.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[6].Value != null && dgv3.Rows[i].Cells[6].Value.ToString() != "" && dgv3.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv3.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[7].Value != null && dgv3.Rows[i].Cells[7].Value.ToString() != "" && dgv3.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv3.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[8].Value != null && dgv3.Rows[i].Cells[8].Value.ToString() != "" && dgv3.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv3.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[9].Value != null && dgv3.Rows[i].Cells[9].Value.ToString() != "" && dgv3.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv3.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[10].Value != null && dgv3.Rows[i].Cells[10].Value.ToString() != "" && dgv3.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv3.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[11].Value != null && dgv3.Rows[i].Cells[11].Value.ToString() != "" && dgv3.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv3.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[12].Value != null && dgv3.Rows[i].Cells[12].Value.ToString() != "" && dgv3.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv3.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[13].Value != null && dgv3.Rows[i].Cells[13].Value.ToString() != "" && dgv3.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv3.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[14].Value != null && dgv3.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv3.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[15].Value != null && dgv3.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv3.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[15].Value != null && dgv3.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv3.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv3.Rows[i].Cells[16].Value != null && dgv3.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv3.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv3.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv3.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv3.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv3.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv3.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv3.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv3.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv3.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv3.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv3.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv3.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv3.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv3.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv3.Rows[0].Cells[8].Value = (c8 / (dgv3.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv3.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv3.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv3.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes4
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv4.Rows.Count - 1; i++)
            //{
            //    if (dgv4.Rows[i].Cells[1].Value != null && dgv4.Rows[i].Cells[1].Value.ToString() != "" && dgv4.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv4.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[2].Value != null && dgv4.Rows[i].Cells[2].Value.ToString() != "" && dgv4.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv4.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[3].Value != null && dgv4.Rows[i].Cells[3].Value.ToString() != "" && dgv4.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv4.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[4].Value != null && dgv4.Rows[i].Cells[4].Value.ToString() != "" && dgv4.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv4.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[5].Value != null && dgv4.Rows[i].Cells[5].Value.ToString() != "" && dgv4.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv4.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[6].Value != null && dgv4.Rows[i].Cells[6].Value.ToString() != "" && dgv4.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv4.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[7].Value != null && dgv4.Rows[i].Cells[7].Value.ToString() != "" && dgv4.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv4.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[8].Value != null && dgv4.Rows[i].Cells[8].Value.ToString() != "" && dgv4.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv4.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[9].Value != null && dgv4.Rows[i].Cells[9].Value.ToString() != "" && dgv4.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv4.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[10].Value != null && dgv4.Rows[i].Cells[10].Value.ToString() != "" && dgv4.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv4.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[11].Value != null && dgv4.Rows[i].Cells[11].Value.ToString() != "" && dgv4.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv4.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[12].Value != null && dgv4.Rows[i].Cells[12].Value.ToString() != "" && dgv4.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv4.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[13].Value != null && dgv4.Rows[i].Cells[13].Value.ToString() != "" && dgv4.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv4.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[14].Value != null && dgv4.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv4.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[15].Value != null && dgv4.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv4.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[15].Value != null && dgv4.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv4.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv4.Rows[i].Cells[16].Value != null && dgv4.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv4.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv4.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv4.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv4.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv4.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv4.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv4.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv4.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv4.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv4.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv4.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv4.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv4.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv4.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv4.Rows[0].Cells[8].Value = (c8 / (dgv4.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv4.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv4.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv4.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes5
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv5.Rows.Count - 1; i++)
            //{
            //    if (dgv5.Rows[i].Cells[1].Value != null && dgv5.Rows[i].Cells[1].Value.ToString() != "" && dgv5.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv5.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[2].Value != null && dgv5.Rows[i].Cells[2].Value.ToString() != "" && dgv5.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv5.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[3].Value != null && dgv5.Rows[i].Cells[3].Value.ToString() != "" && dgv5.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv5.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[4].Value != null && dgv5.Rows[i].Cells[4].Value.ToString() != "" && dgv5.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv5.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[5].Value != null && dgv5.Rows[i].Cells[5].Value.ToString() != "" && dgv5.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv5.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[6].Value != null && dgv5.Rows[i].Cells[6].Value.ToString() != "" && dgv5.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv5.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[7].Value != null && dgv5.Rows[i].Cells[7].Value.ToString() != "" && dgv5.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv5.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[8].Value != null && dgv5.Rows[i].Cells[8].Value.ToString() != "" && dgv5.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv5.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[9].Value != null && dgv5.Rows[i].Cells[9].Value.ToString() != "" && dgv5.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv5.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[10].Value != null && dgv5.Rows[i].Cells[10].Value.ToString() != "" && dgv5.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv5.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[11].Value != null && dgv5.Rows[i].Cells[11].Value.ToString() != "" && dgv5.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv5.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[12].Value != null && dgv5.Rows[i].Cells[12].Value.ToString() != "" && dgv5.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv5.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[13].Value != null && dgv5.Rows[i].Cells[13].Value.ToString() != "" && dgv5.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv5.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[14].Value != null && dgv5.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv5.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[15].Value != null && dgv5.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv5.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[15].Value != null && dgv5.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv5.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv5.Rows[i].Cells[16].Value != null && dgv5.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv5.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv5.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv5.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv5.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv5.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv5.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv5.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv5.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv5.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv5.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv5.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv5.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv5.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv5.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv5.Rows[0].Cells[8].Value = (c8 / (dgv5.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv5.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv5.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv5.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes6
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv6.Rows.Count - 1; i++)
            //{
            //    if (dgv6.Rows[i].Cells[1].Value != null && dgv6.Rows[i].Cells[1].Value.ToString() != "" && dgv6.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv6.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[2].Value != null && dgv6.Rows[i].Cells[2].Value.ToString() != "" && dgv6.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv6.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[3].Value != null && dgv6.Rows[i].Cells[3].Value.ToString() != "" && dgv6.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv6.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[4].Value != null && dgv6.Rows[i].Cells[4].Value.ToString() != "" && dgv6.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv6.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[5].Value != null && dgv6.Rows[i].Cells[5].Value.ToString() != "" && dgv6.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv6.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[6].Value != null && dgv6.Rows[i].Cells[6].Value.ToString() != "" && dgv6.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv6.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[7].Value != null && dgv6.Rows[i].Cells[7].Value.ToString() != "" && dgv6.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv6.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[8].Value != null && dgv6.Rows[i].Cells[8].Value.ToString() != "" && dgv6.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv6.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[9].Value != null && dgv6.Rows[i].Cells[9].Value.ToString() != "" && dgv6.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv6.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[10].Value != null && dgv6.Rows[i].Cells[10].Value.ToString() != "" && dgv6.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv6.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[11].Value != null && dgv6.Rows[i].Cells[11].Value.ToString() != "" && dgv6.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv6.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[12].Value != null && dgv6.Rows[i].Cells[12].Value.ToString() != "" && dgv6.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv6.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[13].Value != null && dgv6.Rows[i].Cells[13].Value.ToString() != "" && dgv6.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv6.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[14].Value != null && dgv6.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv6.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[15].Value != null && dgv6.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv6.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[15].Value != null && dgv6.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv6.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv6.Rows[i].Cells[16].Value != null && dgv6.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv6.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv6.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv6.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv6.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv6.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv6.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv6.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv6.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv6.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv6.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv6.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv6.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv6.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv6.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv6.Rows[0].Cells[8].Value = (c8 / (dgv6.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv6.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv6.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv6.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes7
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv7.Rows.Count - 1; i++)
            //{
            //    if (dgv7.Rows[i].Cells[1].Value != null && dgv7.Rows[i].Cells[1].Value.ToString() != "" && dgv7.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv7.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[2].Value != null && dgv7.Rows[i].Cells[2].Value.ToString() != "" && dgv7.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv7.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[3].Value != null && dgv7.Rows[i].Cells[3].Value.ToString() != "" && dgv7.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv7.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[4].Value != null && dgv7.Rows[i].Cells[4].Value.ToString() != "" && dgv7.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv7.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[5].Value != null && dgv7.Rows[i].Cells[5].Value.ToString() != "" && dgv7.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv7.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[6].Value != null && dgv7.Rows[i].Cells[6].Value.ToString() != "" && dgv7.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv7.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[7].Value != null && dgv7.Rows[i].Cells[7].Value.ToString() != "" && dgv7.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv7.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[8].Value != null && dgv7.Rows[i].Cells[8].Value.ToString() != "" && dgv7.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv7.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[9].Value != null && dgv7.Rows[i].Cells[9].Value.ToString() != "" && dgv7.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv7.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[10].Value != null && dgv7.Rows[i].Cells[10].Value.ToString() != "" && dgv7.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv7.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[11].Value != null && dgv7.Rows[i].Cells[11].Value.ToString() != "" && dgv7.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv7.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[12].Value != null && dgv7.Rows[i].Cells[12].Value.ToString() != "" && dgv7.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv7.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[13].Value != null && dgv7.Rows[i].Cells[13].Value.ToString() != "" && dgv7.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv7.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[14].Value != null && dgv7.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv7.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[15].Value != null && dgv7.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv7.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[15].Value != null && dgv7.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv7.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv7.Rows[i].Cells[16].Value != null && dgv7.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv7.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv7.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv7.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv7.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv7.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv7.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv7.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv7.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv7.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv7.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv7.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv7.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv7.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv7.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv7.Rows[0].Cells[8].Value = (c8 / (dgv7.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv7.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv7.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv7.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes8
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv8.Rows.Count - 1; i++)
            //{
            //    if (dgv8.Rows[i].Cells[1].Value != null && dgv8.Rows[i].Cells[1].Value.ToString() != "" && dgv8.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv8.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[2].Value != null && dgv8.Rows[i].Cells[2].Value.ToString() != "" && dgv8.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv8.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[3].Value != null && dgv8.Rows[i].Cells[3].Value.ToString() != "" && dgv8.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv8.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[4].Value != null && dgv8.Rows[i].Cells[4].Value.ToString() != "" && dgv8.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv8.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[5].Value != null && dgv8.Rows[i].Cells[5].Value.ToString() != "" && dgv8.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv8.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[6].Value != null && dgv8.Rows[i].Cells[6].Value.ToString() != "" && dgv8.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv8.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[7].Value != null && dgv8.Rows[i].Cells[7].Value.ToString() != "" && dgv8.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv8.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[8].Value != null && dgv8.Rows[i].Cells[8].Value.ToString() != "" && dgv8.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv8.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[9].Value != null && dgv8.Rows[i].Cells[9].Value.ToString() != "" && dgv8.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv8.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[10].Value != null && dgv8.Rows[i].Cells[10].Value.ToString() != "" && dgv8.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv8.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[11].Value != null && dgv8.Rows[i].Cells[11].Value.ToString() != "" && dgv8.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv8.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[12].Value != null && dgv8.Rows[i].Cells[12].Value.ToString() != "" && dgv8.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv8.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[13].Value != null && dgv8.Rows[i].Cells[13].Value.ToString() != "" && dgv8.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv8.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[14].Value != null && dgv8.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv8.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[15].Value != null && dgv8.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv8.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[15].Value != null && dgv8.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv8.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv8.Rows[i].Cells[16].Value != null && dgv8.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv8.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv8.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv8.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv8.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv8.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv8.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv8.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv8.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv8.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv8.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv8.Rows[0].Cells[13].Value = c13.ToString("C2");
            //    dgv8.Rows[0].Cells[14].Value = c14.ToString("N2");
            //    dgv8.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv8.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv8.Rows[0].Cells[8].Value = (c8 / (dgv8.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv8.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv8.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv8.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes9
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv9.Rows.Count - 1; i++)
            //{
            //    if (dgv9.Rows[i].Cells[1].Value != null && dgv9.Rows[i].Cells[1].Value.ToString() != "" && dgv9.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv9.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[2].Value != null && dgv9.Rows[i].Cells[2].Value.ToString() != "" && dgv9.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv9.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[3].Value != null && dgv9.Rows[i].Cells[3].Value.ToString() != "" && dgv9.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv9.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[4].Value != null && dgv9.Rows[i].Cells[4].Value.ToString() != "" && dgv9.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv9.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[5].Value != null && dgv9.Rows[i].Cells[5].Value.ToString() != "" && dgv9.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv9.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[6].Value != null && dgv9.Rows[i].Cells[6].Value.ToString() != "" && dgv9.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv9.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[7].Value != null && dgv9.Rows[i].Cells[7].Value.ToString() != "" && dgv9.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv9.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[8].Value != null && dgv9.Rows[i].Cells[8].Value.ToString() != "" && dgv9.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv9.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[9].Value != null && dgv9.Rows[i].Cells[9].Value.ToString() != "" && dgv9.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv9.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[10].Value != null && dgv9.Rows[i].Cells[10].Value.ToString() != "" && dgv9.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv9.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[11].Value != null && dgv9.Rows[i].Cells[11].Value.ToString() != "" && dgv9.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv9.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[12].Value != null && dgv9.Rows[i].Cells[12].Value.ToString() != "" && dgv9.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv9.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[13].Value != null && dgv9.Rows[i].Cells[13].Value.ToString() != "" && dgv9.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv9.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[14].Value != null && dgv9.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv9.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[15].Value != null && dgv9.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv9.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[15].Value != null && dgv9.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv9.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv9.Rows[i].Cells[16].Value != null && dgv9.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv9.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv9.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv9.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv9.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv9.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv9.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv9.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv9.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv9.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv9.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv9.Rows[0].Cells[13].Value = c13.ToString("C2");
            //    dgv9.Rows[0].Cells[14].Value = c14.ToString("N2");
            //    dgv9.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv9.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv9.Rows[0].Cells[8].Value = (c8 / (dgv9.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv9.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv9.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv9.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes10
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv10.Rows.Count - 1; i++)
            //{
            //    if (dgv10.Rows[i].Cells[1].Value != null && dgv10.Rows[i].Cells[1].Value.ToString() != "" && dgv10.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv10.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[2].Value != null && dgv10.Rows[i].Cells[2].Value.ToString() != "" && dgv10.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv10.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[3].Value != null && dgv10.Rows[i].Cells[3].Value.ToString() != "" && dgv10.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv10.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[4].Value != null && dgv10.Rows[i].Cells[4].Value.ToString() != "" && dgv10.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv10.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[5].Value != null && dgv10.Rows[i].Cells[5].Value.ToString() != "" && dgv10.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv10.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[6].Value != null && dgv10.Rows[i].Cells[6].Value.ToString() != "" && dgv10.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv10.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[7].Value != null && dgv10.Rows[i].Cells[7].Value.ToString() != "" && dgv10.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv10.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[8].Value != null && dgv10.Rows[i].Cells[8].Value.ToString() != "" && dgv10.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv10.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[9].Value != null && dgv10.Rows[i].Cells[9].Value.ToString() != "" && dgv10.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv10.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[10].Value != null && dgv10.Rows[i].Cells[10].Value.ToString() != "" && dgv10.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv10.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[11].Value != null && dgv10.Rows[i].Cells[11].Value.ToString() != "" && dgv10.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv10.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[12].Value != null && dgv10.Rows[i].Cells[12].Value.ToString() != "" && dgv10.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv10.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[13].Value != null && dgv10.Rows[i].Cells[13].Value.ToString() != "" && dgv10.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv10.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[14].Value != null && dgv10.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv10.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[15].Value != null && dgv10.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv10.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[15].Value != null && dgv10.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv10.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv10.Rows[i].Cells[16].Value != null && dgv10.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv10.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv10.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv10.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv10.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv10.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv10.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv10.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv10.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv10.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv10.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv10.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv10.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv10.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv10.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv10.Rows[0].Cells[8].Value = (c8 / (dgv10.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv10.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv10.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv10.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes11
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv11.Rows.Count - 1; i++)
            //{
            //    if (dgv11.Rows[i].Cells[1].Value != null && dgv11.Rows[i].Cells[1].Value.ToString() != "" && dgv11.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv11.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[2].Value != null && dgv11.Rows[i].Cells[2].Value.ToString() != "" && dgv11.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv11.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[3].Value != null && dgv11.Rows[i].Cells[3].Value.ToString() != "" && dgv11.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv11.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[4].Value != null && dgv11.Rows[i].Cells[4].Value.ToString() != "" && dgv11.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv11.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[5].Value != null && dgv11.Rows[i].Cells[5].Value.ToString() != "" && dgv11.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv11.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[6].Value != null && dgv11.Rows[i].Cells[6].Value.ToString() != "" && dgv11.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv11.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[7].Value != null && dgv11.Rows[i].Cells[7].Value.ToString() != "" && dgv11.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv11.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[8].Value != null && dgv11.Rows[i].Cells[8].Value.ToString() != "" && dgv11.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv11.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[9].Value != null && dgv11.Rows[i].Cells[9].Value.ToString() != "" && dgv11.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv11.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[10].Value != null && dgv11.Rows[i].Cells[10].Value.ToString() != "" && dgv11.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv11.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[11].Value != null && dgv11.Rows[i].Cells[11].Value.ToString() != "" && dgv11.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv11.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[12].Value != null && dgv11.Rows[i].Cells[12].Value.ToString() != "" && dgv11.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv11.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[13].Value != null && dgv11.Rows[i].Cells[13].Value.ToString() != "" && dgv11.Rows[i].Cells[13].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv11.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[14].Value != null && dgv11.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv11.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[15].Value != null && dgv11.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv11.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[15].Value != null && dgv11.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv11.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv11.Rows[i].Cells[16].Value != null && dgv11.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv11.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv11.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv11.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv11.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv11.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv11.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv11.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv11.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv11.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv11.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv11.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv11.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv11.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv11.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv11.Rows[0].Cells[8].Value = (c8 / (dgv11.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv11.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv11.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv11.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            //#region renglontotal mes12
            //c1 = 0;
            //c2 = 0;
            //c3 = 0;
            //c4 = 0;
            //c5 = 0;
            //c6 = 0;
            //c7 = 0;
            //c8 = 0;
            //c9 = 0;
            //c10 = 0;
            //c11 = 0;
            //c12 = 0;
            //c13 = 0;
            //c14 = 0;
            //c15 = 0;
            //c16 = 0;
            //c17 = 0;
            //for (int i = 1; i <= dgv12.Rows.Count - 1; i++)
            //{
            //    if (dgv12.Rows[i].Cells[1].Value != null && dgv12.Rows[i].Cells[1].Value.ToString() != "" && dgv12.Rows[i].Cells[1].Value.ToString() != "0")
            //    {
            //        c1 += double.Parse(dgv12.Rows[i].Cells[1].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c1 = c1 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[2].Value != null && dgv12.Rows[i].Cells[2].Value.ToString() != "" && dgv12.Rows[i].Cells[2].Value.ToString() != "0")
            //    {
            //        c2 += double.Parse(dgv12.Rows[i].Cells[2].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c2 = c2 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[3].Value != null && dgv12.Rows[i].Cells[3].Value.ToString() != "" && dgv12.Rows[i].Cells[3].Value.ToString() != "0")
            //    {
            //        c3 += double.Parse(dgv12.Rows[i].Cells[3].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c3 = c3 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[4].Value != null && dgv12.Rows[i].Cells[4].Value.ToString() != "" && dgv12.Rows[i].Cells[4].Value.ToString() != "0")
            //    {
            //        c4 += double.Parse(dgv12.Rows[i].Cells[4].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c4 = c4 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[5].Value != null && dgv12.Rows[i].Cells[5].Value.ToString() != "" && dgv12.Rows[i].Cells[5].Value.ToString() != "0")
            //    {
            //        c5 += double.Parse(dgv12.Rows[i].Cells[5].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c5 = c5 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[6].Value != null && dgv12.Rows[i].Cells[6].Value.ToString() != "" && dgv12.Rows[i].Cells[6].Value.ToString() != "0")
            //    {
            //        c6 += double.Parse(dgv12.Rows[i].Cells[6].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c6 = c6 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[7].Value != null && dgv12.Rows[i].Cells[7].Value.ToString() != "" && dgv12.Rows[i].Cells[7].Value.ToString() != "0")
            //    {
            //        c7 += double.Parse(dgv12.Rows[i].Cells[7].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c7 = c7 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[8].Value != null && dgv12.Rows[i].Cells[8].Value.ToString() != "" && dgv12.Rows[i].Cells[8].Value.ToString() != "0")
            //    {
            //        c8 += double.Parse(dgv12.Rows[i].Cells[8].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c8 = c8 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[9].Value != null && dgv12.Rows[i].Cells[9].Value.ToString() != "" && dgv12.Rows[i].Cells[9].Value.ToString() != "0")
            //    {
            //        c9 += double.Parse(dgv12.Rows[i].Cells[9].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c9 = c9 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[10].Value != null && dgv12.Rows[i].Cells[10].Value.ToString() != "" && dgv12.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c10 += double.Parse(dgv12.Rows[i].Cells[10].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c10 = c10 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[11].Value != null && dgv12.Rows[i].Cells[11].Value.ToString() != "" && dgv12.Rows[i].Cells[10].Value.ToString() != "0")
            //    {
            //        c11 += double.Parse(dgv12.Rows[i].Cells[11].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c11 = c11 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[12].Value != null && dgv12.Rows[i].Cells[12].Value.ToString() != "" && dgv12.Rows[i].Cells[12].Value.ToString() != "0")
            //    {
            //        c12 += double.Parse(dgv12.Rows[i].Cells[12].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c12 = c12 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[13].Value != null && dgv12.Rows[i].Cells[13].Value.ToString() != "" && dgv12.Rows[i].Cells[13].Value.ToString() != "0")
            //    {
            //        c13 += double.Parse(dgv12.Rows[i].Cells[13].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c13 = c13 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[14].Value != null && dgv12.Rows[i].Cells[14].Value.ToString() != "")
            //    {
            //        c14 += double.Parse(dgv12.Rows[i].Cells[14].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c14 = c14 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[15].Value != null && dgv12.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv12.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[15].Value != null && dgv12.Rows[i].Cells[15].Value.ToString() != "")
            //    {
            //        c15 += double.Parse(dgv12.Rows[i].Cells[15].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c15 = c15 + 0;
            //    }
            //    if (dgv12.Rows[i].Cells[16].Value != null && dgv12.Rows[i].Cells[16].Value.ToString() != "")
            //    {
            //        c16 += double.Parse(dgv12.Rows[i].Cells[16].Value.ToString(), NumberStyles.Currency);
            //    }
            //    else
            //    {
            //        c16 = c16 + 0;
            //    }
            //    dgv12.Rows[0].Cells[1].Value = c1.ToString("n0");
            //    dgv12.Rows[0].Cells[2].Value = c2.ToString("C2");
            //    dgv12.Rows[0].Cells[5].Value = c5.ToString("n0");
            //    dgv12.Rows[0].Cells[6].Value = c6.ToString("C2");
            //    dgv12.Rows[0].Cells[7].Value = c7.ToString("n0");
            //    dgv12.Rows[0].Cells[9].Value = c9.ToString("C2");
            //    dgv12.Rows[0].Cells[10].Value = c10.ToString("n0");
            //    dgv12.Rows[0].Cells[11].Value = c11.ToString("C2");
            //    dgv12.Rows[0].Cells[12].Value = c12.ToString("n0");
            //    dgv12.Rows[0].Cells[13].Value = c13.ToString();
            //    dgv12.Rows[0].Cells[14].Value = c14.ToString();
            //    dgv12.Rows[0].Cells[16].Value = c16.ToString("N2");

            //    dgv12.Refresh();
            //}
            //if (c8 >= 1)
            //{
            //    dgv12.Rows[0].Cells[8].Value = (c8 / (dgv12.Rows.Count - 1)).ToString("C2");
            //}
            //else
            //{
            //    dgv12.Rows[0].Cells[8].Value = "0";
            //}
            //if (c3 >= 1)
            //{
            //    c3 = c3 / dgv12.Rows.Count - 1;
            //}
            //else
            //{
            //    c3 = 0;
            //}
            //dgv12.Rows[0].Cells[3].Value = c3.ToString("C2");
            //#endregion
            #endregion
        }

        private void m_calcularTotalPeriodo(int dgv)
        {
            /////////////////////////////////
            double c1=0, c2=0, c3=0, c4=0, c5=0, c6=0, c7=0, c8=0, c10=0, c11=0, c12=0;
            #region renglon total
            switch (dgv)
            {
                case 1:
                    if (cantidadmes == 1)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv1.Rows[0].Cells[10].Value != null && dgv1.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv1.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv1.Rows[0].Cells[11].Value != null && dgv1.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv1.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv1.Rows[0].Cells[14].Value != null && dgv1.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv1.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                         this.Invoke(new Action(() =>
                        {
                        dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                        dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                        dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columnas iniciales
                     this.Invoke(new Action(() =>
                    {
                        if (dgv1.Rows[0].Cells[1].Value != null && dgv1.Rows[0].Cells[1].Value.ToString() != "")
                        {
                            c1 = double.Parse(dgv1.Rows[0].Cells[1].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            c1 = 0;
                        }
                    }));
                     this.Invoke(new Action(() =>
                     {
                        if (dgv1.Rows[0].Cells[2].Value != null && dgv1.Rows[0].Cells[2].Value.ToString() != "")
                        {
                            c2 = double.Parse(dgv1.Rows[0].Cells[2].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            c2 = 0;
                        }
                     }));
                     this.Invoke(new Action(() =>
                     {
                         if (dgv1.Rows[0].Cells[3].Value != null && dgv1.Rows[0].Cells[3].Value.ToString() != "")
                        {
                            c3 = double.Parse(dgv1.Rows[0].Cells[3].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            c3 = 0;
                        }
                     }));
                     this.Invoke(new Action(() =>
                     {
                        if (dgv1.Rows[0].Cells[4].Value != null && dgv1.Rows[0].Cells[4].Value.ToString() != "")
                        {
                            c4 = double.Parse(dgv1.Rows[0].Cells[4].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            c4 = double.Parse(dgv1.Rows[1].Cells[4].Value.ToString(), NumberStyles.Currency);
                        } 
                     }));

            #endregion
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if(dgvTotales.Rows[0].Cells[5].Value!=null&&dgvTotales.Rows[0].Cells[5].Value.ToString()!="")
                        {
                            if(dgv1.Rows[0].Cells[5].Value!=null&&dgv1.Rows[0].Cells[5].Value.ToString()!="")
                            {
                                c5=double.Parse(dgv1.Rows[0].Cells[5].Value.ToString(),NumberStyles.Currency)+double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(),NumberStyles.Currency);
                            }
                            else
                            {
                                c5=double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(),NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv1.Rows[0].Cells[5].Value != null && dgv1.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv1.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
#endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv1.Rows[0].Cells[6].Value != null && dgv1.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv1.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv1.Rows[0].Cells[6].Value != null && dgv1.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv1.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv1.Rows[0].Cells[7].Value != null && dgv1.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv1.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv1.Rows[0].Cells[7].Value != null && dgv1.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv1.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv1.Rows[0].Cells[9].Value != null && dgv1.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv1.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv1.Rows[0].Cells[9].Value != null && dgv1.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv1.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[1].Value = c1.ToString("N0");
                        dgvTotales.Rows[0].Cells[2].Value = c2.ToString("C2");
                        dgvTotales.Rows[0].Cells[3].Value = c3.ToString("C2");
                        dgvTotales.Rows[0].Cells[4].Value = c4.ToString("N0");
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");
                        
                    }));
                    #endregion

                    break;
                case 2:
                    if (cantidadmes == 2)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[0].Cells[10].Value != null && dgv2.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv2.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[0].Cells[11].Value != null && dgv2.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv2.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv2.Rows[0].Cells[14].Value != null && dgv2.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv2.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv2.Rows[0].Cells[5].Value != null && dgv2.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv2.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv2.Rows[0].Cells[5].Value != null && dgv2.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv2.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv2.Rows[0].Cells[6].Value != null && dgv2.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv2.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv2.Rows[0].Cells[6].Value != null && dgv2.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv2.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv2.Rows[0].Cells[7].Value != null && dgv2.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv2.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv2.Rows[0].Cells[7].Value != null && dgv2.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv2.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv2.Rows[0].Cells[9].Value != null && dgv2.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv2.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv2.Rows[0].Cells[9].Value != null && dgv2.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv2.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 3:
                    if (cantidadmes == 3)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[0].Cells[10].Value != null && dgv3.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv3.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[0].Cells[11].Value != null && dgv3.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv3.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv3.Rows[0].Cells[14].Value != null && dgv3.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv3.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv3.Rows[0].Cells[5].Value != null && dgv3.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv3.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv3.Rows[0].Cells[5].Value != null && dgv3.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv3.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv3.Rows[0].Cells[6].Value != null && dgv3.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv3.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv3.Rows[0].Cells[6].Value != null && dgv3.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv3.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv3.Rows[0].Cells[7].Value != null && dgv3.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv3.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv3.Rows[0].Cells[7].Value != null && dgv3.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv3.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv3.Rows[0].Cells[9].Value != null && dgv3.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv3.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv3.Rows[0].Cells[9].Value != null && dgv3.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv3.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 4:
                    if (cantidadmes == 4)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[0].Cells[10].Value != null && dgv4.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv4.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[0].Cells[11].Value != null && dgv4.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv4.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv4.Rows[0].Cells[14].Value != null && dgv4.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv4.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv4.Rows[0].Cells[5].Value != null && dgv4.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv4.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv4.Rows[0].Cells[5].Value != null && dgv4.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv4.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv4.Rows[0].Cells[6].Value != null && dgv4.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv4.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv4.Rows[0].Cells[6].Value != null && dgv4.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv4.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv4.Rows[0].Cells[7].Value != null && dgv4.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv4.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv4.Rows[0].Cells[7].Value != null && dgv4.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv4.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv4.Rows[0].Cells[9].Value != null && dgv4.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv4.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv4.Rows[0].Cells[9].Value != null && dgv4.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv4.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 5:
                    if (cantidadmes == 5)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[0].Cells[10].Value != null && dgv5.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv5.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[0].Cells[11].Value != null && dgv5.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv5.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv5.Rows[0].Cells[14].Value != null && dgv5.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv5.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv5.Rows[0].Cells[5].Value != null && dgv5.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv5.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv5.Rows[0].Cells[5].Value != null && dgv5.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv5.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv5.Rows[0].Cells[6].Value != null && dgv5.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv5.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv5.Rows[0].Cells[6].Value != null && dgv5.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv5.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv5.Rows[0].Cells[7].Value != null && dgv5.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv5.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv5.Rows[0].Cells[7].Value != null && dgv5.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv5.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv5.Rows[0].Cells[9].Value != null && dgv5.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv5.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv5.Rows[0].Cells[9].Value != null && dgv5.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv5.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 6:
                    if (cantidadmes == 6)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[0].Cells[10].Value != null && dgv6.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv6.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[0].Cells[11].Value != null && dgv6.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv6.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv6.Rows[0].Cells[14].Value != null && dgv6.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv6.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv6.Rows[0].Cells[5].Value != null && dgv6.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv6.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv6.Rows[0].Cells[5].Value != null && dgv6.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv6.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv6.Rows[0].Cells[6].Value != null && dgv6.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv6.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv6.Rows[0].Cells[6].Value != null && dgv6.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv6.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv6.Rows[0].Cells[7].Value != null && dgv6.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv6.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv6.Rows[0].Cells[7].Value != null && dgv6.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv6.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv6.Rows[0].Cells[9].Value != null && dgv6.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv6.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv6.Rows[0].Cells[9].Value != null && dgv6.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv6.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 7:
                    if (cantidadmes == 7)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[0].Cells[10].Value != null && dgv7.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv7.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[0].Cells[11].Value != null && dgv7.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv7.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv7.Rows[0].Cells[14].Value != null && dgv7.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv7.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv7.Rows[0].Cells[5].Value != null && dgv7.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv7.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv7.Rows[0].Cells[5].Value != null && dgv7.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv7.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv7.Rows[0].Cells[6].Value != null && dgv7.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv7.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv7.Rows[0].Cells[6].Value != null && dgv7.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv7.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv7.Rows[0].Cells[7].Value != null && dgv7.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv7.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv7.Rows[0].Cells[7].Value != null && dgv7.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv7.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv7.Rows[0].Cells[9].Value != null && dgv7.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv7.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv7.Rows[0].Cells[9].Value != null && dgv7.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv7.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 8:
                    if (cantidadmes == 8)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[0].Cells[10].Value != null && dgv8.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv8.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[0].Cells[11].Value != null && dgv8.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv8.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv8.Rows[0].Cells[14].Value != null && dgv8.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv8.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv8.Rows[0].Cells[5].Value != null && dgv8.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv8.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv8.Rows[0].Cells[5].Value != null && dgv8.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv8.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv8.Rows[0].Cells[6].Value != null && dgv8.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv8.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv8.Rows[0].Cells[6].Value != null && dgv8.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv8.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv8.Rows[0].Cells[7].Value != null && dgv8.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv8.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv8.Rows[0].Cells[7].Value != null && dgv8.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv8.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv8.Rows[0].Cells[9].Value != null && dgv8.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv8.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv8.Rows[0].Cells[9].Value != null && dgv8.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv8.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 9:
                    if (cantidadmes == 9)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[0].Cells[10].Value != null && dgv9.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv9.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[0].Cells[11].Value != null && dgv9.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv9.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv9.Rows[0].Cells[14].Value != null && dgv9.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv9.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv9.Rows[0].Cells[5].Value != null && dgv9.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv9.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv9.Rows[0].Cells[5].Value != null && dgv9.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv9.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv9.Rows[0].Cells[6].Value != null && dgv9.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv9.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv9.Rows[0].Cells[6].Value != null && dgv9.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv9.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv9.Rows[0].Cells[7].Value != null && dgv9.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv9.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv9.Rows[0].Cells[7].Value != null && dgv9.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv9.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv9.Rows[0].Cells[9].Value != null && dgv9.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv9.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv9.Rows[0].Cells[9].Value != null && dgv9.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv9.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 10:
                    if (cantidadmes == 10)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[0].Cells[10].Value != null && dgv10.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv10.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[0].Cells[11].Value != null && dgv10.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv10.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv10.Rows[0].Cells[14].Value != null && dgv10.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv10.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv10.Rows[0].Cells[5].Value != null && dgv10.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv10.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv10.Rows[0].Cells[5].Value != null && dgv10.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv10.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv10.Rows[0].Cells[6].Value != null && dgv10.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv10.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv10.Rows[0].Cells[6].Value != null && dgv10.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv10.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv10.Rows[0].Cells[7].Value != null && dgv10.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv10.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv10.Rows[0].Cells[7].Value != null && dgv10.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv10.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv10.Rows[0].Cells[9].Value != null && dgv10.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv10.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv10.Rows[0].Cells[9].Value != null && dgv10.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv10.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 11:
                    if (cantidadmes == 11)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[0].Cells[10].Value != null && dgv11.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv11.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[0].Cells[11].Value != null && dgv11.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv11.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv11.Rows[0].Cells[14].Value != null && dgv11.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv11.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                            dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                            dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                        }));
                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv11.Rows[0].Cells[5].Value != null && dgv11.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv11.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv11.Rows[0].Cells[5].Value != null && dgv11.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv11.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv11.Rows[0].Cells[6].Value != null && dgv11.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv11.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv11.Rows[0].Cells[6].Value != null && dgv11.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv11.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv11.Rows[0].Cells[7].Value != null && dgv11.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv11.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv11.Rows[0].Cells[7].Value != null && dgv11.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv11.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv11.Rows[0].Cells[9].Value != null && dgv11.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv11.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv11.Rows[0].Cells[9].Value != null && dgv11.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv11.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");

                    }));
                    #endregion
                    break;
                case 12:
                    if (cantidadmes == 12)
                    {
                        #region columnasFinales
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[0].Cells[10].Value != null && dgv12.Rows[0].Cells[10].Value.ToString() != "")
                            {
                                c10 = double.Parse(dgv12.Rows[0].Cells[10].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c10 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[0].Cells[11].Value != null && dgv12.Rows[0].Cells[11].Value.ToString() != "")
                            {
                                c11 = double.Parse(dgv12.Rows[0].Cells[11].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c11 = 0;
                            }
                        }));
                        this.Invoke(new Action(() =>
                        {
                            if (dgv12.Rows[0].Cells[14].Value != null && dgv12.Rows[0].Cells[14].Value.ToString() != "")
                            {
                                c12 = double.Parse(dgv12.Rows[0].Cells[14].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c12 = 0;
                            }
                        }));

                        #endregion
                    }
                    #region columna5
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[5].Value != null && dgvTotales.Rows[0].Cells[5].Value.ToString() != "")
                        {
                            if (dgv12.Rows[0].Cells[5].Value != null && dgv12.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv12.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = double.Parse(dgvTotales.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv12.Rows[0].Cells[5].Value != null && dgv12.Rows[0].Cells[5].Value.ToString() != "")
                            {
                                c5 = double.Parse(dgv12.Rows[0].Cells[5].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c5 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna6
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[6].Value != null && dgvTotales.Rows[0].Cells[6].Value.ToString() != "")
                        {
                            if (dgv12.Rows[0].Cells[6].Value != null && dgv12.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv12.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = double.Parse(dgvTotales.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv12.Rows[0].Cells[6].Value != null && dgv12.Rows[0].Cells[6].Value.ToString() != "")
                            {
                                c6 = double.Parse(dgv12.Rows[0].Cells[6].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c6 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna7
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[7].Value != null && dgvTotales.Rows[0].Cells[7].Value.ToString() != "")
                        {
                            if (dgv12.Rows[0].Cells[7].Value != null && dgv12.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv12.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = double.Parse(dgvTotales.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv12.Rows[0].Cells[7].Value != null && dgv12.Rows[0].Cells[7].Value.ToString() != "")
                            {
                                c7 = double.Parse(dgv12.Rows[0].Cells[7].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c7 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region columna8
                    this.Invoke(new Action(() =>
                    {
                        if (dgvTotales.Rows[0].Cells[8].Value != null && dgvTotales.Rows[0].Cells[8].Value.ToString() != "")
                        {
                            if (dgv12.Rows[0].Cells[9].Value != null && dgv12.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv12.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = double.Parse(dgvTotales.Rows[0].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }
                        }
                        else
                        {
                            if (dgv12.Rows[0].Cells[9].Value != null && dgv12.Rows[0].Cells[9].Value.ToString() != "")
                            {
                                c8 = double.Parse(dgv12.Rows[0].Cells[9].Value.ToString(), NumberStyles.Currency);
                            }
                            else
                            {
                                c8 = 0;
                            }
                        }
                    }));
                    #endregion
                    #region imprimir variables
                    this.Invoke(new Action(() =>
                    {
                        dgvTotales.Rows[0].Cells[5].Value = c5.ToString("N0");
                        dgvTotales.Rows[0].Cells[6].Value = c6.ToString("C2");
                        dgvTotales.Rows[0].Cells[7].Value = c7.ToString("N0");
                        dgvTotales.Rows[0].Cells[8].Value = c8.ToString("C2");
                        dgvTotales.Rows[0].Cells[9].Value = c10.ToString("N0");
                        dgvTotales.Rows[0].Cells[10].Value = c11.ToString("C2");
                        dgvTotales.Rows[0].Cells[11].Value = c12.ToString();
                    }));
                    #endregion
                    break;
            }
            #endregion
            if (solototal != true)
            {
                for (int x = 1; x <= dgvTotales.Rows.Count - 1; x++)
                {
                    #region renglon total
                    switch (dgv)
                    {
                        case 1:
                            if (cantidadmes == 1)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv1.Rows[x].Cells[10].Value != null && dgv1.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv1.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv1.Rows[x].Cells[11].Value != null && dgv1.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv1.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv1.Rows[x].Cells[14].Value != null && dgv1.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv1.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columnas iniciales
                            this.Invoke(new Action(() =>
                            {
                                if (dgv1.Rows[x].Cells[1].Value != null && dgv1.Rows[x].Cells[1].Value.ToString() != "")
                                {
                                    c1 = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                                }
                                else
                                {
                                    c1 = 0;
                                }
                            }));
                            this.Invoke(new Action(() =>
                            {
                                if (dgv1.Rows[x].Cells[2].Value != null && dgv1.Rows[x].Cells[2].Value.ToString() != "")
                                {
                                    c2 = double.Parse(dgv1.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                                }
                                else
                                {
                                    c2 = 0;
                                }
                            }));
                            this.Invoke(new Action(() =>
                            {
                                if (dgv1.Rows[x].Cells[3].Value != null && dgv1.Rows[x].Cells[3].Value.ToString() != "")
                                {
                                    c3 = double.Parse(dgv1.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                                }
                                else
                                {
                                    c3 = 0;
                                }
                            }));
                            this.Invoke(new Action(() =>
                            {
                                if (dgv1.Rows[x].Cells[4].Value != null && dgv1.Rows[x].Cells[4].Value.ToString() != "")
                                {
                                    c4 = double.Parse(dgv1.Rows[x].Cells[4].Value.ToString(), NumberStyles.Currency);
                                }
                                else
                                {
                                    c4 = double.Parse(dgv1.Rows[1].Cells[4].Value.ToString(), NumberStyles.Currency);
                                }
                            }));

                            #endregion
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv1.Rows[x].Cells[5].Value != null && dgv1.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv1.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv1.Rows[x].Cells[5].Value != null && dgv1.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv1.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv1.Rows[x].Cells[6].Value != null && dgv1.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv1.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv1.Rows[x].Cells[6].Value != null && dgv1.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv1.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv1.Rows[x].Cells[7].Value != null && dgv1.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv1.Rows[x].Cells[7].Value != null && dgv1.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv1.Rows[x].Cells[9].Value != null && dgv1.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv1.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv1.Rows[x].Cells[9].Value != null && dgv1.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv1.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[1].Value = c1.ToString("N0");
                                dgvTotales.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgvTotales.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgvTotales.Rows[x].Cells[4].Value = c4.ToString("N0");
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion

                            break;
                        case 2:
                            if (cantidadmes == 2)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv2.Rows[x].Cells[10].Value != null && dgv2.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv2.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv2.Rows[x].Cells[11].Value != null && dgv2.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv2.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv2.Rows[x].Cells[14].Value != null && dgv2.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv2.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv2.Rows[x].Cells[5].Value != null && dgv2.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv2.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv2.Rows[x].Cells[5].Value != null && dgv2.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv2.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv2.Rows[x].Cells[6].Value != null && dgv2.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv2.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv2.Rows[x].Cells[6].Value != null && dgv2.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv2.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv2.Rows[x].Cells[7].Value != null && dgv2.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv2.Rows[x].Cells[7].Value != null && dgv2.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv2.Rows[x].Cells[9].Value != null && dgv2.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv2.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv2.Rows[x].Cells[9].Value != null && dgv2.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv2.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 3:
                            if (cantidadmes == 3)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv3.Rows[x].Cells[10].Value != null && dgv3.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv3.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv3.Rows[x].Cells[11].Value != null && dgv3.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv3.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv3.Rows[x].Cells[14].Value != null && dgv3.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv3.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv3.Rows[x].Cells[5].Value != null && dgv3.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv3.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv3.Rows[x].Cells[5].Value != null && dgv3.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv3.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv3.Rows[x].Cells[6].Value != null && dgv3.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv3.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv3.Rows[x].Cells[6].Value != null && dgv3.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv3.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv3.Rows[x].Cells[7].Value != null && dgv3.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv3.Rows[x].Cells[7].Value != null && dgv3.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv3.Rows[x].Cells[9].Value != null && dgv3.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv3.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv3.Rows[x].Cells[9].Value != null && dgv3.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv3.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 4:
                            if (cantidadmes == 4)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv4.Rows[x].Cells[10].Value != null && dgv4.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv4.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv4.Rows[x].Cells[11].Value != null && dgv4.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv4.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv4.Rows[x].Cells[14].Value != null && dgv4.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv4.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv4.Rows[x].Cells[5].Value != null && dgv4.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv4.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv4.Rows[x].Cells[5].Value != null && dgv4.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv4.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv4.Rows[x].Cells[6].Value != null && dgv4.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv4.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv4.Rows[x].Cells[6].Value != null && dgv4.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv4.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv4.Rows[x].Cells[7].Value != null && dgv4.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv4.Rows[x].Cells[7].Value != null && dgv4.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv4.Rows[x].Cells[9].Value != null && dgv4.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv4.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv4.Rows[x].Cells[9].Value != null && dgv4.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv4.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 5:
                            if (cantidadmes == 5)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv5.Rows[x].Cells[10].Value != null && dgv5.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv5.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv5.Rows[x].Cells[11].Value != null && dgv5.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv5.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv5.Rows[x].Cells[14].Value != null && dgv5.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv5.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv5.Rows[x].Cells[5].Value != null && dgv5.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv5.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv5.Rows[x].Cells[5].Value != null && dgv5.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv5.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv5.Rows[x].Cells[6].Value != null && dgv5.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv5.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv5.Rows[x].Cells[6].Value != null && dgv5.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv5.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv5.Rows[x].Cells[7].Value != null && dgv5.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv5.Rows[x].Cells[7].Value != null && dgv5.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv5.Rows[x].Cells[9].Value != null && dgv5.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv5.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv5.Rows[x].Cells[9].Value != null && dgv5.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv5.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 6:
                            if (cantidadmes == 6)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv6.Rows[x].Cells[10].Value != null && dgv6.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv6.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv6.Rows[x].Cells[11].Value != null && dgv6.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv6.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv6.Rows[x].Cells[14].Value != null && dgv6.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv6.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv6.Rows[x].Cells[5].Value != null && dgv6.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv6.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv6.Rows[x].Cells[5].Value != null && dgv6.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv6.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv6.Rows[x].Cells[6].Value != null && dgv6.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv6.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv6.Rows[x].Cells[6].Value != null && dgv6.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv6.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv6.Rows[x].Cells[7].Value != null && dgv6.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv6.Rows[x].Cells[7].Value != null && dgv6.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv6.Rows[x].Cells[9].Value != null && dgv6.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv6.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv6.Rows[x].Cells[9].Value != null && dgv6.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv6.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 7:
                            if (cantidadmes == 7)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv7.Rows[x].Cells[10].Value != null && dgv7.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv7.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv7.Rows[x].Cells[11].Value != null && dgv7.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv7.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv7.Rows[x].Cells[14].Value != null && dgv7.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv7.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv7.Rows[x].Cells[5].Value != null && dgv7.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv7.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv7.Rows[x].Cells[5].Value != null && dgv7.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv7.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv7.Rows[x].Cells[6].Value != null && dgv7.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv7.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv7.Rows[x].Cells[6].Value != null && dgv7.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv7.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv7.Rows[x].Cells[7].Value != null && dgv7.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv7.Rows[x].Cells[7].Value != null && dgv7.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv7.Rows[x].Cells[9].Value != null && dgv7.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv7.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv7.Rows[x].Cells[9].Value != null && dgv7.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv7.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 8:
                            if (cantidadmes == 8)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv8.Rows[x].Cells[10].Value != null && dgv8.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv8.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv8.Rows[x].Cells[11].Value != null && dgv8.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv8.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv8.Rows[x].Cells[14].Value != null && dgv8.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv8.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv8.Rows[x].Cells[5].Value != null && dgv8.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv8.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv8.Rows[x].Cells[5].Value != null && dgv8.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv8.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv8.Rows[x].Cells[6].Value != null && dgv8.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv8.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv8.Rows[x].Cells[6].Value != null && dgv8.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv8.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv8.Rows[x].Cells[7].Value != null && dgv8.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv8.Rows[x].Cells[7].Value != null && dgv8.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv8.Rows[x].Cells[9].Value != null && dgv8.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv8.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv8.Rows[x].Cells[9].Value != null && dgv8.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv8.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 9:
                            if (cantidadmes == 9)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv9.Rows[x].Cells[10].Value != null && dgv9.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv9.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv9.Rows[x].Cells[11].Value != null && dgv9.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv9.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv9.Rows[x].Cells[14].Value != null && dgv9.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv9.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv9.Rows[x].Cells[5].Value != null && dgv9.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv9.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv9.Rows[x].Cells[5].Value != null && dgv9.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv9.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv9.Rows[x].Cells[6].Value != null && dgv9.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv9.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv9.Rows[x].Cells[6].Value != null && dgv9.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv9.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv9.Rows[x].Cells[7].Value != null && dgv9.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv9.Rows[x].Cells[7].Value != null && dgv9.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv9.Rows[x].Cells[9].Value != null && dgv9.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv9.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv9.Rows[x].Cells[9].Value != null && dgv9.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv9.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 10:
                            if (cantidadmes == 10)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv10.Rows[x].Cells[10].Value != null && dgv10.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv10.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv10.Rows[x].Cells[11].Value != null && dgv10.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv10.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv10.Rows[x].Cells[14].Value != null && dgv10.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv10.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv10.Rows[x].Cells[5].Value != null && dgv10.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv10.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv10.Rows[x].Cells[5].Value != null && dgv10.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv10.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv10.Rows[x].Cells[6].Value != null && dgv10.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv10.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv10.Rows[x].Cells[6].Value != null && dgv10.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv10.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv10.Rows[x].Cells[7].Value != null && dgv10.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv10.Rows[x].Cells[7].Value != null && dgv10.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv10.Rows[x].Cells[9].Value != null && dgv10.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv10.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv10.Rows[x].Cells[9].Value != null && dgv10.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv10.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 11:
                            if (cantidadmes == 11)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv11.Rows[x].Cells[10].Value != null && dgv11.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv11.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv11.Rows[x].Cells[11].Value != null && dgv11.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv11.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv11.Rows[x].Cells[14].Value != null && dgv11.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv11.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                    dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                    dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                                }));
                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv11.Rows[x].Cells[5].Value != null && dgv11.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv11.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv11.Rows[x].Cells[5].Value != null && dgv11.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv11.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv11.Rows[x].Cells[6].Value != null && dgv11.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv11.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv11.Rows[x].Cells[6].Value != null && dgv11.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv11.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv11.Rows[x].Cells[7].Value != null && dgv11.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv11.Rows[x].Cells[7].Value != null && dgv11.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv11.Rows[x].Cells[9].Value != null && dgv11.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv11.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv11.Rows[x].Cells[9].Value != null && dgv11.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv11.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");

                            }));
                            #endregion
                            break;
                        case 12:
                            if (cantidadmes == 12)
                            {
                                #region columnasFinales
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv12.Rows[x].Cells[10].Value != null && dgv12.Rows[x].Cells[10].Value.ToString() != "")
                                    {
                                        c10 = double.Parse(dgv12.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c10 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv12.Rows[x].Cells[11].Value != null && dgv12.Rows[x].Cells[11].Value.ToString() != "")
                                    {
                                        c11 = double.Parse(dgv12.Rows[x].Cells[11].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c11 = 0;
                                    }
                                }));
                                this.Invoke(new Action(() =>
                                {
                                    if (dgv12.Rows[x].Cells[14].Value != null && dgv12.Rows[x].Cells[14].Value.ToString() != "")
                                    {
                                        c12 = double.Parse(dgv12.Rows[x].Cells[14].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c12 = 0;
                                    }
                                }));

                                #endregion
                            }
                            #region columna5
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[5].Value != null && dgvTotales.Rows[x].Cells[5].Value.ToString() != "")
                                {
                                    if (dgv12.Rows[x].Cells[5].Value != null && dgv12.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv12.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = double.Parse(dgvTotales.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv12.Rows[x].Cells[5].Value != null && dgv12.Rows[x].Cells[5].Value.ToString() != "")
                                    {
                                        c5 = double.Parse(dgv12.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c5 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna6
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[6].Value != null && dgvTotales.Rows[x].Cells[6].Value.ToString() != "")
                                {
                                    if (dgv12.Rows[x].Cells[6].Value != null && dgv12.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv12.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = double.Parse(dgvTotales.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv12.Rows[x].Cells[6].Value != null && dgv12.Rows[x].Cells[6].Value.ToString() != "")
                                    {
                                        c6 = double.Parse(dgv12.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c6 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna7
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[7].Value != null && dgvTotales.Rows[x].Cells[7].Value.ToString() != "")
                                {
                                    if (dgv12.Rows[x].Cells[7].Value != null && dgv12.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = double.Parse(dgvTotales.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv12.Rows[x].Cells[7].Value != null && dgv12.Rows[x].Cells[7].Value.ToString() != "")
                                    {
                                        c7 = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c7 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region columna8
                            this.Invoke(new Action(() =>
                            {
                                if (dgvTotales.Rows[x].Cells[8].Value != null && dgvTotales.Rows[x].Cells[8].Value.ToString() != "")
                                {
                                    if (dgv12.Rows[x].Cells[9].Value != null && dgv12.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv12.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency) + double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = double.Parse(dgvTotales.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                                    }
                                }
                                else
                                {
                                    if (dgv12.Rows[x].Cells[9].Value != null && dgv12.Rows[x].Cells[9].Value.ToString() != "")
                                    {
                                        c8 = double.Parse(dgv12.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                                    }
                                    else
                                    {
                                        c8 = 0;
                                    }
                                }
                            }));
                            #endregion
                            #region imprimir variables
                            this.Invoke(new Action(() =>
                            {
                                dgvTotales.Rows[x].Cells[5].Value = c5.ToString("N0");
                                dgvTotales.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgvTotales.Rows[x].Cells[7].Value = c7.ToString("N0");
                                dgvTotales.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgvTotales.Rows[x].Cells[9].Value = c10.ToString("N0");
                                dgvTotales.Rows[x].Cells[10].Value = c11.ToString("C2");
                                dgvTotales.Rows[x].Cells[11].Value = c12.ToString();
                            }));
                            #endregion
                            break;
                    }
                    #endregion
                }
            }
        }

        private void m_CALCULOS(int grid, int mes, int ano)
        {
            mes = mes + 1;
            switch (grid)
            {
                case 1:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
                        double rotacionRow = double.Parse(dgv1.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv1.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv1.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(1, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(1, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(1, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(1, x, 11, importeSaldos[x].ToString("C2"));

                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 2:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
  double rotacionRow = double.Parse(dgv2.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv2.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                      

                        m_LLENAR_DGV(2, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(2, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(2, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(2, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 3:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
 double rotacionRow = double.Parse(dgv3.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv3.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       

                        m_LLENAR_DGV(3, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(3, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(3, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(3, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 4:
                    #region calculos dgv4
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv4.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv4.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(4, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(4, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(4, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(4, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 5:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv5.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv5.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(5, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(5, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(5, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(5, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 6:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv6.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv6.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);

                        }));
                        
                        m_LLENAR_DGV(6, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(6, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(6, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(6, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 7:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv7.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv7.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(7, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(7, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(7, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(7, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 8:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv8.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv8.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(8, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(8, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(8, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(8, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 9:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
 double rotacionRow = double.Parse(dgv9.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv9.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       

                        m_LLENAR_DGV(9, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(9, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(9, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(9, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 10:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv10.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv10.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(10, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(10, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(10, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(10, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 11:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
 double rotacionRow = double.Parse(dgv11.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv11.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       

                        m_LLENAR_DGV(11, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(11, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(11, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(11, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 12:
                    #region calculos dgv1
                    for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                    {
                        //double ventasT = 0;
                        //double proporcion = 0;
                        //double ventasmes = 0;
                        //double ventasmesP = 0;
                        #region
                        //#region ventasT
                        //string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                        //#endregion ventas
                        //#region ejecutar Ventas

                        //cmd = new MySqlCommand(q, Conn);
                        //reader = cmd.ExecuteReader();
                        //while (reader.Read())
                        //{
                        //    if (reader["cantidad"].ToString() != "")
                        //    {
                        //        ventasT = double.Parse(reader["cantidad"].ToString());
                        //    }
                        //    else { ventasT = 0; }
                        //}
                        //reader.Close();
                        //#endregion ejecutar query
                        //////////////////
                        //#region ventas
                        //string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                        //#endregion ventas
                        //#region ejecutar Ventas

                        //cmd = new MySqlCommand(querr, Conn);
                        //reader = cmd.ExecuteReader();
                        //while (reader.Read())
                        //{
                        //    if (reader["asignacionUP"].ToString() != "")
                        //    {
                        //        ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        //    }
                        //    else { ventasmesP = 0; }
                        //}
                        //reader.Close();

                        //#endregion ejecutar query
                        //////////////////
                        //#region ventas
                        //string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" +mes+ "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                        //#endregion ventas
                        //#region ejecutar Ventas
                        //cmd = new MySqlCommand(quer, Conn);
                        //reader = cmd.ExecuteReader();
                        //while (reader.Read())
                        //{
                        //    if (reader["cantidad"].ToString() != "")
                        //    {
                        //        cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        //    }
                        //    else { cantidadV[x] = 0; }
                        //    if (ventasT != 0 && cantidadV[x] != 0)
                        //    {
                        //        proporcion = cantidadV[x] / ventasT;
                        //        ventasmes = ventasmesP * proporcion;
                        //    }
                        //    else
                        //    {
                        //        ventasmes = 0;
                        //    }
                        //}
                        //reader.Close();

                        //#endregion ejecutar query
                        #endregion
                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv12.Rows[x].Cells[12].Value.ToString());

                        comprasU[x] = ((12 / rotacionRow) * (double.Parse(dgv1.Rows[x].Cells[7].Value.ToString()))) - double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv12.Rows[x].Cells[7].Value.ToString()); comprasI[x] = comprasU[x] * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        comprasI[x] = comprasU[x] * double.Parse(dgv12.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(12, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(12, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(12, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(12, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 13: break;

            }

        }

        private void m_CALCULOST(int grid, int mes, int ano)
        {
            mes = mes + 1;
            if (rotacionCed1 == 0)
            {
                rotacionCed1 = 1;
            }
            switch (grid)
            {
                case 1:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
                            
                        comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv1.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv1.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);

                        }));
                        
                        m_LLENAR_DGV(1, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(1, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(1, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(1, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 2:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(2, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(2, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(2, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(2, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 3:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));

                        

                        m_LLENAR_DGV(3, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(3, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(3, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(3, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 4:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(4, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(4, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(4, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(4, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 5:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
 comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);

                        }));

                       
                        m_LLENAR_DGV(5, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(5, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(5, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(5, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                ////
                case 6:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
 comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       

                        m_LLENAR_DGV(6, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(6, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(6, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(6, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 7:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
 comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);

                        }));
                       
                        m_LLENAR_DGV(7, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(7, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(7, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(7, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 8:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
 comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       

                        m_LLENAR_DGV(8, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(8, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(8, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(8, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 9:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(9, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(9, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(9, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(9, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 10:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
 comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));

                       

                        m_LLENAR_DGV(10, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(10, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(10, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(10, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 11:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(11, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(11, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(11, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(11, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 12:
                    #region calculos dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and V.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["Inventariodeseado"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        this.Invoke(new Action(() =>
                        {
comprasU[x] = ((cantidadmes / rotacionCed1) * (ventasmes)) - double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv12.Rows[x].Cells[7].Value.ToString()); comprasI[x] = comprasU[x] * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        

                        m_LLENAR_DGV(12, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(12, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(12, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(12, x, 11, importeSaldos[x].ToString("C2"));
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 13: break;

            }

        }

        private void M_cargargrid(bool Total)
        {
            m_ESTRUCTURA();
        }

        private void m_cifracontrol(int i)
        {
            double rotacion = 0, venta2 = 0, compras = 0, saldos = 0, venta1 = 0;
            int x = 0;
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            i--;
            this.Invoke(new Action(() =>
            {
                switch (i)
                {
                    case 1:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv1.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv1.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 2:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv2.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv2.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                            //dgv2.Rows[x].Cells[14].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 3:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv3.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv3.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                            //dgv3.Rows[x].Cells[14].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 4:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv4.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv4.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                            //dgv4.Rows[x].Cells[14].Value = rotacion.ToString("N2");

                        }
                        #endregion
                        break;
                    case 5:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv5.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv5.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 6:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv6.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv6.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 7:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv7.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv7.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 8:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv8.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv8.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 9:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv9.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv9.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 10:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv10.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv10.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 11:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv11.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv11.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                    case 12:
                        #region
                        for (; x <= dgv1.Rows.Count - 1; x++)
                        {
                            if (i == cantidadmes)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            compras = double.Parse(dgv12.Rows[x].Cells[5].Value.ToString());
                            saldos = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString());
                            venta1 = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString());
                            if (venta2 != 0 && (compras + saldos - venta1) != 0)
                            {
                                rotacion = (12 * venta2) / (compras + saldos - venta1);
                            }
                            else
                            {
                                rotacion = 0;
                            }
                            dgv12.Rows[x].Cells[16].Value = rotacion.ToString("N2");
                        }
                        #endregion
                        break;
                }
            }));

        }

        private void m_compraHistoricaParcial(int mes, int ano, int i, int dia)
        {
            int anoA = ano + 1;
            string q = "";
            int x = 0;
            int y = 0;
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            mes = mes + 1;
            switch (i)
            {
                case 1:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
                        double rotacionRow = double.Parse(dgv1.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv1.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv1.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(1, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(1, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(1, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(1, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 2:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv2.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv2.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(2, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(2, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(2, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(2, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 3:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv3.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv3.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(3, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(3, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(3, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(3, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 4:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
 double rotacionRow = double.Parse(dgv4.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv4.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(4, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(4, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(4, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(4, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 5:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv5.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv5.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(5, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(5, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(5, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(5, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 6:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
 double rotacionRow = double.Parse(dgv6.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv6.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(6, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(6, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(6, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(6, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 7:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
 double rotacionRow = double.Parse(dgv7.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv7.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(7, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(7, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(7, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(7, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 8:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
 double rotacionRow = double.Parse(dgv8.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv8.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                       
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(8, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(8, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(8, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(8, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 9:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + anoA + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + anoA + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv9.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv9.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(9, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(9, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(9, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(9, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 10:
                    #region calculos dgv1
                    for (; x <= dgv10.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv10.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv10.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(10, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(10, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(10, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(10, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 11:
                    #region calculos dgv1
                    for (; x <= dgv11.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv11.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv11.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(11, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(11, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(11, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(11, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 12:
                    #region calculos dgv1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        double ventasT = 0;
                        double proporcion = 0;
                        double ventasmes = 0;
                        double ventasmesP = 0;
                        #region ventasT
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                ventasT = double.Parse(reader["cantidad"].ToString());
                            }
                            else { ventasT = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                        #endregion ventas
                        #region ejecutar Ventas

                        cmd = new MySqlCommand(querr, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["asignacionUP"].ToString() != "")
                            {
                                ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                            }
                            else { ventasmesP = 0; }
                        }
                        reader.Close();

                        #endregion ejecutar query
                        ////////////////
                        #region ventas
                        string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                        #endregion ventas
                        #region ejecutar Ventas
                        cmd = new MySqlCommand(quer, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { cantidadV[x] = 0; }
                            if (ventasT != 0 && cantidadV[x] != 0)
                            {
                                proporcion = cantidadV[x] / ventasT;
                                ventasmes = ventasmesP * proporcion;
                            }
                            else
                            {
                                ventasmes = 0;
                            }
                        }
                        reader.Close();

                        #endregion ejecutar query

                        if (solocalzadowhere == "")
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        else
                        {
                            q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  " + queryExist[y];
                        }
                        m_REFRESH_DGV();
                        #region ejecutar Compras por mes
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader["cantidad"].ToString() != "")
                            {
                                unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                            }
                            else { unidadesrecibo[x] = 0; }
                            if (reader["importe"].ToString() != "")
                            {
                                costodscto[x] = double.Parse(reader["importe"].ToString());
                            }
                            else { costodscto[x] = 0; }
                        }
                        reader.Close();
                        #endregion ejecutar query

                        this.Invoke(new Action(() =>
                        {
double rotacionRow = double.Parse(dgv12.Rows[x].Cells[12].Value.ToString());
                        comprasU[x] = ((12 / rotacionRow) * (ventasmes)) - double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv12.Rows[x].Cells[7].Value.ToString());
                        comprasI[x] = comprasU[x] * double.Parse(dgv12.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                        if (comprasU[x] <= 0)
                        {
                            unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        }
                        if (unidadesSaldo[x] <= 0)
                        {
                            unidadesSaldo[x] = unidadesSaldo[x] * -1;
                        }
                        importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }));
                        
                        comprasU[x] = comprasU[x] + unidadesrecibo[x];
                        comprasI[x] = comprasI[x] + costodscto[x];
                        m_LLENAR_DGV(12, x, 5, comprasU[x].ToString("n0"));
                        m_LLENAR_DGV(12, x, 6, comprasI[x].ToString("C2"));
                        m_LLENAR_DGV(12, x, 10, unidadesSaldo[x].ToString("n0"));
                        m_LLENAR_DGV(12, x, 11, importeSaldos[x].ToString("C2"));
                        y++;
                    }
                    m_REFRESH_DGV();
                    #endregion
                    break;
            }
        }

        private void m_compraHistoricaParcialT(int mes, int ano, int i, int dia)
        {
            int anoA = ano + 1;
            string q = "";
            int x = 0;
            int y = 0;
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            mes = mes + 1;
            switch (i)
            {
                case 1:
                    #region calculos dgv1

                    double ventasT = 0;
                    double proporcion = 0;
                    double ventasmes = 0;
                    double ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv1.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes / rotacionRow) * (ventasmes)) - double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv1.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv1.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(1, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(1, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(1, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(1, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 2:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv2.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv2.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 3:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv3.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv3.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                   
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 4:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double  rotacionRow = double.Parse(dgv4.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv4.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                  
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 5:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv5.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv5.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 6:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv6.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv6.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                   
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 7:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv7.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv7.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 8:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
 double  rotacionRow = double.Parse(dgv8.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv8.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                 
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 9:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv9.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv9.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 10:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv10.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv10.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 11:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
double rotacionRow = double.Parse(dgv11.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv11.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
                case 12:
                    #region calculos dgv1

                    ventasT = 0;
                    proporcion = 0;
                    ventasmes = 0;
                    ventasmesP = 0;
                    #region ventasT
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            ventasT = double.Parse(reader["cantidad"].ToString());
                        }
                        else { ventasT = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                    #endregion ventas
                    #region ejecutar Ventas

                    cmd = new MySqlCommand(querr, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["asignacionUP"].ToString() != "")
                        {
                            ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                        }
                        else { ventasmesP = 0; }
                    }
                    reader.Close();

                    #endregion ejecutar query
                    ////////////////
                    #region ventas
                    quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1";
                    #endregion ventas
                    #region ejecutar Ventas
                    cmd = new MySqlCommand(quer, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { cantidadV[x] = 0; }
                        if (ventasT != 0 && cantidadV[x] != 0)
                        {
                            proporcion = cantidadV[x] / ventasT;
                            ventasmes = ventasmesP * proporcion;
                        }
                        else
                        {
                            ventasmes = 0;
                        }
                    }
                    reader.Close();

                    #endregion ejecutar query

                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "' AND f.`Dia` BETWEEN 1 AND " + dia + " ";
                    }
                    else
                    {
                        q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'  AND f.`Dia` BETWEEN 1 AND " + dia + "  ";
                    }
                    m_REFRESH_DGV();
                    #region ejecutar Compras por mes
                    cmd = new MySqlCommand(q, Conn);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader["cantidad"].ToString() != "")
                        {
                            unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                        }
                        else { unidadesrecibo[x] = 0; }
                        if (reader["importe"].ToString() != "")
                        {
                            costodscto[x] = double.Parse(reader["importe"].ToString());
                        }
                        else { costodscto[x] = 0; }
                    }
                    reader.Close();
                    #endregion ejecutar query

                    this.Invoke(new Action(() =>
                    {
 double rotacionRow = double.Parse(dgv12.Rows[x].Cells[12].Value.ToString());
                    comprasU[x] = ((cantidadmes /rotacionRow) * (ventasmes)) - double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + double.Parse(dgv12.Rows[x].Cells[7].Value.ToString());
                    comprasI[x] = comprasU[x] * double.Parse(dgv12.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                    if (comprasU[x] <= 0)
                    {
                        unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    else
                    {
                        unidadesSaldo[x] = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency) + comprasU[x] - double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                    }
                    if (unidadesSaldo[x] <= 0)
                    {
                        unidadesSaldo[x] = unidadesSaldo[x] * -1;
                    }
                    importeSaldos[x] = unidadesSaldo[x] * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                    }));
                   
                    comprasU[x] = comprasU[x] + unidadesrecibo[x];
                    comprasI[x] = comprasI[x] + costodscto[x];
                    m_LLENAR_DGV(i, x, 5, comprasU[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, comprasI[x].ToString("C2"));
                    m_LLENAR_DGV(i, x, 10, unidadesSaldo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 11, importeSaldos[x].ToString("C2"));
                    y++;
                    m_REFRESH_DGV();
                    #endregion
                    break;
            }
        }

        private void m_comprasHmescompleto(int mes, int ano, int i)
        {
            string q = "";
            int x = 0;
            int y = 0;
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            for (; x <= dgv1.Rows.Count - 1; x++)
            {
                if (solocalzadowhere == "")
                {
                    q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE F.`Mes`='" + mes + "' and f.anio='" + ano + "'   " + queryExist[y];
                }
                else
                {
                    q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'   " + queryExist[y];
                }
                if (solototal == true)
                {
                    q = "SELECT SUM(ctd) AS cantidad ,SUM(costo) AS importe FROM recibobase AS e INNER JOIN fecha AS F ON e.idfecha=F.idfecha INNER JOIN estarticulo AS v ON v.`IDARTICULO`=E.IDARTICULO WHERE v.iddivisiones=1 and F.`Mes`='" + mes + "' and f.anio='" + ano + "'   ";
                }
                m_REFRESH_DGV();
                #region ejecutar Compras por mes
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["cantidad"].ToString() != "")
                    {
                        unidadesrecibo[x] = double.Parse(reader["cantidad"].ToString());
                    }
                    else { unidadesrecibo[x] = 0; }
                    if (reader["importe"].ToString() != "")
                    {
                        costodscto[x] = double.Parse(reader["importe"].ToString());
                    }
                    else { costodscto[x] = 0; }
                    m_LLENAR_DGV(i, x, 5, unidadesrecibo[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 6, costodscto[x].ToString("C2"));
                }
                reader.Close();
                #endregion ejecutar query
                y++;
            }
        }

        #region metodos Drop
        private void m_drop_depto()
        {
            ////@est@
            int depS = -1;

            cbDepto.Items.Clear();
            cbDepto.Items.Add("Total");
            string[] texto = iddivision.Split('.');
            int i = 1;
            query = "SELECT descrip,iddepto from estdepartamento where visiblebp='1' and iddivisiones=1";
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    iddeptovarios = "and (e.iddepto= " + reader["iddepto"].ToString();
                }
                else
                {
                    iddeptovarios += " or e.iddepto=" + reader["iddepto"].ToString();
                }
                cbDepto.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["iddepto"].ToString();

                ////@est@
                if (seleccion_depto == Convert.ToInt32(reader["iddepto"]))
                    depS = i;

                i++;
            }
            reader.Close();
            iddeptovarios += ")";
            cbDepto.SelectedIndex = depS;
            cbDepto_index();
        }

        private void m_drop_division()
        {
            ////@est@
            int divS = -1;

            int i = 1;

            cbDivisiones.Items.Clear();
            cbDivisiones.Items.Add("Total");
            
            query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1' and iddivisiones=1";
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                cbDivisiones.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["iddivisiones"].ToString();

                ////@est@
                if (seleccion_division == Convert.ToInt32(reader["iddivisiones"]))
                    divS = i;

                i++;
            }
            reader.Close();
            cbDivisiones.SelectedIndex = divS;
            cbDivision_index();
        }

        private void m_drop_familia()
        {
            ////@est@
            int famS = -1;

            cbFamilia.Items.Clear();
            cbFamilia.Items.Add("Total");
            #region reiniciar V
            fam = "";
            linea = "";
            subl1 = "";
            subl2 = "";
            subl3 = "";
            subl4 = "";
            subl5 = "";
            subl6 = "";
            #endregion
            if (bandera_sucursal == false && bandera_division == false && bandera_depto==false)
            {
                cbFamilia.Items.Clear();
                cbFamilia.Items.Add("Total");
                int i = 1;
                query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1'  and iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {

                    cbFamilia.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idfamilia"].ToString();
                    if (seleccion_familia == Convert.ToInt32(reader["idfamilia"]))
                    { famS = i; }

                    i++;
                }
                reader.Close();
            }
            else
            {
                cbFamilia.Items.Clear();
                cbFamilia.Items.Add("Total");
                int i = 1;
                query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1' " + division + " " + depto + "";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idfamiliavarios = "and (e.idfamilia= " + reader["idfamilia"].ToString();
                    }
                    else
                    {
                        idfamiliavarios += " or e.idfamilia=" + reader["idfamilia"].ToString();
                    }
                    cbFamilia.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idfamilia"].ToString();
                    if (seleccion_familia == Convert.ToInt32(reader["idfamilia"]))
                    { famS = i; }
                    i++;
                }
                reader.Close();
                idfamiliavarios += ")";
            }
            cbFamilia.SelectedIndex = famS;
            cbFamilia_index();
        }

        private void m_drop_l1()
        {
            int l1S = -1;
            #region reiniciar V

            subl1 = "";
            subl2 = "";
            subl3 = "";
            subl4 = "";
            subl5 = "";
            subl6 = "";
            #endregion
            if (bandera_sucursal == false && bandera_division == false && bandera_depto == false && bandera_familia==false && bandera_linea==false)
            {
                cbL1.Items.Clear();
                cbL1.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idl1 from estl1 where visiblebp='1' and iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idl1varios = "and (e.idl1= " + reader["idl1"].ToString();
                    }
                    else
                    {
                        idl1varios += " or e.idl1=" + reader["idl1"].ToString();
                    }
                    cbL1.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idl1"].ToString();
                    if (seleccion_l1 == Convert.ToInt32(reader["idl1"]))
                    {l1S = i;}
                    i++;
                }
                idl1varios += ")";
                reader.Close();
            }
            else
            {
                cbL1.Items.Clear();
                cbL1.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idl1 from estl1 where visiblebp='1'" + division + " " + depto + " " + fam + " " + linea;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idl1varios = "and (e.idl1= " + reader["idl1"].ToString();
                    }
                    else
                    {
                        idl1varios += " or e.idl1=" + reader["idl1"].ToString();
                    }
                    cbL1.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idl1"].ToString();
                    if (seleccion_l1 == Convert.ToInt32(reader["idl1"]))
                    { l1S = i; }
                    i++;
                }
                idl1varios += ")";
                reader.Close();
            }
            cbL1.SelectedIndex = l1S;
            if (cbL1.Items.Count == 1)
            {
                cbL1.Items.Clear();
            }
            cbL1_index();
        }

        private void m_drop_l2()
        {
            ////@est@
            int l2S = -1;
            int i = 1;
            query = "SELECT descrip,idl2 from estl2 where visiblebp='1' " + division + " " + depto + " " + fam + " " + linea + " " + subl1;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl2varios = "and (e.idl2= " + reader["idl2"].ToString();
                }
                else
                {
                    idl2varios += " or e.idl2=" + reader["idl2"].ToString();
                }
                cbL2.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl2"].ToString();
                if (seleccion_l2 == Convert.ToInt32(reader["idl2"]))
                { l2S = i; }
                i++;
            }
            idl2varios += ")";
            reader.Close();
            cbL2.SelectedIndex = l2S;
            if (cbL2.Items.Count == 1)
            {
                cbL2.Items.Clear();
            }
            cbL2_index();
        }

        private void m_drop_l3()
        {
            ////@est@
            int l3S = -1;

            cbL3.Items.Clear();
            cbL3.Items.Add("Total");
            int i = 1;
               
            query = "SELECT descrip,idl3 from estl3 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl3varios = "and (e.idl3= " + reader["idl3"].ToString();
                }
                else
                {
                    idl3varios += " or e.idl3=" + reader["idl3"].ToString();
                }
                cbL3.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl3"].ToString();
                if (seleccion_l3 == Convert.ToInt32(reader["idl3"]))
                { l3S = i; }
                i++;
            }
            idl3varios += ")";
            reader.Close();
            cbL3.SelectedIndex = l3S;
            if (cbL3.Items.Count == 1)
            {
                cbL3.Items.Clear();
            }
            cbL3_index();
        }

        private void m_drop_l4()
        {
            ////@est@
            int l4S = -1;

            cbL4.Items.Clear();
            cbL4.Items.Add("Total");
            int i = 1;
                
            query = "SELECT descrip,idl4 from estl4 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl4varios = "and (e.idl4= " + reader["idl4"].ToString();
                }
                else
                {
                    idl4varios += " or e.idl4=" + reader["idl4"].ToString();
                }
                cbL4.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl4"].ToString();
                if (seleccion_l4 == Convert.ToInt32(reader["idl4"]))
                { l4S = i; }
                i++;
            }
            reader.Close();
            idl4varios += ")";
            cbL4.SelectedIndex = l4S;
            if (cbL4.Items.Count == 1)
            {
                cbL4.Items.Clear();
            }
            cbL4_index();
        }

        private void m_drop_l5()
        {
            ////@est@
            int l5S = -1;

            cbL5.Items.Clear();
            cbL5.Items.Add("Total");
            int i = 1;
            query = "SELECT descrip,idl5 from estl5 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl5varios = "and (e.idl5= " + reader["idl5"].ToString();
                }
                else
                {
                    idl5varios += " or e.idl5=" + reader["idl5"].ToString();
                }
                cbL5.Items.Add(reader["descrip"].ToString());
                idd[i] = reader["idl5"].ToString();
                if (seleccion_l5 == Convert.ToInt32(reader["idl5"]))
                { l5S = i; }
                i++;
            }
            idl5varios += ")";
            reader.Close();
            cbL5.SelectedIndex = l5S;
            if (cbL5.Items.Count == 1)
            {
                cbL5.Items.Clear();
            }
            cbL5_index();
        }

        private void m_drop_l6()
        {
            ////@est@
            int l6S = -1;

            cbL6.Items.Clear();
            cbL6.Items.Add("Total");
            int i = 1;
            query = "SELECT descrip,idl6 from estl6 where visiblebp='1'" + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4 + " " + subl5;
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (i == 1)
                {
                    idl6varios = "and (e.idl6= " + reader["idl6"].ToString();
                }
                else
                {
                    idl6varios += " or e.idl6=" + reader["idl6"].ToString();
                }
                cbL6.Items.Add(reader["descrip"].ToString());
                if (seleccion_l6 == Convert.ToInt32(reader["idl6"]))
                { l6S = i; }
                idd[i] = reader["idl6"].ToString();
                i++;
            }
           
            reader.Close();
            idl6varios += ")";
            cbL6.SelectedIndex = l6S;
            if (cbL6.Items.Count == 1)
            {
                cbL6.Items.Clear();
            }
            cbL6_index();  
        }

        private void m_drop_linea()
        {
            ////@est@
            int linS = -1;
            #region reiniciar V
            linea = "";
            subl1 = "";
            subl2 = "";
            subl3 = "";
            subl4 = "";
            subl5 = "";
            subl6 = "";
            #endregion
            if (bandera_sucursal == false && bandera_division == false && bandera_depto == false && bandera_familia == false)
            {
                cbLinea.Items.Clear();
                cbLinea.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idlinea from estlinea where visiblebp='1' and iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idlineavarios = "and (e.idlinea= " + reader["idlinea"].ToString();
                    }
                    else
                    {
                        idlineavarios += " or e.idlinea=" + reader["idlinea"].ToString();
                    }
                    cbLinea.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idlinea"].ToString();
                    if (seleccion_linea == Convert.ToInt32(reader["idlinea"]))
                    { linS = i; }
                    i++;
                }
                reader.Close();
                idlineavarios += ")";
            }
            else
            {
                cbLinea.Items.Clear();
                cbLinea.Items.Add("Total");
                int i = 1;

                query = "SELECT descrip,idlinea from estlinea where visiblebp='1' " + division + " " + depto + "" + " " + fam;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idlineavarios = "and (e.idlinea= " + reader["idlinea"].ToString();
                    }
                    else
                    {
                        idlineavarios += " or e.idlinea=" + reader["idlinea"].ToString();
                    }
                    cbLinea.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["idlinea"].ToString();
                    if (seleccion_linea == Convert.ToInt32(reader["idlinea"]))
                    { linS = i; }
                    i++;
                }
                reader.Close();
                idlineavarios += ")";
            }

            cbLinea.SelectedIndex = linS;
            cbLinea_index();
        }

        private void m_drop_marca()
        {
            ////@est@
            int marcaS = -1;
            if (bandera_sucursal == false && bandera_division == false && bandera_depto == false && bandera_familia == false && bandera_linea == false && bandera_l1 == false && bandera_l2 == false && bandera_l3 == false && bandera_l4 == false && bandera_l5 == false && bandera_l6 == false && bandera_marca==false)
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        marcavarios = "and (e.marca= '" + reader["marca"].ToString() + "'";
                    }
                    else
                    {
                        marcavarios += " or e.marca='" + reader["marca"].ToString() + "'";
                    }
                    cbMarca.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["marca"].ToString();
                    if (seleccion_marca == reader["marca"].ToString())
                    { marcaS = i; }
                    i++;
                }
                reader.Close();
                total = true;
            }
            if (bandera_l5 == true && bandera_l6 == true)
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1 " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        marcavarios = "and (e.marca='" + reader["marca"].ToString() + "'";
                    }
                    else
                    {
                        marcavarios += " or e.marca='" + reader["marca"].ToString() + "'";
                    }
                    cbMarca.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["marca"].ToString();
                    if (seleccion_marca == reader["marca"].ToString())
                    { marcaS = i; }
                    i++;
                }
                reader.Close();
                total = true;
            }
            if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1" + iddeptovarios;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        marcavarios = "and (e.marca='" + reader["marca"].ToString() + "'";
                    }
                    else
                    {
                        marcavarios += " or e.marca='" + reader["marca"].ToString() + "'";
                    }
                    cbMarca.Items.Add(reader["descrip"].ToString());
                    idd[i] = reader["marca"].ToString();
                    if (seleccion_marca == reader["marca"].ToString())
                    { marcaS = i; }
                    i++;
                }
                reader.Close();
                total = true;
            }
            if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_familia == true && bandera_linea == true && bandera_l1 == true && bandera_l2 == false)
            {
                cbMarca.Items.Clear();
                cbMarca.Items.Add("Total");
                int i = 1;
                query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as v on v.marca=m.marca where visiblebp=1 and v.iddivisiones=1 " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios;
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        marcavarios = "and (e.marca='" + reader["marca"].ToString() + "'";
                    }
                    else
                    {
                        marcavarios += " or e.marca='" + reader["marca"].ToString() + "'";
                    }
                    cbMarca.Items.Add(reader["descrip"].ToString());
                    if (seleccion_marca == reader["marca"].ToString())
                    { marcaS = i; }
                    idd[i] = reader["marca"].ToString();
                    i++;
                }
                reader.Close();
                total = true;
            }
            marcavarios += ")";
            if (seleccion_marca == "0") { marcaS = 0; }
            cbMarca.SelectedIndex = marcaS;
            cbMarca_index();
        }

        private void m_drop_sucursales()
        {
            #region reiniciar valores
            lbsucursal.Text = "Sucursal";
            lbDivision.Text = "Division";
            lbdepartamento.Text = "Departamento";
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idsucursal = " ";
            idsucursal = " ";
            iddivision = " ";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            ////@est@
            int sucS = -1;

               
                #region reiniciar valores
                lbsucursal.Text = "Sucursal";
                lbDivision.Text = "Division";
                lbdepartamento.Text = "Departamento";
                lbfamilia.Text = "Familia";
                lblinea.Text = "Linea";
                lbl1.Text = "L1";
                lbL2.Text = "L2";
                lbL3.Text = "L3";
                lbL4.Text = "L4";
                lbL5.Text = "L5";
                lbL6.Text = "L6";
                lbMarca.Text = "Marca";
                idsucursal = " ";
                idsucursal = " ";
                iddivision = " ";
                iddepto = " ";
                idfamilia = " ";
                idlinea = " ";
                idl1 = " ";
                idl2 = " ";
                idl3 = " ";
                idl4 = " ";
                idl5 = " ";
                idl6 = " ";
                marca = " ";
                #endregion
                cbSucursales.Items.Clear();
                cbSucursales.Items.Add("Total");
                int i = 1;
                query = "SELECT descrip,idsucursal from sucursal where visible='S'";
                cmd = new MySqlCommand(query, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (i == 1)
                    {
                        idsucursalvarios = "and (V.idsucursal= " + reader["idsucursal"].ToString();
                    }
                    else
                    {
                        idsucursalvarios += " or V.idsucursal=" + reader["idsucursal"].ToString();
                    }
                    this.Invoke(new Action(() =>
                    {
                        cbSucursales.Items.Add(reader["descrip"].ToString());
                    }));
                    idd[i] = reader["idsucursal"].ToString();
                    if (seleccion_sucursal == Convert.ToInt32(reader["idsucursal"]))
                    { sucS = i; }
                    i++;
                }
                idsucursalvarios += ")";
                reader.Close();
                cbSucursales.SelectedIndex = sucS;
        }
        #region  selected index combos
        private void cbSucursales_index()
        {
            soloSuc = true;
            bandera_sucursal = true;
            #region banderas
            bandera_division = false;
            bandera_depto = false;
            bandera_familia = false;
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_division = -1;
            seleccion_depto = -1;
            seleccion_familia = -1;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbDivision.Text = "Division";
            lbdepartamento.Text = "Departamento";
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idsucursal = " ";
            iddivision = " ";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            s = ",-1"; d = ",-1"; dd = ",-1"; f = ",-1"; l = ",-1"; l1 = ",-1"; l2 = ",-1"; l3 = ",-1"; l4 = ",-1"; l5 = ",-1"; l6 = ",-1"; m = ",'-1'";
            #endregion
            if (seleccion_sucursal!=0)
            {
                seleccion_sucursal = Convert.ToInt32(idd[cbSucursales.SelectedIndex]);

                idsucursal = " and V.idsucursal=" + idd[cbSucursales.SelectedIndex];
                wherequery[0] = "and V.idsucursal=" + idd[cbSucursales.SelectedIndex] + " " + solocalzadowhere;
                total = false;
                string[] texto = cbSucursales.Text.Split('=');
                lbsucursal.Text = "Sucursal=" + texto[0];
                query = "SELECT descrip,idsucursal from sucursal where visible='S' and idsucursal=" + idd[cbSucursales.SelectedIndex] + "";
                queryguardar[0] = "," + idd[cbSucursales.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                idsucursalvarios = "and V.idsucursal=" + idd[cbSucursales.SelectedIndex];
                s = "," + idd[cbSucursales.SelectedIndex];
                querycargar[0] = "and idsucursal=" + idd[cbSucursales.SelectedIndex] + " and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'";
                queryplazo[0] = " ";
                queryExist[0] = "and E.idsucursal=" + idd[cbSucursales.SelectedIndex];
                sucursalcargar = "and idsucursal=" + idd[cbSucursales.SelectedIndex] + "";
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "'" + querycargar[0];
                groupby = "idsucursal";
                where = "";
                whereLeft = idsucursal;
            }
            else
            {
                where = "";
                groupby = " idsucursal";
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "select * from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                idsucursalvarios = "and (V.IDSUCURSAL= '01' OR V.IDSUCURSAL='02' OR V.IDSUCURSAL='06' OR V.IDSUCURSAL='08')";
                for (int i = 0; i <= cbSucursales.Items.Count - 1; i++)
                {
                    querycargar[i] = "and idsucursal=" + idd[(i + 1)] + " and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idsucursal = "and V.idsucursal= " + idd[(i + 1)];
                    wherequery[i] = "and V.idsucursal=" + idd[(i + 1)] + " " + solocalzadowhere;
                    queryguardar[i] = "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                    queryplazo[i] = " ";
                    queryExist[i] = "and E.idsucursal=" + idd[(i + 1)];
                }
                lbsucursal.Text = "Sucursal=Total";
                query = "SELECT descrip,idsucursal from sucursal where visible='S'";
                total = true;
                s = ",0";
                sucursalcargar = "and idsucursal=0";
                seleccion_sucursal = 0;
            }
            solototal = false;
        }
        private void cbDivision_index()
        {
            soloSuc = false;
            bandera_division = true;
            #region banderas
            bandera_depto = false;
            bandera_familia = false;
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_depto = -1;
            seleccion_familia = -1;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbdepartamento.Text = "Departamento";
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            iddivision = " ";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            d = ",-1"; dd = ",-1"; f = ",-1"; l = ",-1"; l1 = ",-1"; l2 = ",-1"; l3 = ",-1"; l4 = ",-1"; l5 = ",-1"; l6 = ",-1"; m = ",'-1'";
            #endregion

            if (seleccion_division!=0)
            {
                seleccion_division = Convert.ToInt32(idd[cbDivisiones.SelectedIndex]);

                iddivision = "and V.iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                total = false;
                string[] texto = cbDivisiones.Text.Split('=');
                lbDivision.Text = "Division=" + texto[0];
                query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1' and iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivision;
                iddivisionesvarios = iddivision;
                division = "and iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                queryguardar[0] = s + "," + idd[cbDivisiones.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                querycargar[0] = sucursalcargar + " and iddivisiones=" + idd[cbDivisiones.SelectedIndex] + " and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                d = "," + idd[cbDivisiones.SelectedIndex];
                queryplazo[0] = "Where V.iddivisiones=" + idd[cbDivisiones.SelectedIndex];
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivision;
                divisioncargar = "and iddivisiones=" + idd[cbDivisiones.SelectedIndex] + "";
                if (solocalzadoDropdown != " ")
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " and iddivisiones=-1";
                }
                else
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                }
                groupby = "iddivisiones";
                where = "  e.iddivisiones=1";
                whereLeft = idsucursalvarios;
                iddivisionesvarios = "e.iddivisiones=1";
            }
            else
            {
                groupby = "iddivisiones";
                where = "  e.iddivisiones=1";
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar;
                iddivision = " ";
                iddivisionesvarios = " e.iddivisiones=1 ";
                division = " ";
                for (int i = 0; i <= cbDivisiones.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " and iddivisiones=" + idd[(i + 1)] + " and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    iddivision = "and V.iddivisiones=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivision;
                    queryguardar[i] = s + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                    queryplazo[i] = "Where V.iddivisiones=" + idd[(i + 1)];
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivision;
                }
                lbDivision.Text = "Division=Total";
                total = true;
                //query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1'";
                d = ",0";
                divisioncargar = "and iddivisiones=0";
                seleccion_division = 0;
                if (solocalzadoDropdown != " and iddivisiones=1")
                {
                    query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1'";

                }
                else
                {
                    query = "SELECT descrip,iddivisiones from estdivisiones where visiblebp='1' and iddivisiones=1";

                }
            }
            solototal = false;
        }
        private void cbDepto_index()
        {
            soloSuc = false;
            bandera_depto = true;
            #region banderas
            bandera_familia = false;
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_familia = -1;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            iddepto = " ";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (seleccion_depto!=0)
            {
                seleccion_depto = Convert.ToInt32(idd[cbDepto.SelectedIndex]);

                iddepto = "and V.iddepto=" + idd[cbDepto.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddepto;
                iddeptovarios = iddepto;
                total = false;
                string[] texto = cbDepto.Text.Split('=');
                lbdepartamento.Text = "Departamento=" + texto[0];
                query = "SELECT descrip,iddepto from estdepartamento where visiblebp='1' and iddepto=" + idd[cbDepto.SelectedIndex];
                depto = "and iddepto=" + idd[cbDepto.SelectedIndex];
                queryguardar[0] = s + " " + d + "," + idd[cbDepto.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                dd = "," + idd[cbDepto.SelectedIndex];
                querycargar[0] = sucursalcargar + " " + divisioncargar + " and iddepto=" + idd[cbDepto.SelectedIndex] + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                queryplazo[0] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddepto;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddepto;
                departamentocargar = "and iddepto=" + idd[cbDepto.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "iddepto";
                where = "  e.iddivisiones=1 " + iddepto;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "iddepto";
                where = " e.iddivisiones=1";
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " and iddepto=-1";
                iddepto = " ";
                iddeptovarios = " ";
                for (int i = 0; i <= cbDepto.Items.Count - 1; i++)
                {
                    iddepto = "and V.iddepto=" + idd[(i + 1)];

                    if (bandera_sucursal==false&&bandera_division==false)
                    {
                        wherequery[i] = iddepto + " and v.iddivisiones=1";
                        queryguardar[i] = ",-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=" + idd[(i + 1)] + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        queryplazo[i] = "Where V.iddivisiones=1 " + iddepto;
                        queryExist[i] = " and v.iddivisiones=1 " + iddepto;
                    }
                    else
                    {
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " and iddepto=" + idd[(i + 1)] + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + " " + iddepto;
                        queryguardar[i] = s + " " + d + " ," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,-1,'-1'";
                        queryplazo[i] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddepto;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddepto;
                    }
                }
                total = true;
                lbdepartamento.Text = "Departamento=Total";
                depto = " ";
                dd = ",0";
                departamentocargar = "and iddepto=0";
                seleccion_depto = 0;
                solototal = false;
            }
        }
        private void cbFamilia_index()
        {
            soloSuc = false;
            bandera_familia = true;
            #region banderas
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbfamilia.Text = "Familia";
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idfamilia = " ";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (seleccion_familia!=0)
            {
                seleccion_familia = Convert.ToInt32(idd[cbFamilia.SelectedIndex]);

                idfamilia = "and V.idfamilia=" + idd[cbFamilia.SelectedIndex];
                idfamiliavarios = idfamilia;
                total = false;
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                string[] texto = cbFamilia.Text.Split('=');
                lbfamilia.Text = "Familia=" + texto[0].ToString();
                query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1' and idfamilia=" + idd[cbFamilia.SelectedIndex] + "";
                fam = "and idfamilia=" + idd[cbFamilia.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + "," + idd[cbFamilia.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,-1,'-1'";
                f = "," + idd[cbFamilia.SelectedIndex];
                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=" + idd[cbFamilia.SelectedIndex] + " and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                queryplazo[0] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamilia;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                familiacargar = "and idfamilia=" + idd[cbFamilia.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idfamilia";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                whereLeft = idsucursalvarios;
            }
            else
            {
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + " and idfamilia=-1";
                idfamiliavarios = " ";
                for (int i = 0; i <= cbFamilia.Items.Count - 1; i++)
                {


                    if (bandera_sucursal==false && bandera_division==false && bandera_depto==false)
                    {
                        idfamilia = "and V.idfamilia=" + idd[(i + 1)];

                        queryplazo[i] = "Where V.iddivisiones=1  " + idfamilia;
                        queryExist[i] = " and v.iddivisiones=1 " + idfamilia;
                        wherequery[i] = idfamilia + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=" + idd[(i + 1)] + " and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1'  and iddivisiones=1";

                    }
                    else
                    {
                        idfamilia = "and V.idfamilia=" + idd[(i + 1)];
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                        queryguardar[i] = s + " " + d + " " + dd + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=" + idd[(i + 1)] + " and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryplazo[i] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamilia;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamilia;
                        query = "SELECT descrip,idfamilia from estfamilia where visiblebp='1' " + division + " " + depto;
                        groupby = "idfamilia";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios;
                        whereLeft = idsucursalvarios;
                    }
                }
                total = true;
                lbfamilia.Text = "Familia=Total";
                fam = " ";
                f = ",0";
                familiacargar = "and idfamilia=0";
                seleccion_familia = 0;
            }
            solototal = false;
        }
        private void cbLinea_index()
        {
            soloSuc = false;
            bandera_linea = true;
            #region banderas
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lblinea.Text = "Linea";
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idlinea = " ";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (seleccion_linea!=0)
            {
                seleccion_linea = Convert.ToInt32(idd[cbLinea.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " and idlinea=" + idd[cbLinea.SelectedIndex] + " and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idlinea = "and V.idlinea=" + idd[cbLinea.SelectedIndex];
                idlineavarios = idlinea;
                total = false;
                string[] texto = cbLinea.Text.Split('=');
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                query = "SELECT descrip,idlinea from estlinea where visiblebp='1' and idlinea=" + idd[cbLinea.SelectedIndex] + "";
                linea = "and idlinea=" + idd[cbLinea.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + "," + idd[cbLinea.SelectedIndex] + ",-1,-1,-1,-1,-1,-1,'-1'";
                l = "," + idd[cbLinea.SelectedIndex];
                queryplazo[0] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea; lineacargar = "and idlinea=" + idd[cbLinea.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idlinea";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idlinea";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " and idlinea=-1";
                idlineavarios = " ";
                for (int i = 0; i <= cbLinea.Items.Count - 1; i++)
                {


                    if (bandera_sucursal == false && bandera_division == false && bandera_depto == false && bandera_familia==false)
                    {
                        idlinea = "and V.idlinea=" + idd[(i + 1)];
                        wherequery[i] = idlinea + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=" + idd[(i + 1)] + " and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT descrip,idlinea from estlinea where visiblebp='1' and iddivisiones=1";
                        queryplazo[i] = "Where V.iddivisiones=1 " + idlinea;
                        queryExist[i] = " and v.iddivisiones=1 " + idlinea;

                    }
                    else
                    {
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " and idlinea=" + idd[(i + 1)] + " and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        idlinea = "and V.idlinea=" + idd[(i + 1)];
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                        queryguardar[i] = s + "  " + d + " " + dd + " " + f + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,-1,'-1'";
                        queryplazo[i] = "Where V.iddivisiones=" + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlinea;
                        query = "SELECT descrip,idlinea from estlinea where visiblebp='1' " + division + " " + depto + "" + " " + fam;
                    }
                }
                total = true;
                linea = " ";
                l = ",0";
                lineacargar = "and idlinea=0";
                seleccion_linea = 0;
            }
            lblinea.Text = "Linea=" + cbLinea.Text;
            solototal = false;
        }
        private void cbL1_index()
        {
            soloSuc = false;
            bandera_l1 = true;
            #region banderas
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbl1.Text = "L1";
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl1 = " ";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion

            if (seleccion_l1!=0)
            {
                seleccion_l1 = int.Parse(idd[cbL1.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " and idl1=" + idd[cbL1.SelectedIndex] + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl1 = "and V.idl1=" + idd[cbL1.SelectedIndex];
                idl1varios = idl1;
                string[] texto = cbL1.Text.Split('=');
                total = false;
                lbl1.Text = "L1=" + texto[0].ToString();
                query = "SELECT descrip,idl1 from estl1 where visiblebp='1' and idl1=" + idd[cbL1.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                subl1 = "and idl1=" + idd[cbL1.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + "," + idd[cbL1.SelectedIndex] + ",-1,-1,-1,-1,-1,'-1'";
                l1 = "," + idd[cbL1.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                l1cargar = "and idl1=" + idd[cbL1.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl1";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl1";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " and idl1=-1";
                for (int i = 0; i <= cbL1.Items.Count - 1; i++)
                {

                    if (bandera_sucursal == false && bandera_division == false && bandera_depto == false && bandera_familia == false&&bandera_linea==false)
                    {
                        idl1 = "and V.idl1=" + idd[(i + 1)];

                        queryplazo[i] = " where V.iddivisiones=1" + idl1;
                        queryExist[i] = " and v.iddivisiones=1 " + idl1;
                        wherequery[i] = idl1 + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1,-1,-1," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,'-1'";
                        querycargar[i] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=" + idd[(i + 1)] + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT descrip,idl1 from estl1 where visiblebp='1' and iddivisiones=1";
                    }
                    else
                    {
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " and idl1=" + idd[(i + 1)] + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                        idl1 = "and V.idl1=" + idd[(i + 1)];
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                        queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + "," + idd[(i + 1)] + ",-1,-1,-1,-1,-1,'-1'";
                        queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1;
                        query = "SELECT descrip,idl1 from estl1 where visiblebp='1' " + division + " " + depto + " " + fam + " " + linea;

                    }
                }
                subl1 = " ";
                lbl1.Text = "L1=Total";
                total = true;
                l = ",0";
                l1cargar = "and idl1=0";
                seleccion_l1 = 0;
            }
            lbl1.Text = "L1=" + cbL1.Text;
            solototal = false;
        }
        private void cbL2_index()
        {
            soloSuc = false;
            bandera_l2 = true;
            #region banderas
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL2.Text = "L2";
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl2 = " ";
            idl3 = " ";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (seleccion_l2!=0)
            {
                seleccion_l2 = int.Parse(idd[cbL2.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=" + idd[cbL2.SelectedIndex] + " and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl2 = "and V.idl2=" + idd[cbL2.SelectedIndex];
                idl2varios = idl2;
                total = false;
                query = "SELECT descrip,idl2 from estl2 where visiblebp='1' and idl2=" + idd[cbL2.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                subl2 = "and idl2=" + idd[cbL2.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + "," + idd[cbL2.SelectedIndex] + ",-1,-1,-1,-1,'-1'";
                l2 = "," + idd[cbL2.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                l2cargar = "and idl2=" + idd[cbL2.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl2";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios;
                whereLeft = idsucursalvarios;

            }
            else
            {
                groupby = "idl2";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1";
                idl2varios = " ";
                subl2 = " ";
                for (int i = 0; i <= cbL2.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=" + idd[(i + 1)] + " and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idl2 = "and V.idl2=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " ," + idd[(i + 1)] + ",-1,-1,-1,-1,'-1'";
                    queryplazo[i] = "where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2;
                }
                l2 = ",0";
                l2cargar = "and idl2=0";
                total = true;
                query = "SELECT descrip,idl2 from estl2 where visiblebp='1' " + division + " " + depto + " " + fam + " " + linea + " " + subl1;
                seleccion_l2 = 0;
            }
            lbL2.Text = "L2=" + cbL2.Text;
            solototal = false;
        }
        private void cbL3_index()
        {
            soloSuc = false;
            bandera_l3 = true;
            #region banderas
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL3.Text = "L3";
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (seleccion_l3!=0)
            {
                seleccion_l3 = int.Parse(idd[cbL3.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " and idl3=" + idd[cbL3.SelectedIndex] + " and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl3 = "and V.idl3=" + idd[cbL3.SelectedIndex];
                idl3varios = idl3;
                total = false;
                query = "SELECT descrip,idl3 from estl3 where visiblebp='1' and idl3=" + idd[cbL3.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                subl3 = "and idl3=" + idd[cbL3.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + "," + idd[cbL3.SelectedIndex] + ",-1,-1,-1,'-1'";
                l3 = "," + idd[cbL3.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                l3cargar = "and idl3=" + idd[cbL3.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl3";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl3";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " and idl3=-1";
                idl3varios = " ";
                subl3 = " ";
                for (int i = 0; i <= cbL3.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " and idl3=" + idd[(i + 1)] + " and idl4=-1 and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idl3 = "and V.idl3=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + "," + idd[(i + 1)] + ",-1,-1,-1,'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3;
                    seleccion_l3 = 0;
                }
                total = true;
                query = "SELECT descrip,idl3 from estl3 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2;
                l3 = ",0";
                l3cargar = "and idl3=0";
            }
            lbL3.Text = "L3=" + cbL3.Text;
            solototal = false;
        }
        private void cbL4_index()
        {
            soloSuc = false;
            bandera_l4 = true;
            #region banderas
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL4.Text = "L4";
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl4 = " ";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (seleccion_l4!=0)
            {
                seleccion_l4 = int.Parse(idd[cbL4.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " and idl4=" + idd[cbL4.SelectedIndex] + " and idl5=-1 and idl6=-1 and marca='-1'  ";
                idl4 = "and V.idl4=" + idd[cbL4.SelectedIndex];
                idl4varios = idl4;
                total = false;
                query = "SELECT descrip,idl4 from estl4 where visiblebp='1' and idl4=" + idd[cbL4.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                subl4 = "and idl4=" + idd[cbL4.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + "," + idd[cbL4.SelectedIndex] + ",-1,-1,'-1'";
                l4 = "," + idd[cbL4.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                l4cargar = "and idl4=" + idd[cbL4.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl4";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl4";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=-1";
                idl4varios = " ";
                subl4 = " ";
                for (int i = 0; i <= cbL4.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " and idl4=" + idd[(i + 1)] + " and idl5=-1 and idl6=-1 and marca='-1'  ";
                    idl4 = "and V.idl4=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + "," + idd[(i + 1)] + ",-1,-1,'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4;
                }
                total = true;
                query = "SELECT descrip,idl4 from estl4 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3;
                l4 = ",0";
                l4cargar = "and idl4=0";
                seleccion_l4 = 0;
            }
            lbL4.Text = "L4=" + cbL4.Text;
            solototal = false;
        }
        private void cbL5_index()
        {
            soloSuc = false;
            bandera_l5 = true;
            #region banderas
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_l6 = -1;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL5.Text = "L5";
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl5 = " ";
            idl6 = " ";
            marca = " ";
            #endregion
            if (seleccion_l5!=0)
            {
                seleccion_l5 = int.Parse(idd[cbL5.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=" + idd[cbL5.SelectedIndex] + " and idl6=-1 and marca='-1'  ";
                idl5 = "and V.idl5=" + idd[cbL5.SelectedIndex];
                idl5varios = idl5;
                total = false;
                query = "SELECT descrip,idl5 from estl5 where visiblebp='1' and idl5=" + idd[cbL5.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                subl5 = "and idl5=" + idd[cbL5.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + "," + idd[cbL5.SelectedIndex] + ",-1,'-1'";
                l5 = "," + idd[cbL5.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                l5cargar = "and idl5=" + idd[cbL5.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl5";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl5";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=-1";
                idl5varios = " ";
                subl5 = " ";
                for (int i = 0; i <= cbL5.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " and idl5=" + idd[(i + 1)] + " and idl6=-1 and marca='-1'  ";
                    idl5 = "and V.idl5=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + "," + idd[(i + 1)] + ",-1,'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5;
                }
                total = true;
                query = "SELECT descrip,idl5 from estl5 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4;
                l5 = ",0";
                l5cargar = "and idl5=0";
                seleccion_l5 = 0;
            }
            lbL5.Text = "L5=" + cbL5.Text;
            solototal = false;
        }
        private void cbL6_index()
        {
            soloSuc = false;
            bandera_l6 = true;
            #region banderas
            bandera_marca = false;
            seleccion_marca = "";
            #endregion
            #region reiniciar valores
            lbL6.Text = "L6";
            lbMarca.Text = "Marca";
            idl6 = " ";
            marca = " ";
            #endregion

            if (seleccion_l6!=0)
            {
                seleccion_l6 = int.Parse(idd[cbL6.SelectedIndex]);

                querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " and idl6=" + idd[cbL6.SelectedIndex] + " and marca='-1'  ";
                idl6 = "and V.idl6=" + idd[cbL6.SelectedIndex];
                idl6varios = idl6;
                total = false;
                query = "SELECT descrip,idl6 from estl6 where visiblebp='1' and idl6=" + idd[cbL6.SelectedIndex];
                wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios;
                subl6 = "and idl6=" + idd[cbL6.SelectedIndex];
                queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + "," + idd[cbL6.SelectedIndex] + ",'-1'";
                l6 = "," + idd[cbL6.SelectedIndex];
                queryplazo[0] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                l6cargar = "and idl6=" + idd[cbL6.SelectedIndex];
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[0];
                groupby = "idl6";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios;
                whereLeft = idsucursalvarios;
            }
            else
            {
                groupby = "idl6";
                where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios;
                whereLeft = idsucursalvarios;
                queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " and idl6=-1";
                subl6 = " ";
                idl6 = " ";
                for (int i = 0; i <= cbL6.Items.Count - 1; i++)
                {
                    querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " and idl6=" + idd[(i + 1)] + " and marca='-1'  ";
                    idl6 = "and V.idl6=" + idd[(i + 1)];
                    wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                    queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + "," + idd[(i + 1)] + ",'-1'";
                    queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                    queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6;
                }
                total = true;
                query = "SELECT descrip,idl6 from estl6 where visiblebp='1' " + division + " " + depto + "" + " " + fam + " " + linea + " " + subl1 + " " + subl2 + " " + subl3 + " " + subl4 + " " + subl5;
                l6 = ",0";
                l6cargar = "and idl6=0";
                seleccion_l6 = 0;
            }
            lbL6.Text = "L6=" + cbL6.Text;
            solototal = false;
        }
        private void cbMarca_index()
        {
            soloSuc = false;
            bandera_marca = true;
            seleccion_marca = cbMarca.SelectedText;
            if (seleccion_marca=="")
            {
                for (int i = 0; i <= cbMarca.Items.Count - 1; i++)
                {
                    marca = " and V.marca='" + idd[(i + 1)] + "'";
                    if (bandera_l6 == true && bandera_l5 == true)
                    {
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios + " " + marca;
                        queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + " " + l6 + ",'" + idd[(i + 1)] + "'";
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='" + idd[(i + 1)] + "'  ";
                        queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marca;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + "  " + "and V.marca='" + idd[(i + 1)] + "'";
                        groupby = "marca";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios + " " + marcavarios;
                        whereLeft = idsucursalvarios;
                    }

                    if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
                    {
                        wherequery[i] = idsucursalvarios + " " + iddeptovarios + " and iddivisiones=1 " + marca;
                        queryguardar[i] = s + " " + d + " " + dd + ",-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[(i + 1)] + "'";

                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[(i + 1)] + "'  ";
                        queryplazo[i] = " where V.iddivisiones= " + d.Substring(1, d.Length - 1) + "  " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marca;
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + "  " + "and V.marca='" + idd[(i + 1)] + "'";
                        groupby = "marca";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + marcavarios;
                        whereLeft = idsucursalvarios;
                    }
                    if (bandera_sucursal == false && bandera_division == false && bandera_depto == false && bandera_familia == false && bandera_linea == false && bandera_l1 == false && bandera_l2 == false && bandera_l3 == false && bandera_l3 == false && bandera_l4 == false && bandera_l5 == false && bandera_l6 == false)
                    {
                        wherequery[i] = marca + " and iddivisiones=1";
                        queryguardar[i] = ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[(i + 1)] + "'";
                        querycargar[i] = " and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[(i + 1)] + "'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";
                        query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1";
                        queryExist[i] = " and v.iddivisiones=1  " + "and  V.marca='" + idd[(i + 1)] + "'";
                        queryplazo[i] = " where V.iddivisiones= 1 " + marca;
                        groupby = "marca";
                        where = "  e.iddivisiones=1 " + marcavarios;
                        whereLeft = "";
                    }
                    if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_familia == true && bandera_linea == true && bandera_l1 == true && bandera_l2 == false)
                    {
                        wherequery[i] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marca;
                        queryguardar[i] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + ",-1,-1,-1,-1,-1, '" + idd[(i + 1)] + "'";
                        querycargar[i] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[(i + 1)] + "'  ";
                        queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1 and marca='-1'";
                        // query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1";
                        queryExist[i] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + "  " + "and V.marca='" + idd[(i + 1)] + "'";
                        groupby = "marca";
                        where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marcavarios;
                        whereLeft = idsucursalvarios;
                    }

                }

                if (bandera_l6 == true && bandera_l5 == true)
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='-1'";
                }

                if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
                {
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and iddepto=" + seleccion_depto.ToString() + " and idsucursal=" + seleccion_sucursal.ToString() + " and iddivisiones=" + seleccion_division.ToString() + " and idfamilia=-1";
                }
                seleccion_marca = "0";
                total = true;
            }
            else
            {
                total = false;
                if (bandera_l6 == true && bandera_l5 == true)
                {
                    wherequery[0] = idsucursalvarios + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6varios + " " + marca;
                    queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + " " + l2 + " " + l3 + " " + l4 + " " + l5 + " " + l6 + ",'" + idd[cbMarca.SelectedIndex] + "'";
                    querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " " + l2cargar + " " + l3cargar + " " + l4cargar + " " + l5cargar + " " + l6cargar + " and marca='-1'";
                    queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl5varios + " " + idl6 + " " + "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + idl2varios + " " + idl3varios + " " + idl4varios + " " + idl6varios + " " + marcavarios;
                    whereLeft = idsucursalvarios;
                }
                if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_linea == false)
                {
                    wherequery[0] = idsucursalvarios + " " + iddeptovarios + " and iddivisiones=1 " + marca;
                    queryguardar[0] = s + " " + d + " " + dd + ",-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[cbMarca.SelectedIndex] + "'";

                    querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and iddepto=" + seleccion_depto.ToString() + " and idsucursal=" + seleccion_sucursal.ToString() + " and iddivisiones=" + seleccion_division.ToString() + " and idfamilia=-1 and marca='-1'";
                    queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + marcavarios;
                    whereLeft = idsucursalvarios;
                }
                if (bandera_sucursal == false && bandera_division == false && bandera_depto == false && bandera_familia == false && bandera_linea == false && bandera_l1 == false && bandera_l2 == false && bandera_l3 == false && bandera_l3 == false && bandera_l4 == false && bandera_l5 == false && bandera_l6 == false)
                {
                    wherequery[0] = marca + " and iddivisiones=1";
                    queryguardar[0] = ",-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,'" + idd[cbMarca.SelectedIndex] + "'";
                    querycargar[0] = "and idsucursal=-1 and iddivisiones=-1 and iddepto=-1 and idfamilia=-1 and idlinea=-1 and idl1=-1 and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[cbMarca.SelectedIndex];
                    query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1 and m.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    queryExist[0] = "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = "  e.iddivisiones=1 " + marcavarios;
                    whereLeft = "";
                }
                if (bandera_sucursal == true && bandera_division == true && bandera_depto == true && bandera_familia == true && bandera_linea == true && bandera_l1 == true && bandera_l2 == false)
                {
                    wherequery[0] = marca + " and iddivisiones=1";
                    queryguardar[0] = s + " " + d + " " + dd + " " + f + " " + l + " " + l1 + ",-1,-1,-1,-1,-1, '" + idd[cbMarca.SelectedIndex] + "'";
                    querycargar[0] = sucursalcargar + " " + divisioncargar + " " + departamentocargar + " " + familiacargar + " " + lineacargar + " " + l1cargar + " and idl2=-1 and idl3=-1 and idl4=-1 and idl5=-1 and idl6=-1 and marca='" + idd[cbMarca.SelectedIndex] + "'  ";
                    queryunidadesAsignadas = "SELECT asignacionUP from cedula2 where nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1  " + querycargar[0];
                    query = "SELECT distinct m.descrip,m.marca from marca as m inner join estarticulo as V on V.marca=m.marca where visiblebp=1 and v.iddivisiones=1 and m.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    queryExist[0] = idsucursalvarios.Replace("V", "E") + " " + iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + "and V.marca='" + idd[cbMarca.SelectedIndex] + "'";
                    groupby = "marca";
                    where = iddivisionesvarios + " " + iddeptovarios + " " + idfamiliavarios + " " + idlineavarios + " " + idl1varios + " " + marcavarios;
                    whereLeft = idsucursalvarios;
                }
            }
            lbMarca.Text = "Marca=" + cbMarca.Text;
            solototal = false;
        }

        #endregion
        #endregion

        private void m_ESCENARIO(string escenario)
        {
            DateTime a = DateTime.Now, f = DateTime.Now;
            string ESC = "SELECT * FROM escenarios WHERE nombre = '" + escenario + "' LIMIT 1";
            cmd = new MySqlCommand(ESC, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                DateTime fechaactual = DateTime.Parse(reader["FechaCreacion"].ToString());
                fech1 = a = DateTime.Parse(reader["fechainicial"].ToString());
                fech2 = f = DateTime.Parse(reader["fechafinal"].ToString());
                
                FechaAI = DateTime.Parse(reader["fechainicialA"].ToString());
                FechaAF = DateTime.Parse(reader["fechafinalA"].ToString());
                label9.Text = "Escenario: " + escenario;
                label10.Text = "Fecha inicial " + a.ToString("yyyy-MM-dd");
                label11.Text = "Fecha final  " + f.ToString("yyyy-MM-dd");
                CED1_fechaI = FechaAI.ToString("dd-MM-yyyy");
                CED1_fechaF = FechaAF.AddDays(-1).ToString("dd-MM-yyyy");
                fechaActual = fechaactual.ToString("dd-MM-yyyy");
                if (reader["solocalzado"].ToString() == "True")
                {
                    solocalzadoDropdown = " and iddivisiones=1";
                    solocalzadowhere = "and V.iddivisiones=1";
                }
                else
                {
                    solocalzadoDropdown = " ";
                    solocalzadowhere = " ";
                }
            }
            reader.Close();
            m_cantidadXmes(CED1_fechaI, CED1_fechaF);
        }
        private void m_LLENAR_DGV(int m, int renglon, int columna, string val)
        {
           
            this.Invoke(new Action(() =>
            {
                switch (m)
                {
                    case 1: dgv1.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 2: dgv2.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 3: dgv3.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 4: dgv4.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 5: dgv5.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 6: dgv6.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 7: dgv7.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 8: dgv8.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 9: dgv9.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 10: dgv10.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 11: dgv11.Rows[renglon].Cells[columna].Value = val;
                        break;
                    case 12: dgv12.Rows[renglon].Cells[columna].Value = val;
                        break;
                    //  case 13: dgvProf13.Rows[columna].Cells[1].Value = val; 
                    //    break;

                }
            }));

        }

        private void m_LLENAR_DGV2(int m, int columna, string val)
        {
            switch (m)
            {
                case 1: dgv1.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 2: dgv2.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 3: dgv3.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 4: dgv4.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 5: dgv5.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 6: dgv6.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 7: dgv7.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 8: dgv8.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 9: dgv9.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 10: dgv10.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 11: dgv11.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                case 12: dgv12.Rows[columna].Cells[2].Value = val; calculos++;
                    break;
                // case 13: dgvProf13.Rows[columna].Cells[2].Value = val; calculos++; 
                //   break;

            }

        }

        private void m_obtenercedula1(int d)
        {
            int i = 0;
            query = "SELECT * FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' and idsucursal=0 and iddivisiones=0 and iddepto=0 and idfamilia=0 and idlinea=0 and idl1=0 and idl2=0 and idl3=0 and idl4=0 and idl5=0 and idl6=0 and marca='0'";
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                rotacionCed1 = double.Parse(reader["rotacion"].ToString());
                diasINvCed1 = double.Parse(reader["DiasInv"].ToString());
                VTICed1 = double.Parse(reader["VTI"].ToString());
                VTUCed1 = double.Parse(reader["Inventariodeseado"].ToString());
                i++;
            }
            reader.Close();
            for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            {
                m_LLENAR_DGV(d, x, 12, rotacionCed1.ToString("n2"));
                m_LLENAR_DGV(d, x, 15, diasINvCed1.ToString("n2"));
            }
        }

        private void m_obtenercedula1T(int d)
        {
            query = "SELECT * FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "'";
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                rotacionCed1 = double.Parse(reader["rotacion"].ToString());
                diasINvCed1 = double.Parse(reader["DiasInv"].ToString());
                VTICed1 = double.Parse(reader["VTI"].ToString());
                VTUCed1 = double.Parse(reader["Inventariodeseado"].ToString());
            }
            reader.Close();
            for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            {
                m_LLENAR_DGV(d, x, 12, rotacionCed1.ToString("n0"));
                m_LLENAR_DGV(d, x, 15, diasINvCed1.ToString("n1"));
            }
        }

        private void m_obtenercedula2(int x)
        {
            int i = 0;
            query = "SELECT * FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + wherequery[x];
            cmd = new MySqlCommand(query, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                cantidadA[i] = double.Parse(reader["asignacionUP"].ToString());
                importeA[i] = double.Parse(reader["asignacionIP"].ToString());
                i++;
            }
            reader.Close();
        }

        private void M_pintarcolumnas()
        {
            dgv1.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv1.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv2.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv2.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv3.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv3.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv4.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv4.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv5.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv5.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv6.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv6.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv7.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv7.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv8.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv8.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv9.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv9.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv10.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv10.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv11.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv11.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgv12.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgv12.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
            dgvTotales.RowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#B4FF8F");
            dgvTotales.AlternatingRowsDefaultCellStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#43BF43");
        }
        private void m_rebajas()
        {
            string s = "SELECT Rebajas FROM escenarios where nombre='" + Properties.Settings.Default.escenario + "' ";
            cmd = new MySqlCommand(s, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {

            }
            reader.Close();
        }

        private void m_recalcularCompra(int i)
        {
            double importeC = 0, unidadesC = 0;
            double preciopromedio = 0;
            double saldoFinalU = 0;
            double ventaactualU = 0;
            double saldosIniciales = 0;
            double salfinalImporte = 0;
            double rot = 0;
            double venta2 = 0;
            double saldosIM = 0;
            double precioCosto = 0;
            int x = 0,y=0;
            if (solototal == true)
            {
                x = 0; y = 0;
            }
            else
            {
                x = 1; y = 1;
            }
            switch (i)
            {
                case 1:
                    #region dgv2

                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        /////
                        if (cantidadmes == 2)
                        {
                            this.Invoke(new Action(() =>
                            {
                                 saldosIniciales = double.Parse(dgv1.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv2.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv2.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
importeC = unidadesC * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);


                            //-------------------------------------------------------//
                            dgv2.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                            dgv2.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                            dgv2.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                            dgv2.Rows[x].Cells[6].Value = importeC.ToString("C2");
                            dgv2.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                            dgv2.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                            }));
                            
                        }
                        else
                        {
                            this.Invoke(new Action(() =>
                            {
saldosIniciales = double.Parse(dgv1.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv2.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv2.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
 importeC = unidadesC * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv2.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);


                            //-------------------------------------------------------//
                            dgv2.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                            dgv2.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                            dgv2.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                            dgv2.Rows[x].Cells[6].Value = importeC.ToString("C2");
                            dgv2.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                            dgv2.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                            }));
                           
                        }
                    }
                    #endregion
                    break;
                case 2:
                    #region dgv2

                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        if (cantidadmes == 3)
                        {
                            this.Invoke(new Action(() =>
                            {
 saldosIniciales = double.Parse(dgv2.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv3.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv3.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
 importeC = unidadesC * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                        }
                        else
                        {
                            /////
                            this.Invoke(new Action(() =>
                            {
 saldosIniciales = double.Parse(dgv3.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv3.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv3.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
 importeC = unidadesC * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv3.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           

                        }
                        this.Invoke(new Action(() =>
                        {
//-------------------------------------------------------//
                        dgv3.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv3.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv3.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv3.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv3.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv3.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                        }));
                        //
                    }
                    #endregion
                    break;
                case 3:
                    #region dgv2

                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        if (cantidadmes == 4)
                        {
                            this.Invoke(new Action(() =>
                            {
                                saldosIniciales = double.Parse(dgv3.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv4.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv4.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                  importeC = unidadesC * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                          
                        }
                        else
                        {
                            /////
                            this.Invoke(new Action(() =>
                            {
                                 saldosIniciales = double.Parse(dgv4.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv4.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv4.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                importeC = unidadesC * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv4.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            

                        }
                        //-------------------------------------------------------//
                        this.Invoke(new Action(() =>
                            {
                                dgv4.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv4.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv4.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv4.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv4.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv4.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                            }));
                        
                    }
                    #endregion
                    break;
                case 4:
                    #region dgv5

                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        if (cantidadmes == 4)
                        {
                            /////
                            this.Invoke(new Action(() =>
                            {
                                saldosIniciales = double.Parse(dgv4.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv5.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv5.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                importeC = unidadesC * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                            salfinalImporte = saldoFinalU * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            


                        }
                        else
                        {
                            /////
                            saldosIniciales = double.Parse(dgv4.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv5.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv5.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;
                            salfinalImporte = saldoFinalU * double.Parse(dgv5.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);

                        }

                        //-------------------------------------------------------//
                        dgv5.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv5.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv5.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv5.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv5.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv5.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                    }
                    #endregion
                    break;
                case 5:
                    #region dgv2

                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        /////
                        if (cantidadmes == 5)
                        {
                            this.Invoke(new Action(() =>
                            {
                                saldosIniciales = double.Parse(dgv5.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv6.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv6.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                importeC = unidadesC * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                        }
                        else
                        {
                            this.Invoke(new Action(() =>
                            {
                                saldosIniciales = double.Parse(dgv5.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv6.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv6.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                 importeC = unidadesC * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv6.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                        }

                        //-------------------------------------------------------//
                        this.Invoke(new Action(() =>
                            {
                                dgv6.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv6.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv6.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv6.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv6.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv6.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                            }));
                        
                    }
                    #endregion
                    break;
                case 6:
                    #region dgv2

                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        /////
                        if (cantidadmes == 6)
                        {
                            this.Invoke(new Action(() =>
                            {
                                 saldosIniciales = double.Parse(dgv6.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv7.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv7.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                importeC = unidadesC * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency); 
                            }));
                           
                        }
                        else
                        {
                            this.Invoke(new Action(() =>
                            {
                                saldosIniciales = double.Parse(dgv6.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv7.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv7.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                importeC = unidadesC * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv7.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                            
                        }

                        //-------------------------------------------------------//
                        this.Invoke(new Action(() =>
                            {
                                 dgv7.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv7.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv7.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv7.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv7.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv7.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                            }));
                       
                    }
                    #endregion
                    break;
                case 7:
                    #region dgv2
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        if (cantidadmes == 7)
                        {
                            this.Invoke(new Action(() =>
                            {
                                 saldosIniciales = double.Parse(dgv7.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv8.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv8.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                  importeC = unidadesC * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                          
                        }
                        else
                        {
                            this.Invoke(new Action(() =>
                            {
                                  saldosIniciales = double.Parse(dgv7.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv8.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv8.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                          
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            this.Invoke(new Action(() =>
                            {
                                 importeC = unidadesC * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv8.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            }));
                           
                        }
                        /////

                        //-------------------------------------------------------//
                        this.Invoke(new Action(() =>
                            {
                                   dgv8.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv8.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv8.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv8.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv8.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv8.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                            }));
                    }
                    #endregion
                    break;
                case 8:
                    #region dgv2
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        /////
                        if (cantidadmes == 8)
                        {
                            saldosIniciales = double.Parse(dgv8.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv9.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv9.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            saldosIniciales = double.Parse(dgv8.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv9.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv9.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv9.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }

                        //-------------------------------------------------------//
                        dgv9.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv9.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv9.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv9.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv9.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv9.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                    }
                    #endregion
                    break;
                case 9:
                    #region dgv2

                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        /////
                        if (cantidadmes == 9)
                        {
                            saldosIniciales = double.Parse(dgv9.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv10.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv10.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            saldosIniciales = double.Parse(dgv9.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv10.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv10.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv10.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }

                        //-------------------------------------------------------//
                        dgv10.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv10.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv10.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv10.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv10.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv10.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                    }
                    #endregion
                    break;
                case 10:
                    #region dgv2
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        if (cantidadmes == 10)
                        {
                            saldosIniciales = double.Parse(dgv10.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv11.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv11.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);

                        }
                        else
                        {
                            saldosIniciales = double.Parse(dgv10.Rows[x].Cells[10].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv11.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv11.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);

                        }
                        /////


                        //-------------------------------------------------------//
                        dgv11.Rows[x].Cells[1].Value = saldosIniciales.ToString("n0");
                        dgv11.Rows[x].Cells[2].Value = saldosIM.ToString("C2");
                        dgv11.Rows[x].Cells[5].Value = unidadesC.ToString("N2");
                        dgv11.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv11.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv11.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                    }
                    #endregion
                    break;
                case 11:
                    #region dgv2
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        if (cantidadmes == 11)
                        {
                            saldosIniciales = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv12.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv12.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }
                        else
                        {
                            saldosIniciales = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                            precioCosto = double.Parse(dgv12.Rows[x].Cells[3].Value.ToString(), NumberStyles.Currency);
                            saldosIM = saldosIniciales * precioCosto;
                            venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            ventaactualU = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                            rot = double.Parse(dgv12.Rows[x].Cells[12].Value.ToString());
                            preciopromedio = double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            if (rot != 0)
                            {
                                unidadesC = ((12 / rot) * (venta2) - saldosIniciales) + ventaactualU;
                            }
                            else
                            {
                                unidadesC = 0;
                            }
                            importeC = unidadesC * double.Parse(dgv12.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                            saldoFinalU = saldosIniciales + unidadesC - ventaactualU;

                            salfinalImporte = saldoFinalU * double.Parse(dgv11.Rows[x].Cells[8].Value.ToString(), NumberStyles.Currency);
                        }

                        //-------------------------------------------------------//
                        dgv12.Rows[x].Cells[6].Value = unidadesC.ToString("N2");
                        dgv12.Rows[x].Cells[6].Value = importeC.ToString("C2");
                        dgv12.Rows[x].Cells[10].Value = saldoFinalU.ToString("N0");
                        dgv12.Rows[x].Cells[11].Value = salfinalImporte.ToString("N2");
                    }
                    #endregion
                    m_REFRESH_DGV();
                   // m_calcularTotalPeriodo();
                    break;
            }
            m_cifracontrol(i);
        }

        private void m_rotacionesPendientes(int i)
        {
            int x = 0;
            double venta2 = 0;
            double venta1 = 0;
            double compra = 0;
            double saldoincial = 0;
            double rotacion = 0;
            double diasinv = 0;
            TimeSpan dias = FechaAF.Subtract(FechaAI);

            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            for (; x <= dgv1.Rows.Count - 1; x++)
            {
                switch (i)
                {
                    case 1:
                        #region dgv1
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv1.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                        }));
                       

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
dgv1.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv1.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                    case 2:
                        #region dgv2
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv2.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString());
                        }));
                      

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;

                        }
                        this.Invoke(new Action(() =>
                        {
  dgv2.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv2.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                      
                        #endregion
                        break;
                    case 3:
                        #region dgv3
                        this.Invoke(new Action(() =>
                        {
                            if(cantidadmes==i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else 
                            {
                                venta2 = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv3.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString());
                        }));
                       

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
                        dgv3.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv3.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                       
                        #endregion
                        break;
                    case 4:
                        #region dgv4
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv4.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString());
                        }));
                        
                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
dgv4.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv4.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                    case 5:
                        #region dgv5
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv5.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString());
                        }));
                       

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
dgv5.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv5.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                    case 6:
                        #region dgv6
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv6.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString());
                        }));
                        
                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
 dgv6.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv6.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                       
                        #endregion
                        break;
                    case 7:
                        #region dgv7
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv7.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString());
                        }));
                       

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
dgv7.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv7.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                    case 8:
                        #region dgv8
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv8.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString());
                        }));
                        

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
dgv8.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv8.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                    case 9:
                        #region dgv9
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv9.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString());
                        }));
                       

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
dgv9.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv9.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                    case 10:
                        #region dgv10
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv10.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString());
                        }));
                        

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
 dgv10.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv10.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                       
                        #endregion
                        break;
                    case 11:
                        #region dgv1
                        this.Invoke(new Action(() =>
                        {
                            if (cantidadmes == i)
                            {
                                venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                            }
                            else
                            {
                                venta2 = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString());
                            }
                        compra = double.Parse(dgv11.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString());
                        }));
                        

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
dgv11.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv11.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                    case 12:
                        #region dgv12
                        this.Invoke(new Action(() =>
                        {
                        venta2 = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString());
                        compra = double.Parse(dgv12.Rows[x].Cells[5].Value.ToString());
                        saldoincial = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString());
                        venta1 = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString());
                        }));
                        

                        if (venta2 >= 1)
                        {
                            if ((compra + saldoincial - venta1) >= 1)
                            {
                                rotacion = (venta2 * 12) / (compra + saldoincial - venta1);
                                diasinv = double.Parse(dias.Days.ToString()) / rotacion;
                            }
                            else
                            {
                                rotacion = 0;
                                diasinv = 0;
                            }
                        }
                        else
                        {
                            rotacion = 0;
                            diasinv = 0;
                        }
                        this.Invoke(new Action(() =>
                        {
                        dgv12.Rows[x].Cells[15].Value = diasinv.ToString("N2");
                        dgv12.Rows[x].Cells[12].Value = rotacion.ToString("N2");
                        }));
                        
                        #endregion
                        break;
                }
            }
        }

        private void m_saldosFinalesH(int mes, int ano, int i)
        {
            double comprasim = 0;
            double comprasun = 0;
            double saldosfI = 0;
            double saldosfU = 0;
            double ventasI = 0;
            double ventasU = 0;
            double saldosIU = 0;
            double saldosII = 0;
            int x = 0;
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            switch (i)
            {
                case 1:
                    #region mes 1
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
                        comprasim = double.Parse(dgv1.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv1.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv1.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv1.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv1.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv1.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv1.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv1.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
                case 2:
                    #region mes 2
                    for (; x <= dgv1.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
 comprasim = double.Parse(dgv2.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv2.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv2.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv2.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv2.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv2.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv2.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv2.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                       
                    }
                    #endregion
                    break;
                case 3:
                    #region mes 3
                    for (; x <= dgv3.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
 comprasim = double.Parse(dgv3.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv3.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv3.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv3.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv3.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv3.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv3.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv3.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                       
                    }
                    #endregion
                    break;
                case 4:
                    #region mes 4
                    for (; x <= dgv4.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
comprasim = double.Parse(dgv4.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv4.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv4.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv4.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv4.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv4.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv4.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv4.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
                case 5:
                    #region mes 5
                    for (; x <= dgv5.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
 comprasim = double.Parse(dgv5.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv5.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv5.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv5.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv5.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv5.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv5.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv5.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                       
                    }
                    #endregion
                    break;
                case 6:
                    #region mes 6
                    for (; x <= dgv6.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
 comprasim = double.Parse(dgv6.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv6.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv6.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv6.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv6.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv6.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv6.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv6.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                       
                    }
                    #endregion
                    break;
                case 7:
                    #region mes 7
                    for (; x <= dgv7.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
comprasim = double.Parse(dgv7.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv7.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv7.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv7.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv7.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv7.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv7.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv7.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
                case 8:
                    #region mes 8
                    for (; x <= dgv8.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
comprasim = double.Parse(dgv8.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv8.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv8.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv8.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv8.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv8.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv8.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv8.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
                case 9:
                    #region mes 9
                    for (; x <= dgv9.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
comprasim = double.Parse(dgv9.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv9.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv9.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv9.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv9.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv9.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv9.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv9.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
                case 10:
                    #region mes 10
                    for (; x <= dgv10.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
comprasim = double.Parse(dgv10.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv10.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv10.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv10.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv10.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv10.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv10.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv10.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
                case 11:
                    #region mes 11
                    for (; x <= dgv11.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
comprasim = double.Parse(dgv11.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv11.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv11.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv11.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv11.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv11.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv11.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv11.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
                case 12:
                    #region mes 12
                    for (; x <= dgv12.Rows.Count - 1; x++)
                    {
                        this.Invoke(new Action(() =>
                        {
comprasim = double.Parse(dgv12.Rows[x].Cells[6].Value.ToString(), NumberStyles.Currency);
                        comprasun = double.Parse(dgv12.Rows[x].Cells[5].Value.ToString(), NumberStyles.Currency);
                        ventasI = double.Parse(dgv12.Rows[x].Cells[9].Value.ToString(), NumberStyles.Currency);
                        ventasU = double.Parse(dgv12.Rows[x].Cells[7].Value.ToString(), NumberStyles.Currency);
                        saldosIU = double.Parse(dgv12.Rows[x].Cells[1].Value.ToString(), NumberStyles.Currency);
                        saldosII = double.Parse(dgv12.Rows[x].Cells[2].Value.ToString(), NumberStyles.Currency);
                        /////////////////////////
                        saldosfI = saldosII + comprasim - ventasI;
                        saldosfU = saldosIU + comprasun - ventasU;
                        if (saldosfI <= 0)
                        {
                            saldosfI = 0;
                        }
                        if (saldosfU <= 0)
                        {
                            saldosfU = 0;
                        }
                        dgv12.Rows[x].Cells[11].Value = saldosfI.ToString("C2");
                        dgv12.Rows[x].Cells[10].Value = saldosfU.ToString("N0");
                        }));
                        
                    }
                    #endregion
                    break;
            }
        }

        private void m_ventasHistoricasParcial(int mes, int ano, int i, int dia)
        {
            int añopoyectado = ano + 1;
            double ventasT = 0;
            double proporcion = 0;
            double ventasmes = 0;
            double ventasmesP = 0;
            int x = 0;
            int y = 0;
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            string q = "";
            for (; x <= dgv1.Rows.Count - 1; x++)
            {
                #region ventasT

                if (solototal == true)
                {
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1 ";
                }
                else
                {
                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[y];
                    }
                    else
                    {
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' and v.iddivisiones=1 " + wherequery[y];
                    }
                }
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {

                    if (reader["cantidad"].ToString() != "")
                    {
                        ventasT = double.Parse(reader["cantidad"].ToString());
                    }
                    else { ventasT = 0; }

                }
                reader.Close();

                #endregion ejecutar query


                ////////////////
                #region ventas
                q = "";
                if (solototal == true)
                {
                    q = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";

                }
                else
                {
                    q = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[y];
                }
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["asignacionUP"].ToString() != "")
                    {
                        ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                    }
                    else { ventasmesP = 0; }
                }
                reader.Close();

                #endregion ejecutar query
                ////////////////
                #region ventas
                q = "";

                if (solototal == true)
                {
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE   F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1 ";
                }
                else
                {
                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[y];
                    }
                    else
                    {
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE   F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1 " + wherequery[y];
                    }
                }
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["cantidad"].ToString() != "")
                    {
                        cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                    }
                    else { cantidadV[x] = 0; }
                    if (ventasT != 0 && cantidadV[x] != 0)
                    {
                        proporcion = cantidadV[x] / ventasT;
                        ventasmes = ventasmesP * proporcion;
                    }
                    else
                    {
                        ventasmes = 0;
                    }

                    //m_LLENAR_DGV(i, x, 7, ventasmes.ToString("n0"));
                }
                reader.Close();

                #endregion ejecutar query
                ////////////////
                q = "";

                if (solototal == true)
                {
                    q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + añopoyectado + "'  AND f.`Dia` BETWEEN 1 AND " + dia + " and v.iddivisiones=1 ";
                }
                else
                {
                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + añopoyectado + "'  AND f.`Dia` BETWEEN 1 AND " + dia + " AND " + wherequery[y];
                    }
                    else
                    {
                        q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + añopoyectado + "'  AND f.`Dia` BETWEEN 1 AND " + dia + " and v.iddivisiones=1 " + wherequery[y];
                    }
                }
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["cantidad"].ToString() != "")
                    {
                        cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                    }
                    else { cantidadV[x] = 0; }
                }
                reader.Close();

                int ddias = DateTime.DaysInMonth(añopoyectado, mes);
                ddias = ddias - dia;
                ventasmes = ventasmes / 30.4;
                ventasmes = ventasmes * ddias;
                ventasmes = ventasmes + cantidadV[x];
                m_LLENAR_DGV(i, x, 7, ventasmes.ToString("N0"));
                m_REFRESH_DGV();
                #endregion ejecutar query
                y++;
            }
        }

        private void m_VentasHistoricoMesCompleto(int mes, int ano, int i)
        {
            int x = 0;
            int y = 0;
            if (solototal == true)
            {
                x = 0;
            }
            else
            {
                x = 1;
            }
            string q = "";
            for (; x <= dgv1.Rows.Count - 1; x++)
            {

                if (solototal == true)
                {
                    q = "SELECT SUM(impllenototal) AS importe,SUM(ctdneta) AS cantidad ,ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1 ";
                }
                else
                {
                    if (solocalzadowhere == "")
                    {
                        q = "SELECT SUM(impllenototal) AS importe,SUM(ctdneta) AS cantidad ,ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                    }
                    else
                    {
                        q = "SELECT SUM(impllenototal) AS importe,SUM(ctdneta) AS cantidad ,ABS(SUM(impllenototal)/SUM(ctdneta)) AS preciounit FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' and v.iddivisiones=1 " + wherequery[(x - 1)];
                    }
                }
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["cantidad"].ToString() != "")
                    {
                        cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                    }
                    else { cantidadV[x] = 0; }
                    if (reader["importe"].ToString() != "")
                    {
                        importe[x] = double.Parse(reader["importe"].ToString());
                    }
                    else { importe[x] = 0; }

                    if (reader["preciounit"].ToString() != "")
                    {
                        preciounit[x] = double.Parse(reader["preciounit"].ToString());
                    }
                    else { preciounit[x] = 0; }

                    m_LLENAR_DGV(i, x, 7, cantidadV[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 8, preciounit[x].ToString("n0"));
                    m_LLENAR_DGV(i, x, 9, importe[x].ToString("n0"));
                }
                reader.Close();
                m_REFRESH_DGV();
                #endregion ejecutar query
                y++;
            }
        }

        private void m_ventasMes(int mes, int ano, int i)
        {
            double ventasT = 0;
            double proporcion = 0;
            double ventasmes = 0;
            double ventasmesP = 0;
            for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
            {
                #region ventasT
                string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "' " + wherequery[(x - 1)];
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {

                    if (reader["cantidad"].ToString() != "")
                    {
                        ventasT = double.Parse(reader["cantidad"].ToString());
                    }
                    else { ventasT = 0; }

                }
                reader.Close();

                #endregion ejecutar query


                ////////////////
                #region ventas
                string querr = "SELECT asignacionUP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(x - 1)];
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(querr, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["asignacionUP"].ToString() != "")
                    {
                        ventasmesP = double.Parse(reader["asignacionUP"].ToString());
                    }
                    else { ventasmesP = 0; }
                }
                reader.Close();

                #endregion ejecutar query
                ////////////////
                m_REFRESH_DGV();
                #region ventas
                string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.Mes='" + mes + "' and f.anio='" + ano + "' " + wherequery[(x - 1)];
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(quer, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["cantidad"].ToString() != "")
                    {
                        cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                    }
                    else { cantidadV[x] = 0; }
                    if (ventasT != 0 && cantidadV[x] != 0)
                    {
                        proporcion = cantidadV[x] / ventasT;
                        ventasmes = ventasmesP * proporcion;
                    }
                    else
                    {
                        ventasmes = 0;
                    }

                    m_LLENAR_DGV(i, x, 7, ventasmes.ToString("n0"));
                }
                reader.Close();

                #endregion ejecutar query
            }
        }
        private void m_ventasMesT(int mes, int ano, int i)
        {
            double ventasT = 0;
            double proporcion = 0;
            double ventasmes = 0;
            double ventasmesP = 0;
            for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
            {
                #region ventasT
                string q = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  f.anio='" + ano + "'  and v.iddivisiones=1";
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {

                    if (reader["cantidad"].ToString() != "")
                    {
                        ventasT = double.Parse(reader["cantidad"].ToString());
                    }
                    else { ventasT = 0; }

                }
                reader.Close();

                #endregion ejecutar query


                ////////////////
                #region ventas
                string querr = "SELECT Inventariodeseado FROM cedula1 WHERE nombre='" + Properties.Settings.Default.escenario + "' ";
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(querr, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["Inventariodeseado"].ToString() != "")
                    {
                        ventasmesP = double.Parse(reader["Inventariodeseado"].ToString());
                    }
                    else { ventasmesP = 0; }
                }
                reader.Close();

                #endregion ejecutar query
                ////////////////
                #region ventas
                string quer = "SELECT SUM(ctdneta) AS cantidad FROM VENTASBASE AS V INNER JOIN SUCURSAL AS S ON V.IDSUCURSAL = S.IDSUCURSAL INNER JOIN FECHA AS F ON F.IDFECHA = V.IDFECHA WHERE  F.FECHA BETWEEN '" + FechaAI.ToString("yyyy-MM-dd") + "' AND '" + FechaAF.ToString("yyyy-MM-dd") + "' AND F.Mes='" + mes + "' and f.anio='" + ano + "' and V.iddivisiones=1";
                #endregion ventas
                #region ejecutar Ventas

                cmd = new MySqlCommand(quer, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["cantidad"].ToString() != "")
                    {
                        cantidadV[x] = double.Parse(reader["cantidad"].ToString());
                    }
                    else { cantidadV[x] = 0; }
                    if (ventasT != 0 && cantidadV[x] != 0)
                    {
                        proporcion = cantidadV[x] / ventasT;
                        ventasmes = ventasmesP * proporcion;
                    }
                    else
                    {
                        ventasmes = 0;
                    }
                    m_LLENAR_DGV(i, x, 7, ventasmes.ToString("n0"));
                }
                reader.Close();

                #endregion ejecutar query

            }
        }

        private void menuPrincipalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Opciones op = new Opciones();
            this.Hide();
            op.ShowDialog();
            this.Close();
        } //-- menu opciones
        private void pictureBox2_Click(object sender, EventArgs e)
        {

        }

        private void pictureBox4_Click(object sender, EventArgs e)
        {

        }

        private void tabcontrol_DrawItem(object sender, DrawItemEventArgs e)
        {
            if (e.Index == tabcontrol.SelectedIndex)
            {
                e.Graphics.DrawString(tabcontrol.TabPages[e.Index].Text, new Font(tabcontrol.Font, FontStyle.Bold), Brushes.Blue,
                   new PointF(e.Bounds.X + 3, e.Bounds.Y + 3));
            }
            else
            {
                e.Graphics.DrawString(tabcontrol.TabPages[e.Index].Text, tabcontrol.Font, Brushes.Black, new PointF(e.Bounds.X, e.Bounds.Y));
            }
        }

        private void tbproyectar_Click(object sender, EventArgs e)
        {
            bgw_Generar.RunWorkerAsync();
        }

        private void toolStripComboBox1_Click(object sender, EventArgs e)
        {
            #region banderas
            bandera_sucursal = false;
            bandera_division = false;
            bandera_depto = false;
            bandera_familia = false;
            bandera_linea = false;
            bandera_l1 = false;
            bandera_l2 = false;
            bandera_l3 = false;
            bandera_l4 = false;
            bandera_l5 = false;
            bandera_l6 = false;
            bandera_marca = false;
            seleccion_sucursal = -1;
            seleccion_division = -1;
            seleccion_depto = -1;
            seleccion_familia = -1;
            seleccion_linea = -1;
            seleccion_l1 = -1;
            seleccion_l2 = -1;
            seleccion_l3 = -1;
            seleccion_l4 = -1;
            seleccion_l5 = -1;
            seleccion_l6 = -1;
            seleccion_marca = "";
            s = ",-1"; d = ",-1"; dd = ",-1"; f = ",-1"; l = ",-1"; l1 = ",-1"; l2 = ",-1"; l3 = ",-1"; l4 = ",-1"; l5 = ",-1"; l6 = ",-1"; m = ",'-1'";
            #endregion
            solototal = true;
            m_CLEAR_DGV();
            queryunidadesAsignadas = "SELECT * FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' AND ZapateriasTorreon=1";
            m_ADD_ROWS_DGV();
            m_PASS_VALUES_DGV("Total", 0);
            dgv1.Rows[0].Cells[0].Value = "Total";
            bgw_DMAtotal.RunWorkerAsync();
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {

            if (dgv1.Rows.Count >= 1)
            {
                #region
                nmExcel.Application Excelapp = new nmExcel.Application();
                Excelapp.Application.Workbooks.Add(Type.Missing);

                for (int z = 1; z <= cantidadmes; z++)
                {
                    switch (z)
                    {

                        case 1:
                            #region mes1
                            Excelapp.Sheets.Add("Mes 1");
                            Excelapp.Columns.ColumnWidth = 13;
                            for (int j2 = 0; j2 < dgv1.ColumnCount; j2++)
                            {
                                Excelapp.Cells[1, j2 + 1] = dgv1.Columns[j2].HeaderText;
                                //Excelapp.Cells[1, j2 + 1].Font.Bold = true;
                            }
                            for (int i = 0; i < dgv1.Rows.Count; i++)
                            {
                                DataGridViewRow Fila = dgv1.Rows[i];
                                for (int j = 0; j < Fila.Cells.Count; j++)
                                {
                                    Excelapp.Cells[i + 2, j + 1] = Fila.Cells[j].Value;
                                }
                            }
                            #endregion
                            break;
                        case 2:
                            #region mes2
                            Excelapp.Sheets.Add("Mes 2");
                            Excelapp.Columns.ColumnWidth = 13;
                            for (int j2 = 0; j2 < dgv1.ColumnCount; j2++)
                            {
                                Excelapp.Cells[1, j2 + 1] = dgv2.Columns[j2].HeaderText;
                                //Excelapp.Cells[1, j2 + 1].Font.Bold = true;
                            }
                            for (int i = 0; i < dgv1.Rows.Count; i++)
                            {
                                DataGridViewRow Fila = dgv2.Rows[i];
                                for (int j = 0; j < Fila.Cells.Count; j++)
                                {
                                    Excelapp.Cells[i + 2, j + 1] = Fila.Cells[j].Value;
                                }
                            }
                            #endregion
                            break;

                    }
                }
                // ---------- cuadro de dialogo para Guardar
                SaveFileDialog CuadroDialogo = new SaveFileDialog();
                CuadroDialogo.DefaultExt = "xlsx";
                CuadroDialogo.Filter = "xlsx file(*.xlsx)|*.xlsx";
                CuadroDialogo.AddExtension = true;
                CuadroDialogo.RestoreDirectory = true;
                CuadroDialogo.Title = "Guardar";
                CuadroDialogo.InitialDirectory = @"c:\";
                if (CuadroDialogo.ShowDialog() == DialogResult.OK)
                {
                    Excelapp.ActiveWorkbook.SaveCopyAs(CuadroDialogo.FileName);

                    Excelapp.ActiveWorkbook.Saved = true;
                    CuadroDialogo.Dispose();
                    CuadroDialogo = null;
                    Excelapp.Quit();
                }
                else
                {
                    MessageBox.Show("No se pudo guardar el documento", "Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                #endregion

            }
            else
            {
                MessageBox.Show("No existe información a exportar", "Sistema", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
        }
        private void cargar(int mes, int año, int g)
        {

            double c1, c2, c3, c4, c5, c6, c7, c8, c9, c12, c13, c14, c15, c16, c17;
            switch (g)
            {
                case 1:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid1
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv1.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv1.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv1.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv1.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv1.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv1.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv1.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv1.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv1.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv1.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv1.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv1.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv1.Rows[x].Cells[13].Value = c15.ToString();
                                dgv1.Rows[x].Cells[14].Value = c16.ToString();
                                dgv1.Rows[x].Cells[15].Value = c17.ToString("n0");
                                //dgv1.Rows[x].Cells[16].Value = c17.ToString("n0");
                                //dgv1.Rows[x].Cells[17].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 2:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid2
                        for (int x = 1; x <= dgv2.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv2.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv2.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv2.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv2.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv2.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv2.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv2.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv2.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv2.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv2.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv2.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv2.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv2.Rows[x].Cells[13].Value = c15.ToString();
                                dgv2.Rows[x].Cells[14].Value = c16.ToString();
                                dgv2.Rows[x].Cells[15].Value = c17.ToString("n0");

                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 3:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid3
                        for (int x = 1; x <= dgv3.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv3.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv3.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv3.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv3.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv3.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv3.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv3.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv3.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv3.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv3.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv3.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv3.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv3.Rows[x].Cells[13].Value = c15.ToString();
                                dgv3.Rows[x].Cells[14].Value = c16.ToString();
                                dgv3.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 4:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid4
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv4.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv4.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv4.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv4.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv4.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv4.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv4.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv4.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv4.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv4.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv4.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv4.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv4.Rows[x].Cells[13].Value = c15.ToString();
                                dgv4.Rows[x].Cells[14].Value = c16.ToString();
                                dgv4.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 5:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid5
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv5.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv5.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv5.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv5.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv5.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv5.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv5.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv5.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv5.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv5.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv5.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv5.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv5.Rows[x].Cells[13].Value = c15.ToString();
                                dgv5.Rows[x].Cells[14].Value = c16.ToString();
                                dgv5.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 6:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid6
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv6.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv6.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv6.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv6.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv6.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv6.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv6.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv6.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv6.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv6.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv6.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv6.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv6.Rows[x].Cells[13].Value = c15.ToString();
                                dgv6.Rows[x].Cells[14].Value = c16.ToString();
                                dgv6.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 7:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid7
                        for (int x = 1; x <= dgv7.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv7.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv7.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv7.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv7.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv7.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv7.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv7.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv7.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv7.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv7.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv7.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv7.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv7.Rows[x].Cells[13].Value = c15.ToString();
                                dgv7.Rows[x].Cells[14].Value = c16.ToString();
                                dgv7.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 8:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid8
                        for (int x = 1; x <= dgv8.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv8.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv8.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv8.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv8.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv8.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv8.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv8.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv8.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv8.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv8.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv8.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv8.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv8.Rows[x].Cells[13].Value = c15.ToString();
                                dgv8.Rows[x].Cells[14].Value = c16.ToString();
                                dgv8.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 9:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid9
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv9.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv9.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv9.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv9.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv9.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv9.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv9.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv9.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv9.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv9.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv9.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv9.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv9.Rows[x].Cells[13].Value = c15.ToString();
                                dgv9.Rows[x].Cells[14].Value = c16.ToString();
                                dgv9.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 10:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid10
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv10.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv10.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv10.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv10.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv10.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv10.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv10.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv10.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv10.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv10.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv10.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv10.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv10.Rows[x].Cells[13].Value = c15.ToString();
                                dgv10.Rows[x].Cells[14].Value = c16.ToString();
                                dgv10.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 11:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid11
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv11.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv11.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv11.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv11.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv11.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv11.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv11.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv11.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv11.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv11.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv11.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv11.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv11.Rows[x].Cells[13].Value = c15.ToString();
                                dgv11.Rows[x].Cells[14].Value = c16.ToString();
                                dgv11.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
                case 12:
                    this.Invoke(new Action(() =>
                    {
                        #region cargar grid12
                        for (int x = 1; x <= dgv1.Rows.Count - 1; x++)
                        {
                            string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " " + querycargar[(x - 1)];
                            cmd = new MySqlCommand(q, Conn);
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                c1 = double.Parse(reader["SIunidades"].ToString());
                                c2 = double.Parse(reader["SIimporte"].ToString());
                                c3 = double.Parse(reader["CostoNeto"].ToString());
                                c4 = double.Parse(reader["plazopago"].ToString());
                                c5 = double.Parse(reader["unidadesrecibo"].ToString());
                                c6 = double.Parse(reader["importerecibo"].ToString());
                                c7 = double.Parse(reader["VentasUnidades"].ToString());
                                c8 = double.Parse(reader["preciounitario"].ToString());
                                c9 = double.Parse(reader["Ventasimporte"].ToString());
                                c12 = double.Parse(reader["SFunidades"].ToString());
                                c13 = double.Parse(reader["SFimportes"].ToString());
                                c14 = double.Parse(reader["rotacion"].ToString());
                                c15 = double.Parse(reader["rotacionM"].ToString());
                                c16 = double.Parse(reader["rotacionA"].ToString());
                                c17 = double.Parse(reader["DiasInventario"].ToString());
                                dgv12.Rows[x].Cells[1].Value = c1.ToString("n0");
                                dgv12.Rows[x].Cells[2].Value = c2.ToString("C2");
                                dgv12.Rows[x].Cells[3].Value = c3.ToString("C2");
                                dgv12.Rows[x].Cells[4].Value = c4.ToString("n0");
                                dgv12.Rows[x].Cells[5].Value = c5.ToString("n0");
                                dgv12.Rows[x].Cells[6].Value = c6.ToString("C2");
                                dgv12.Rows[x].Cells[7].Value = c7.ToString("n0");
                                dgv12.Rows[x].Cells[8].Value = c8.ToString("C2");
                                dgv12.Rows[x].Cells[9].Value = c9.ToString("C2");
                                dgv12.Rows[x].Cells[10].Value = c12.ToString("n0");
                                dgv12.Rows[x].Cells[11].Value = c13.ToString("C2");
                                dgv12.Rows[x].Cells[12].Value = c14.ToString("n2");
                                dgv12.Rows[x].Cells[13].Value = c15.ToString();
                                dgv12.Rows[x].Cells[14].Value = c16.ToString();
                                dgv12.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }
                            reader.Close();
                        }
                        #endregion
                    }));
                    break;
            }
        }

        private void cargarT(int mes, int año, int g)
        {

            double c1, c2, c3, c4, c5, c6, c7, c8, c9, c12, c13, c14, c15, c16, c17;
            switch (g)
            {
                case 1:
                    #region cargar dgv1
                    for (int x = 0; x <= dgv1.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
                               dgv1.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv1.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv1.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv1.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv1.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv1.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv1.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv1.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv1.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv1.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv1.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv1.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv1.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv1.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv1.Rows[x].Cells[15].Value = c17.ToString("n0"); 
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 2:
                    #region cargar dgv2
                    for (int x = 0; x <= dgv2.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv2.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv2.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv2.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv2.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv2.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv2.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv2.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv2.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv2.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv2.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv2.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv2.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv2.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv2.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv2.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 3:
                    #region cargar dgv3
                    for (int x = 0; x <= dgv3.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv3.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv3.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv3.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv3.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv3.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv3.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv3.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv3.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv3.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv3.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv3.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv3.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv3.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv3.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv3.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 4:
                    #region cargar dgv4
                    for (int x = 0; x <= dgv4.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
 dgv4.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv4.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv4.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv4.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv4.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv4.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv4.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv4.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv4.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv4.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv4.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv4.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv4.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv4.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv4.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                           
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 5:
                    #region cargar dgv5
                    for (int x = 0; x <= dgv5.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv5.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv5.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv5.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv5.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv5.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv5.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv5.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv5.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv5.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv5.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv5.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv5.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv5.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv5.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv5.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 6:
                    #region cargar dgv6
                    for (int x = 0; x <= dgv6.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv6.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv6.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv6.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv6.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv6.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv6.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv6.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv6.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv6.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv6.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv6.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv6.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv6.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv6.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv6.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 7:
                    #region cargar dgv7
                    for (int x = 0; x <= dgv7.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv7.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv7.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv7.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv7.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv7.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv7.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv7.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv7.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv7.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv7.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv7.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv7.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv7.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv7.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv7.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 8:
                    #region cargar dgv8
                    for (int x = 0; x <= dgv8.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv8.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv8.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv8.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv8.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv8.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv8.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv8.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv8.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv8.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv8.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv8.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv8.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv8.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv8.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv8.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 9:
                    #region cargar dgv9
                    for (int x = 0; x <= dgv9.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv9.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv9.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv9.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv9.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv9.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv9.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv9.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv9.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv9.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv9.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv9.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv9.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv9.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv9.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv9.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 10:
                    #region cargar dgv10
                    for (int x = 0; x <= dgv10.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv10.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv10.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv10.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv10.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv10.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv10.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv10.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv10.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv10.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv10.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv10.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv10.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv10.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv10.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv10.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 11:
                    #region cargar dgv11
                    for (int x = 0; x <= dgv11.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
dgv11.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv11.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv11.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv11.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv11.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv11.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv11.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv11.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv11.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv11.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv11.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv11.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv11.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv11.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv11.Rows[x].Cells[15].Value = c17.ToString("n0");
                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
                case 12:
                    #region cargar dgv12
                    for (int x = 0; x <= dgv12.Rows.Count - 1; x++)
                    {
                        string q = "SELECT * FROM cedula3 where nombre='" + Properties.Settings.Default.escenario + "' and mes=" + mes.ToString() + " and anio=" + año.ToString() + " and ZapateriasTorreon=1";
                        cmd = new MySqlCommand(q, Conn);
                        reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {

                            c1 = double.Parse(reader["SIunidades"].ToString());
                            c2 = double.Parse(reader["SIimporte"].ToString());
                            c3 = double.Parse(reader["CostoNeto"].ToString());
                            c4 = double.Parse(reader["plazopago"].ToString());
                            c5 = double.Parse(reader["unidadesrecibo"].ToString());
                            c6 = double.Parse(reader["importerecibo"].ToString());
                            c7 = double.Parse(reader["VentasUnidades"].ToString());
                            c8 = double.Parse(reader["preciounitario"].ToString());
                            c9 = double.Parse(reader["Ventasimporte"].ToString());
                            c12 = double.Parse(reader["SFunidades"].ToString());
                            c13 = double.Parse(reader["SFimportes"].ToString());
                            c14 = double.Parse(reader["rotacion"].ToString());
                            c15 = double.Parse(reader["rotacionM"].ToString());
                            c16 = double.Parse(reader["rotacionA"].ToString());
                            c17 = double.Parse(reader["DiasInventario"].ToString());
                            this.Invoke(new Action(() =>
                            {
                                dgv12.Rows[x].Cells[1].Value = c1.ToString("n0");
                            dgv12.Rows[x].Cells[2].Value = c2.ToString("C2");
                            dgv12.Rows[x].Cells[3].Value = c3.ToString("C2");
                            dgv12.Rows[x].Cells[4].Value = c4.ToString("n0");
                            dgv12.Rows[x].Cells[5].Value = c5.ToString("n0");
                            dgv12.Rows[x].Cells[6].Value = c6.ToString("C2");
                            dgv12.Rows[x].Cells[7].Value = c7.ToString("n0");
                            dgv12.Rows[x].Cells[8].Value = c8.ToString("C2");
                            dgv12.Rows[x].Cells[9].Value = c9.ToString("C2");
                            dgv12.Rows[x].Cells[10].Value = c12.ToString("n0");
                            dgv12.Rows[x].Cells[11].Value = c13.ToString("C2");
                            dgv12.Rows[x].Cells[12].Value = c14.ToString("n2");
                            dgv12.Rows[x].Cells[13].Value = c15.ToString("n2");
                            dgv12.Rows[x].Cells[14].Value = c16.ToString("N2");
                            dgv12.Rows[x].Cells[15].Value = c17.ToString("n0");

                            }));
                            
                        }
                        reader.Close();
                    }
                    #endregion
                    break;
            }
        }
        private void m_limpiardgvTotalperiodo()
        {
            int x = 0;
            this.Invoke(new Action(() =>
            {
                dgvTotales.Rows.Clear();
                for(;x<=dgv1.Rows.Count-1;x++)
                {
                    dgvTotales.Rows.Add();
                    dgvTotales.Refresh();
                    dgvTotales.Rows[x].Cells[0].Value = dgv1.Rows[x].Cells[0].Value.ToString();
                }
            }));
                    
        }

        private void bgw_DMAtotal_DoWork(object sender, DoWorkEventArgs e)
        {
            this.Invoke(new Action(() =>
            {
                waitingbar.Visible = true;
                waitingbar.StartWaiting();
            }));
            if(refresh==true)
            {
                m_DIASMESESANOS_total_Refresh(CED1_fechaI, CED1_fechaF);
            }
            else
            {
                m_DIASMESESANOS_total(CED1_fechaI, CED1_fechaF);
            }
            refresh = false;
        }

        private void bgw_Generar_DoWork(object sender, DoWorkEventArgs e)
        {
            this.Invoke(new Action(() =>
            {
                waitingbar.Visible = true;
                waitingbar.StartWaiting();
            }));
            proyectar = true;
            solototal = true;
            m_CLEAR_DGV();
            queryunidadesAsignadas = "SELECT * FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' AND ZapateriasTorreon=1";
            m_ADD_ROWS_DGV();
            m_PASS_VALUES_DGV("Total", 0);
            this.Invoke(new Action(() =>
            {
                dgv1.Rows[0].Cells[0].Value = "Total";
            }));
            m_DIASMESESANOS_total(CED1_fechaI, CED1_fechaF);
            m_DIASMESESANOS_guardarT(CED1_fechaI, CED1_fechaF);
           
            // arbol depto
            //this.Invoke(new Action(() =>
            //{
            //    cbDepto_DropDown(sender, e);
            //    cbDepto.SelectedIndex = 0;
            //}));
            //m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
            //m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
            bool falso = true;
            if (falso == true)
            {
                #region arbol
                this.Invoke(new Action(() =>
                {
                    cbSucursales_DropDown(sender, e);
                }));
                if (cbSucursales.Items.Count != -1)
                    for (int ss = 0; ss < cbSucursales.Items.Count; ss++)
                    {
                        this.Invoke(new Action(() =>
                        {
                            cbSucursales_DropDown(sender, e);
                            cbSucursales.SelectedIndex = ss;
                        }));
                        if (ss == 0)
                        {
                            m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                            m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                        }
                        if (ss != 0)
                        {
                            //divisiones 
                            this.Invoke(new Action(() =>
                            {
                                cbDivision_DropDown(sender, e);
                            }));
                            if (cbDivisiones.Items.Count >= 2)
                                for (int dd = 0; dd < cbDivisiones.Items.Count; dd++)
                                {
                                    this.Invoke(new Action(() =>
                                    {
                                        cbDivision_DropDown(sender, e);
                                        cbDivisiones.SelectedIndex = dd;
                                    }));
                                    if (dd == 0)
                                    {
                                        m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                        m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                    }
                                    if (dd != 0)
                                    {
                                        //departamento
                                        this.Invoke(new Action(() =>
                                        {
                                            cbDepto_DropDown(sender, e);
                                        }));
                                        if (cbDepto.Items.Count >= 2)
                                            for (int dp = 0; dp < cbDepto.Items.Count; dp++)
                                            {
                                                this.Invoke(new Action(() =>
                                                {
                                                    cbDepto_DropDown(sender, e);
                                                    cbDepto.SelectedIndex = dp;
                                                }));
                                                if (dp == 0)
                                                {
                                                    m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                    m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                }
                                                if (dp != 0)
                                                {
                                                    //familia  
                                                    this.Invoke(new Action(() =>
                                                    {
                                                        cbFamilia_DropDown(sender, e);
                                                    }));
                                                    if (cbFamilia.Items.Count >= 2)
                                                        for (int fm = 0; fm < cbFamilia.Items.Count; fm++)
                                                        {
                                                            this.Invoke(new Action(() =>
                                                            {
                                                                cbFamilia_DropDown(sender, e);
                                                                cbFamilia.SelectedIndex = fm;
                                                            }));
                                                            if (fm == 0)
                                                            {
                                                                m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                            }
                                                            if (fm != 0)
                                                            {
                                                                //linea
                                                                this.Invoke(new Action(() =>
                                                                {
                                                                    cbLinea_DropDown(sender, e);
                                                                }));
                                                                if (cbLinea.Items.Count >= 2)
                                                                    for (int ln = 0; ln < cbLinea.Items.Count; ln++)
                                                                    {
                                                                        this.Invoke(new Action(() =>
                                                                        {
                                                                            cbLinea_DropDown(sender, e);
                                                                            cbLinea.SelectedIndex = ln;
                                                                        }));
                                                                        if (ln == 0)
                                                                        {
                                                                            m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                            m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                        }
                                                                        if (ln != 0)
                                                                        {
                                                                            //l1         
                                                                            this.Invoke(new Action(() =>
                                                                            {
                                                                                cbL1_DropDown(sender, e);
                                                                            }));
                                                                            if (cbL1.Items.Count != -1)
                                                                                for (int cl1 = 0; cl1 < cbL1.Items.Count; cl1++)
                                                                                {
                                                                                    this.Invoke(new Action(() =>
                                                                                    {
                                                                                        cbL1_DropDown(sender, e);
                                                                                        cbL1.SelectedIndex = cl1;
                                                                                    }));
                                                                                    if (cl1 == 0)
                                                                                    {
                                                                                        m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                        m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                                    }
                                                                                    if (cl1 != 0)
                                                                                    {
                                                                                        this.Invoke(new Action(() =>
                                                                                        {
                                                                                            cbMarca_DropDown(sender, e);
                                                                                        }));

                                                                                        if (cbMarca.Items.Count != -1)
                                                                                        {
                                                                                            this.Invoke(new Action(() =>
                                                                                            {
                                                                                                cbMarca_DropDown(sender, e);
                                                                                                cbMarca.SelectedIndex = 0;
                                                                                            }));

                                                                                            m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                            m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                                        }
                                                                                        //l2
                                                                                        this.Invoke(new Action(() =>
                {
                    cbL2_DropDown(sender, e);

                }));
                                                                                        if (cbL2.Items.Count != 1)
                                                                                            for (int cl2 = 0; cl2 < cbL2.Items.Count; cl2++)
                                                                                            {
                                                                                                this.Invoke(new Action(() =>
                {
                    cbL2_DropDown(sender, e);
                    cbL2.SelectedIndex = cl2;
                }));
                                                                                                if (cl2 == 0)
                                                                                                {
                                                                                                    m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                                    m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                                                }
                                                                                                if (cl2 != 0)
                                                                                                {
                                                                                                    //l3
                                                                                                    this.Invoke(new Action(() =>
                {
                    cbL3_DropDown(sender, e);
                }));
                                                                                                    if (cbL3.Items.Count != 1)
                                                                                                        for (int cl3 = 0; cl3 < cbL3.Items.Count; cl3++)
                                                                                                        {
                                                                                                            this.Invoke(new Action(() =>
                {
                    cbL3_DropDown(sender, e);
                    cbL3.SelectedIndex = cl3;
                }));
                                                                                                            if (cl3 == 0)
                                                                                                            {
                                                                                                                m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                                                m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                                                            }
                                                                                                            if (cl3 != 0)
                                                                                                            {
                                                                                                                //l4
                                                                                                                this.Invoke(new Action(() =>
                {
                    cbL4_DropDown(sender, e);
                }));
                                                                                                                if (cbL4.Items.Count != 1)
                                                                                                                    for (int cl4 = 0; cl4 < cbL4.Items.Count; cl4++)
                                                                                                                    {
                                                                                                                        this.Invoke(new Action(() =>
                {

                    cbL4_DropDown(sender, e);
                    cbL4.SelectedIndex = cl4;
                }));
                                                                                                                        if (cl4 == 0)
                                                                                                                        {
                                                                                                                            m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                                                            m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                                                                        }
                                                                                                                        if (cl4 != 0)
                                                                                                                        {
                                                                                                                            //l5
                                                                                                                            this.Invoke(new Action(() =>
                {
                    cbL5_DropDown(sender, e);
                }));
                                                                                                                            if (cbL5.Items.Count != 1)
                                                                                                                                for (int cl5 = 0; cl5 < cbL5.Items.Count; cl5++)
                                                                                                                                {
                                                                                                                                    this.Invoke(new Action(() =>
                {
                    cbL5_DropDown(sender, e);
                    cbL5.SelectedIndex = cl5;
                }));
                                                                                                                                    if (cl5 == 0)
                                                                                                                                    {
                                                                                                                                        m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                                                                        m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                                                                                    }
                                                                                                                                    this.Refresh();
                                                                                                                                    if (cl5 != 0)
                                                                                                                                    {
                                                                                                                                        //l6
                                                                                                                                        this.Invoke(new Action(() =>
                {
                    cbL6_DropDown(sender, e);

                }));
                                                                                                                                        if (cbL6.Items.Count != 1)
                                                                                                                                            for (int cl6 = 0; cl6 < cbL6.Items.Count; cl6++)
                                                                                                                                            {
                                                                                                                                                this.Invoke(new Action(() =>
                                                                                                                                                {
                                                                                                                                                    cbL6_DropDown(sender, e);
                                                                                                                                                    cbL6.SelectedIndex = cl6;
                                                                                                                                                }));

                                                                                                                                                if (cl6 == 0)
                                                                                                                                                {
                                                                                                                                                    m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                                                                                    m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
                                                                                                                                                }
                                                                                                                                                if (cl6 != 0)
                                                                                                                                                {
                                                                                                                                                    //marca
                                                                                                                                                    this.Invoke(new Action(() =>
                                                                                                                                                    {
                                                                                                                                                        cbMarca_DropDown(sender, e);
                                                                                                                                                    }));

                                                                                                                                                    if (cbMarca.Items.Count != 1)
                                                                                                                                                        
                                                                                                                                                            this.Invoke(new Action(() =>
                                                                                                                                                            {
                                                                                                                                                                cbMarca_DropDown(sender, e);
                                                                                                                                                            }));

                                                                                                                                                            this.Invoke(new Action(() =>
                                                                                                                                                            {
                                                                                                                                                                cbMarca.SelectedIndex = 0;

                                                                                                                                                            }));
                                                                                                                                                            m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
                                                                                                                                                            m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);

                                                                                                                                                         //marca
                                                                                                                                                }
                                                                                                                                            } //l6
                                                                                                                                    }
                                                                                                                                }//l5
                                                                                                                        }
                                                                                                                    }//l4
                                                                                                            }
                                                                                                        }//l3
                                                                                                }
                                                                                            }//l2
                                                                                    }
                                                                                }//l1
                                                                        }
                                                                    }//linea
                                                            }
                                                        }//familia
                                                }
                                            }//dep
                                    }
                                }//div             
                        }

                    }//suc
#endregion
            }
            this.Invoke(new Action(() =>
            {
            cbSucursales_DropDown(sender, e);
            }));
            this.Invoke(new Action(() =>
            {
                cbMarca_DropDown(sender, e);
                cbMarca.SelectedIndex = 0;
            }));
            m_DIASMESESANOS(CED1_fechaI, CED1_fechaF);
            m_DIASMESESANOS_guardar(CED1_fechaI, CED1_fechaF);
            this.Invoke(new Action(() =>
            {
                cbSucursales_DropDown(sender, e);
            }));
            this.Invoke(new Action(() =>
            {
                cbSucursales.SelectedIndex = 0;
            }));
            proyectar = false;
            this.Invoke(new Action(() =>
               {
                   PanelCedulafinalizada.Visible = true;
               }));
            Cedula3 c3 = new Cedula3(true);
            c3.ShowDialog();
        }

        public Cedula2(bool generar)
        {
            generarcedula = generar;
            InitializeComponent();
            #region Abrir conexion dwh

            Conn = new MySqlConnection(conexion);
            try
            {
                Conn.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }

            #endregion Abrir conexion dwh
            #region Abrir conexion cipsis

            ConnCipsis = new MySqlConnection(conexion2);
            try
            {
                ConnCipsis.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }

            #endregion Abrir conexion cipsis
        }
        private void cbSucursales_Click(object sender, EventArgs e)
        {

        }
        private void nulos(int grid, int columna, string currency)
        {
            for (int i = 1; i <= dgv1.Rows.Count - 1; i++)
            {
                switch (grid)
                {
                    case 1:
                        #region grid1
                        if (dgv1.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv1.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv1.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 2:
                        #region grid2
                        if (dgv2.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv2.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv2.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 3:
                        #region grid3
                        if (dgv3.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv3.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv3.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 4:
                        #region grid4
                        if (dgv4.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv4.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv4.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 5:
                        #region grid5
                        if (dgv5.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv5.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv5.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 6:
                        #region grid6
                        if (dgv6.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv6.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv6.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 7:
                        #region grid7
                        if (dgv7.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv7.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv7.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 8:
                        #region grid8
                        if (dgv8.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv8.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv8.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 9:
                        #region grid9
                        if (dgv9.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv9.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv9.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 10:
                        #region grid10
                        if (dgv10.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv10.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv10.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 11:
                        #region grid11
                        if (dgv11.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv11.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv11.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                    case 12:
                        #region grid12
                        if (dgv12.Rows[i].Cells[columna].Value == null)
                        {
                            if (currency != "")
                            {
                                dgv12.Rows[i].Cells[columna].Value = "$0";
                            }
                            else
                            {
                                dgv12.Rows[i].Cells[columna].Value = "0";

                            }
                        }
                        #endregion
                        break;
                }
            }
        }
        private void ConsultaHistorico(int mes, int anio,int grid)
        {
            string fecha_inicio = anio.ToString() + "-" + mes.ToString("d2")+ "-01";
            string fecha_final = anio.ToString() + "-" + (mes+1).ToString("d2") + "-01";
            string ifnullnoSuc = ""; string selectNosuc = ""; string ifnull = ""; string groupbynosuc = ""; string whereQ = "";
            double val1 = 0;
            double val2 = 0;
            double val3 = 0;
            if (where != "")
            {
                whereQ = " and " + where;
            }
            else
            {
                whereQ = "";
            }
            if (soloSuc == false)
            {
                ifnull = "e." + groupby;
                ifnullnoSuc = "e.iddivisiones,0";
                selectNosuc = "";
                groupbynosuc = "";
            }
            else
            {
                ifnull = "v." + groupby;
                ifnullnoSuc = "sub." + groupby + ", " + ifnull;
                selectNosuc = "v." + groupby;
                groupbynosuc = "GROUP BY v." + groupby;
            }
            string consultaC = "", consultaV = "";
            if (solototal == true)
            {
                consultaC = "SELECT IFNULL(SUM(sub.importe),0) AS importe, IFNULL(SUM(sub.unidades),0) AS unidades,IFNULL(SUM(sub.prom),0)  AS promedio FROM estarticulo e LEFT JOIN (SELECT idarticulo,SUM(impllenoregsiva+impllenopromsiva+impllenonormalsiva+impllenodesctosiva)/SUM(ctdregalo+ctdprom+ctdnormal+ctddescto+ctdcan) AS prom,SUM(impllenoregsiva+impllenopromsiva+impllenonormalsiva+impllenodesctosiva)AS importe,SUM(ctdregalo+ctdprom+ctdnormal+ctddescto+ctdcan) as unidades  FROM  ventasbase v INNER JOIN fecha f ON v.idfecha = f.idfecha  AND F.FECHA BETWEEN '" + FechaAI.ToString("yyyy-MM-dd") + "' AND '" + FechaAF.ToString("yyyy-MM-dd") + "'  inner JOIN sucursal AS s ON v.idsucursal=s.idsucursal  AND s.visible='S') AS sub ON e.idarticulo = sub.idarticulo where e.iddivisiones=1";
            }
            else
            {
                consultaC = "SELECT IFNULL(SUM(v.ctd), 0) AS unidadesCompra,IFNULL(SUM(v.costo), 0) AS ImporteCompra,IFNULL(" + ifnull + ", 0) AS grupo FROM fecha AS f INNER JOIN recibobase AS v ON f.idfecha = v.idfecha AND F.FECHA BETWEEN '" + fecha_inicio + "'         AND '" + fecha_final + "' INNER JOIN sucursal AS s ON v.idsucursal = s.idsucursal  AND s.visible = 'S' INNER JOIN estarticulo AS e ON v.idarticulo = e.idarticulo WHERE e.iddivisiones = 1 " + whereQ.Replace("V.", "e.") + "  " + whereLeft + "  GROUP BY grupo ";

                consultaV = "SELECT IFNULL(SUM(v.impllenototal), 0) AS importeVenta,IFNULL(SUM(v.ctdneta), 0) AS UnidadesVenta,IFNULL(ABS(SUM(v.impllenototal) / SUM(v.ctdneta)),0) AS PrecioUnitarioVenta,IFNULL(" + ifnull + ", 0) AS grupo FROM fecha AS f INNER JOIN ventasbase AS v ON f.idfecha = v.idfecha AND F.FECHA BETWEEN '" + fecha_inicio + "'         AND '" + fecha_final + "' INNER JOIN sucursal AS s ON v.idsucursal = s.idsucursal AND s.visible = 'S' INNER JOIN estarticulo AS e ON v.idarticulo = e.idarticulo WHERE e.iddivisiones = 1 " + whereQ.Replace("V.","e.") + "  " + whereLeft + "  GROUP BY grupo ;";
            }
            #region compras
            cmd = new MySqlCommand(consultaC, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if(total==true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while(existe==false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["unidadesCompra"].ToString());
                                    val2 = double.Parse(reader["ImporteCompra"].ToString());
                                    m_LLENAR_DGV(grid, x, 5, val1.ToString());
                                    m_LLENAR_DGV(grid, x, 6, val2.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while(existe==false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["unidadesCompra"].ToString());
                                    val2 = double.Parse(reader["ImporteCompra"].ToString());
                                    m_LLENAR_DGV(grid, 1, 5, val1.ToString());
                                    m_LLENAR_DGV(grid, 1, 6, val2.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulos(grid,5,"");
            nulos(grid, 6, "$");
            #endregion
            #region Ventas
            cmd = new MySqlCommand(consultaV, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["UnidadesVenta"].ToString());
                                    val2 = double.Parse(reader["PrecioUnitarioVenta"].ToString());
                                    val3 = double.Parse(reader["importeVenta"].ToString());
                                    m_LLENAR_DGV(grid, x, 7, val1.ToString());
                                    m_LLENAR_DGV(grid, x, 8, val2.ToString("C2"));
                                    m_LLENAR_DGV(grid, x, 9, val3.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["UnidadesVenta"].ToString());
                                    val2 = double.Parse(reader["PrecioUnitarioVenta"].ToString());
                                    val3 = double.Parse(reader["importeVenta"].ToString());
                                    m_LLENAR_DGV(grid, 1, 7, val1.ToString());
                                    m_LLENAR_DGV(grid, 1, 8, val2.ToString("C2"));
                                    m_LLENAR_DGV(grid, 1, 9, val3.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulos(grid, 7, "");
            nulos(grid, 8, "$");
            nulos(grid, 9, "$");
            #endregion
        }
        private void ConsultaParcial(int mes, int anio,int dia,int grid)
        {
            dgvAux.Rows.Clear();
            dgvAux.Rows.Add(dgv1.Rows.Count);
            string fecha_inicio = anio.ToString() + "-" + mes.ToString("d2") + "-01";
            string fecha_final = anio.ToString() + "-" + (mes + 1).ToString("d2") + "-01";
            string ifnullnoSuc = ""; string selectNosuc = ""; string ifnull = ""; string groupbynosuc = ""; string whereQ = "";
            double val1 = 0;
            double val2 = 0;
            if (where != "")
            {
                whereQ = " and " + where.Replace("e.","V.");

            }
            else
            {
                whereQ = "";
            }
            if (soloSuc == false)
            {
                ifnull = "e." + groupby;
                ifnullnoSuc = "V.iddivisiones,0";
                selectNosuc = "";
                groupbynosuc = "";
            }
            else
            {
                ifnull = "V." + groupby;
                ifnullnoSuc = "sub." + groupby + ", " + ifnull;
                selectNosuc = "V." + groupby;
                groupbynosuc = "GROUP BY v." + groupby;
            }
            string consultaC = "", consultaVT = "", consultaVM = "", consultaVD = "", consultaPrecioPVentas = "", consultaVMS = "";
            if (solototal == true)
            {
            }
            else
            {
                #region ventas
                consultaVT = "SELECT IFNULL(SUM(ctdneta),0) AS ventaT, IFNULL( SUM(impnormal),0) AS ventaTI,IFNULL("+ifnull+",0) AS grupo FROM sucursal AS s INNER JOIN fecha AS f INNER JOIN estarticulo AS e  INNER JOIN ventasbase AS v ON s.`idsucursal`=v.`idsucursal` AND s.`visible`='S' AND f.`idFecha`=v.`idfecha` AND e.`idarticulo`=v.`idarticulo` WHERE v.`iddivisiones`=1 "+whereQ+" "+whereLeft+" AND f.`Anio`='"+anio+"' GROUP BY grupo";
                consultaVM = "SELECT IFNULL(SUM(ctdneta),0) AS ventaT, IFNULL( SUM(impnormal),0) AS ventaTI,IFNULL(" + ifnull + ",0) AS grupo FROM sucursal AS s INNER JOIN fecha AS f INNER JOIN estarticulo AS e  INNER JOIN ventasbase AS v ON s.`idsucursal`=v.`idsucursal` AND s.`visible`='S' AND f.`idFecha`=v.`idfecha` AND e.`idarticulo`=v.`idarticulo` WHERE v.`iddivisiones`=1 " + whereQ + " " + whereLeft + " AND f.`Anio`='" + anio + "' and f.mes='"+mes+"' GROUP BY grupo";
                consultaVD = "SELECT IFNULL(SUM(ctdneta),0) AS ventaT, IFNULL( SUM(impnormal),0) AS ventaTI,IFNULL(" + ifnull + ",0) AS grupo FROM sucursal AS s INNER JOIN fecha AS f INNER JOIN estarticulo AS e  INNER JOIN ventasbase AS v ON s.`idsucursal`=v.`idsucursal` AND s.`visible`='S' AND f.`idFecha`=v.`idfecha` AND e.`idarticulo`=v.`idarticulo` WHERE v.`iddivisiones`=1 " + whereQ + " " + whereLeft + " AND f.`Anio`='" + (anio+1) + "' and f.mes='" + mes + "' AND f.`Dia` BETWEEN 1 AND "+dia+" GROUP BY grupo";
                consultaPrecioPVentas = "SELECT IFNULL(ABS(SUM(v.impllenototal) / SUM(v.ctdneta)),0) AS PrecioUnitarioVenta,IFNULL(" + ifnull + ", 0) AS grupo FROM fecha AS f INNER JOIN ventasbase AS v ON f.idfecha = v.idfecha AND F.FECHA BETWEEN '" + fecha_inicio + "'         AND '" + fecha_final + "' INNER JOIN sucursal AS s ON v.idsucursal = s.idsucursal AND s.visible = 'S' INNER JOIN estarticulo AS e ON v.idarticulo = e.idarticulo WHERE e.iddivisiones = 1 " + whereQ + "  " + whereLeft + "  GROUP BY grupo ;";
                #endregion
                #region compras
                #region venta mes sig
                consultaVMS = "SELECT IFNULL(SUM(ctdneta),0) AS ventaT, IFNULL( SUM(impnormal),0) AS ventaTI,IFNULL(" + ifnull + ",0) AS grupo FROM sucursal AS s INNER JOIN fecha AS f INNER JOIN estarticulo AS e  INNER JOIN ventasbase AS v ON s.`idsucursal`=v.`idsucursal` AND s.`visible`='S' AND f.`idFecha`=v.`idfecha` AND e.`idarticulo`=v.`idarticulo` WHERE v.`iddivisiones`=1 " + whereQ + " " + whereLeft + " AND f.`Anio`='" + anio + "' and f.mes='" + (mes+1) + "' GROUP BY grupo";
                #endregion
                consultaC = "SELECT IFNULL(SUM(v.ctd), 0) AS unidadesCompra,IFNULL(SUM(v.costo), 0) AS ImporteCompra,IFNULL(" + ifnull + ", 0) AS grupo FROM fecha AS f INNER JOIN recibobase AS v ON f.idfecha = v.idfecha AND f.`Anio`='" + (anio + 1) + "' and f.mes='" + mes + "' AND f.`Dia` BETWEEN 1 AND " + dia + " INNER JOIN sucursal AS s ON v.idsucursal = s.idsucursal  AND s.visible = 'S' INNER JOIN estarticulo AS e ON v.idarticulo = e.idarticulo WHERE e.iddivisiones = 1 " + whereQ.Replace("V.","e.") + "  " + whereLeft + "  GROUP BY grupo ";
                #endregion
            }
            #region ventas 
            #region ventasT
            cmd = new MySqlCommand(consultaVT, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[0].Value=val1.ToString();
                                    dgvAux.Rows[x].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[0].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(0);
            nulosAux(1);
            #endregion
            #region ventasM
            cmd = new MySqlCommand(consultaVM, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(2);
            nulosAux(3);
            #endregion
            #region ventasD
            cmd = new MySqlCommand(consultaVD, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[4].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[5].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[4].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[5].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(4);
            nulosAux(5);
            #endregion
            #region ventasPrecioP
            cmd = new MySqlCommand(consultaPrecioPVentas, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["PrecioUnitarioVenta"].ToString());
                                    m_LLENAR_DGV(grid, x, 8, val1.ToString("C2"));

                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["PrecioUnitarioVenta"].ToString());
                                    m_LLENAR_DGV(grid, 1, 8, val1.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulos(grid, 8, "$");
            #endregion
            #region procesosV
            int ddias = DateTime.DaysInMonth((anio+1), mes);
            ddias = ddias - dia;
            double asignacionPU = 0, asignacionPI = 0;
            for(int y=1;y<=dgv1.Rows.Count-1;y++)
            {
                #region asignacionCed1
                string q = "";
                if (solototal == true)
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";

                }
                else
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(y - 1)];
                }
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if(reader["asignacionUP"].ToString() == "")
                    {
                        asignacionPU = 0; asignacionPI = 0;
                    }
                    else 
                    {
                        asignacionPU = double.Parse(reader["asignacionUP"].ToString());
                        asignacionPI = double.Parse(reader["asignacionIP"].ToString());
                    }
                }
                reader.Close();
                #endregion ejecutar query
                double ventaTotalU = double.Parse(dgvAux.Rows[y].Cells[0].Value.ToString());
                double ventaTotalI = double.Parse(dgvAux.Rows[y].Cells[1].Value.ToString());
                double ventaMensualU = double.Parse(dgvAux.Rows[y].Cells[2].Value.ToString());
                double ventaMensualI = double.Parse(dgvAux.Rows[y].Cells[3].Value.ToString());
                double ventaDiariaU = double.Parse(dgvAux.Rows[y].Cells[4].Value.ToString());
                double ventaDiariaI = double.Parse(dgvAux.Rows[y].Cells[5].Value.ToString());
                double proporcionU = 0 ,proporcionI=0;
                double ventaparcialU = 0;
                double ventaparcialI = 0;
                if(ventaMensualU==0||ventaTotalU==0)
                {
                    proporcionU = 0; 
                }
                else
                {
                    proporcionU = ventaMensualU / ventaTotalU;
                }
                if(ventaMensualI==0||ventaTotalI==0)
                {
                    proporcionI = 0;
                }
                else
                {
                    proporcionI = ventaMensualI / ventaTotalI;
                }
                if (asignacionPU == 0 || proporcionU == 0)
                {
                    ventaparcialU = 0; 
                }
                else
                {
                    ventaparcialU = asignacionPU * proporcionU;
                }
                if(asignacionPI==0||proporcionI==0)
                {
                    ventaparcialI = 0;
                }
                else
                {
                    ventaparcialI = asignacionPI * proporcionI;
                }
                if(ventaparcialU==0)
                {
                    ventaparcialU = 0;
                }
                else
                {
                    ventaparcialU = ventaparcialU / 30.4;
                }
                if(ventaparcialI==0)
                {
                    ventaparcialI = 0;
                }
                else
                {
                    ventaparcialI = ventaparcialI / 30.4;
                }
                   if(ventaparcialU==0||ddias==0)
                   {
                       ventaparcialU = 0; 
                   }
                   else
                   {
                       ventaparcialU = (ventaparcialU * ddias) + ventaDiariaU;
                   }
                if(ventaparcialI==0)
                {
                    ventaparcialI = 0;
                }
                else
                {
                    ventaparcialI = (ventaparcialI * ddias) + ventaDiariaI;
                }
                m_LLENAR_DGV(grid, y, 7, ventaparcialU.ToString("N0"));
                m_LLENAR_DGV(grid, y, 9, ventaparcialI.ToString("C2"));
                m_REFRESH_DGV();
            }
            #endregion
            #endregion
            #region compras
            dgvAux.Rows.Clear();
            dgvAux.Rows.Add(dgv1.Rows.Count);
            #region ventasT
            cmd = new MySqlCommand(consultaVT, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[0].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[0].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(0);
            nulosAux(1);
            #endregion
            #region ventasM
            cmd = new MySqlCommand(consultaVM, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(2);
            nulosAux(3);
            #endregion
            #region ventasMS
            cmd = new MySqlCommand(consultaVMS, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[4].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[5].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[4].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[5].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(4);
            nulosAux(5);
            #endregion
            #region compras
            cmd = new MySqlCommand(consultaC, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["unidadesCompra"].ToString());
                                    val2 = double.Parse(reader["ImporteCompra"].ToString());
                                    dgvAux.Rows[x].Cells[6].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[7].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["unidadesCompra"].ToString());
                                    val2 = double.Parse(reader["ImporteCompra"].ToString());
                                    dgvAux.Rows[1].Cells[6].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[7].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(6);
            nulosAux(7);
            #endregion
            #region procesos
            for (int y = 1; y <= dgv1.Rows.Count - 1; y++)
            {
                #region asignacionCed1
                string q = "";
                if (solototal == true)
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";

                }
                else
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(y - 1)];
                }
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["asignacionUP"].ToString() == "")
                    {
                        asignacionPU = 0; asignacionPI = 0;
                    }
                    else
                    {
                        asignacionPU = double.Parse(reader["asignacionUP"].ToString());
                        asignacionPI = double.Parse(reader["asignacionIP"].ToString());
                    }
                }
                reader.Close();
                #endregion ejecutar query
                double ventaTotalU = double.Parse(dgvAux.Rows[y].Cells[0].Value.ToString());
                double ventaTotalI = double.Parse(dgvAux.Rows[y].Cells[1].Value.ToString());
                double ventaMensualU = double.Parse(dgvAux.Rows[y].Cells[2].Value.ToString());
                double ventaMensualI = double.Parse(dgvAux.Rows[y].Cells[3].Value.ToString());
                double proporcionU = 0, proporcionI = 0;
                double ventaparcialU = 0;
                double ventaparcialI = 0;
                unidadesrecibo[y] = double.Parse(dgvAux.Rows[y].Cells[6].Value.ToString());
                costodscto[y] = double.Parse(dgvAux.Rows[y].Cells[7].Value.ToString());
                if (ventaMensualU == 0 || ventaTotalU == 0)
                {
                    proporcionU = 0; proporcionI = 0;
                }
                else
                {
                    proporcionU = ventaMensualU / ventaTotalU;
                    proporcionI = ventaMensualI / ventaTotalI;
                }
                if (asignacionPU == 0 || proporcionU == 0)
                {
                    ventaparcialU = 0; ventaparcialI = 0; ventaparcialU = 0; ventaparcialI = 0;
                }
                else
                {
                    ventaparcialU = asignacionPU * proporcionU;
                    ventaparcialI = asignacionPI * proporcionI;
                }
                if (ventaparcialU == 0)
                {
                    ventaparcialU = 0;
                    ventaparcialI = 0;
                }
                else
                {
                    ventaparcialU = ventaparcialU / 30.4;
                    ventaparcialI = ventaparcialI / 30.4;
                }
                if (ventaparcialU == 0 || ddias == 0)
                {
                    ventaparcialU = 0; ventaparcialI = 0;
                }
                else
                {
                    ventaparcialU = (ventaparcialU * ddias);
                    ventaparcialI = (ventaparcialI * ddias);
                }

                double rotacionRow = leergrid(grid,12,y);
                comprasU[y] = ((12 / rotacionRow) * (ventaparcialU) - leergrid(grid, 1, y) + leergrid(grid,7,y));
                comprasI[y] = comprasU[y] * leergrid(grid,3,y);
                if (comprasU[y] <= 0)
                {
                    unidadesSaldo[y] = leergrid(grid, 1, y) - leergrid(grid, 7, y);
                }
                else
                {
                    unidadesSaldo[y] = leergrid(grid, 1, y) + comprasU[y] - leergrid(grid, 7, y);
                }
                if (unidadesSaldo[y] <= 0)
                {
                    unidadesSaldo[y] = unidadesSaldo[y] * -1;
                }
                importeSaldos[y] = unidadesSaldo[y] * leergrid(grid, 8, y);
                comprasU[y] = comprasU[y] + unidadesrecibo[y];
                comprasI[y] = comprasI[y] + costodscto[y];
                m_LLENAR_DGV(grid, y, 5, comprasU[y].ToString("n0"));
                m_LLENAR_DGV(grid, y, 6, comprasI[y].ToString("C2"));
                m_LLENAR_DGV(grid, y, 10, unidadesSaldo[y].ToString("n0"));
                m_LLENAR_DGV(grid, y, 11, importeSaldos[y].ToString("C2"));
                //nulos(grid, 5, "");
                //nulos(grid, 6, "$");
            }
            #endregion
            m_REFRESH_DGV();
            m_REFRESH_DGV();

            #endregion 
        }
        private void ConsultaProyectado(int mes, int anio, int grid)
        {
            dgvAux.Rows.Clear();
            dgvAux.Rows.Add(dgv1.Rows.Count);
            string fecha_inicio = anio.ToString() + "-" + mes.ToString("d2") + "-01";
            string fecha_final = anio.ToString() + "-" + (mes + 1).ToString("d2") + "-01";
            string ifnullnoSuc = ""; string selectNosuc = ""; string ifnull = ""; string groupbynosuc = ""; string whereQ = "";
            double val1 = 0;
            double val2 = 0;
            //double val3 = 0;
            if (where != "")
            {
                whereQ = " and " + where.Replace("e.", "V.");

            }
            else
            {
                whereQ = "";
            }
            if (soloSuc == false)
            {
                ifnull = "e." + groupby;
                ifnullnoSuc = "V.iddivisiones,0";
                selectNosuc = "";
                groupbynosuc = "";
            }
            else
            {
                ifnull = "V." + groupby;
                ifnullnoSuc = "sub." + groupby + ", " + ifnull;
                selectNosuc = "V." + groupby;
                groupbynosuc = "GROUP BY v." + groupby;
            }
            string consultaVT = "", consultaVM = "", consultaPrecioPVentas = "", consultaVMS = "";
            if (solototal == true)
            {
            }
            else
            {
                #region ventas
                consultaVT = "SELECT IFNULL(SUM(ctdneta),0) AS ventaT, IFNULL( SUM(impnormal),0) AS ventaTI,IFNULL(" + ifnull + ",0) AS grupo FROM sucursal AS s INNER JOIN fecha AS f INNER JOIN estarticulo AS e  INNER JOIN ventasbase AS v ON s.`idsucursal`=v.`idsucursal` AND s.`visible`='S' AND f.`idFecha`=v.`idfecha` AND e.`idarticulo`=v.`idarticulo` WHERE v.`iddivisiones`=1 " + whereQ + " " + whereLeft + " AND f.`Anio`='" + anio + "' GROUP BY grupo";
                consultaVM = "SELECT IFNULL(SUM(ctdneta),0) AS ventaT, IFNULL( SUM(impnormal),0) AS ventaTI,IFNULL(" + ifnull + ",0) AS grupo FROM sucursal AS s INNER JOIN fecha AS f INNER JOIN estarticulo AS e  INNER JOIN ventasbase AS v ON s.`idsucursal`=v.`idsucursal` AND s.`visible`='S' AND f.`idFecha`=v.`idfecha` AND e.`idarticulo`=v.`idarticulo` WHERE v.`iddivisiones`=1 " + whereQ + " " + whereLeft + " AND f.`Anio`='" + anio + "' and f.mes='" + mes + "' GROUP BY grupo";
                consultaPrecioPVentas = "SELECT IFNULL(ABS(SUM(v.impllenototal) / SUM(v.ctdneta)),0) AS PrecioUnitarioVenta,IFNULL(" + ifnull + ", 0) AS grupo FROM fecha AS f INNER JOIN ventasbase AS v ON f.idfecha = v.idfecha AND F.FECHA BETWEEN '" + fecha_inicio + "'         AND '" + fecha_final + "' INNER JOIN sucursal AS s ON v.idsucursal = s.idsucursal AND s.visible = 'S' INNER JOIN estarticulo AS e ON v.idarticulo = e.idarticulo WHERE e.iddivisiones = 1 " + whereQ + "  " + whereLeft + "  GROUP BY grupo ;";
                #endregion
                #region compras
                #region venta mes sig
                consultaVMS = "SELECT IFNULL(SUM(ctdneta),0) AS ventaT, IFNULL( SUM(impnormal),0) AS ventaTI,IFNULL(" + ifnull + ",0) AS grupo FROM sucursal AS s INNER JOIN fecha AS f INNER JOIN estarticulo AS e  INNER JOIN ventasbase AS v ON s.`idsucursal`=v.`idsucursal` AND s.`visible`='S' AND f.`idFecha`=v.`idfecha` AND e.`idarticulo`=v.`idarticulo` WHERE v.`iddivisiones`=1 " + whereQ + " " + whereLeft + " AND f.`Anio`='" + anio + "' and f.mes='" + (mes + 1) + "' GROUP BY grupo";
                #endregion
                #endregion
            }
            #region ventas
            #region ventasT
            cmd = new MySqlCommand(consultaVT, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[0].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[0].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(0);
            nulosAux(1);
            #endregion
            #region ventasM
            cmd = new MySqlCommand(consultaVM, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(2);
            nulosAux(3);
            #endregion
            #region ventasPrecioP
            cmd = new MySqlCommand(consultaPrecioPVentas, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["PrecioUnitarioVenta"].ToString());
                                    m_LLENAR_DGV(grid, x, 8, val1.ToString("C2"));

                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["PrecioUnitarioVenta"].ToString());
                                    m_LLENAR_DGV(grid, 1, 8, val1.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulos(grid, 8, "$");
            #endregion
            #region procesosV
            double asignacionPU = 0, asignacionPI = 0;
            for (int y = 1; y <= dgv1.Rows.Count - 1; y++)
            {
                #region asignacionCed1
                string q = "";
                if (solototal == true)
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";

                }
                else
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(y - 1)];
                }
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["asignacionUP"].ToString() == "")
                    {
                        asignacionPU = 0; asignacionPI = 0;
                    }
                    else
                    {
                        asignacionPU = double.Parse(reader["asignacionUP"].ToString());
                        asignacionPI = double.Parse(reader["asignacionIP"].ToString());
                    }
                }
                reader.Close();
                #endregion ejecutar query
                double ventaTotalU = double.Parse(dgvAux.Rows[y].Cells[0].Value.ToString());
                double ventaTotalI = double.Parse(dgvAux.Rows[y].Cells[1].Value.ToString());
                double ventaMensualU = double.Parse(dgvAux.Rows[y].Cells[2].Value.ToString());
                double ventaMensualI = double.Parse(dgvAux.Rows[y].Cells[3].Value.ToString());
                double proporcionU = 0, proporcionI = 0;
                double ventaparcialU = 0;
                double ventaparcialI = 0;
                if (ventaMensualU == 0 || ventaTotalU == 0)
                {
                    proporcionU = 0;
                }
                else
                {
                    proporcionU = ventaMensualU / ventaTotalU;
                }
                if (ventaMensualI == 0 || ventaTotalI == 0)
                {
                    proporcionI = 0;
                }
                else
                {
                    proporcionI = ventaMensualI / ventaTotalI;
                }
                if (asignacionPU == 0 || proporcionU == 0)
                {
                    ventaparcialU = 0;
                }
                else
                {
                    ventaparcialU = asignacionPU * proporcionU;
                }
                if (asignacionPI == 0 || proporcionI == 0)
                {
                    ventaparcialI = 0;
                }
                else
                {
                    ventaparcialI = asignacionPI * proporcionI;
                }
               
                m_LLENAR_DGV(grid, y, 7, ventaparcialU.ToString("N0"));
                m_LLENAR_DGV(grid, y, 9, ventaparcialI.ToString("C2"));
                m_REFRESH_DGV();
            }
            #endregion
            #endregion
            #region compras
            dgvAux.Rows.Clear();
            dgvAux.Rows.Add(dgv1.Rows.Count);
            #region ventasT
            cmd = new MySqlCommand(consultaVT, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[0].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[0].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[1].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(0);
            nulosAux(1);
            #endregion
            #region ventasM
            cmd = new MySqlCommand(consultaVM, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[2].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[3].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(2);
            nulosAux(3);
            #endregion
            #region ventasMS
            cmd = new MySqlCommand(consultaVMS, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[x].Cells[4].Value = val1.ToString();
                                    dgvAux.Rows[x].Cells[5].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    val1 = double.Parse(reader["ventaT"].ToString());
                                    val2 = double.Parse(reader["ventaTI"].ToString());
                                    dgvAux.Rows[1].Cells[4].Value = val1.ToString();
                                    dgvAux.Rows[1].Cells[5].Value = val2.ToString();
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulosAux(4);
            nulosAux(5);
            #endregion
            #region procesos
            for (int y = 1; y <= dgv1.Rows.Count - 1; y++)
            {
                #region asignacionCed1
                string q = "";
                if (solototal == true)
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' and ZapateriasTorreon=1";

                }
                else
                {
                    q = "SELECT asignacionUP,asignacionIP FROM cedula2 WHERE nombre='" + Properties.Settings.Default.escenario + "' " + querycargar[(y - 1)];
                }
                cmd = new MySqlCommand(q, Conn);
                reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (reader["asignacionUP"].ToString() == "")
                    {
                        asignacionPU = 0; asignacionPI = 0;
                    }
                    else
                    {
                        asignacionPU = double.Parse(reader["asignacionUP"].ToString());
                        asignacionPI = double.Parse(reader["asignacionIP"].ToString());
                    }
                }
                reader.Close();
                #endregion ejecutar query
                double ventaTotalU = double.Parse(dgvAux.Rows[y].Cells[0].Value.ToString());
                double ventaTotalI = double.Parse(dgvAux.Rows[y].Cells[1].Value.ToString());
                double ventaMensualU = double.Parse(dgvAux.Rows[y].Cells[2].Value.ToString());
                double ventaMensualI = double.Parse(dgvAux.Rows[y].Cells[3].Value.ToString());
                double proporcionU = 0, proporcionI = 0;
                double ventaparcialU = 0;
                double ventaparcialI = 0;
                if (ventaMensualU == 0 || ventaTotalU == 0)
                {
                    proporcionU = 0; proporcionI = 0;
                }
                else
                {
                    proporcionU = ventaMensualU / ventaTotalU;
                    proporcionI = ventaMensualI / ventaTotalI;
                }
                if (asignacionPU == 0 || proporcionU == 0)
                {
                    ventaparcialU = 0; ventaparcialI = 0; ventaparcialU = 0; ventaparcialI = 0;
                }
                else
                {
                    ventaparcialU = asignacionPU * proporcionU;
                    ventaparcialI = asignacionPI * proporcionI;
                }
              
                double rotacionRow = leergrid(grid, 12, y);
                comprasU[y] = ((12 / rotacionRow) * (ventaparcialU) - leergrid(grid, 1, y) + leergrid(grid, 7, y));
                comprasI[y] = comprasU[y] * leergrid(grid, 3, y);
                if (comprasU[y] <= 0)
                {
                    unidadesSaldo[y] = leergrid(grid, 1, y) - leergrid(grid, 7, y);
                }
                else
                {
                    unidadesSaldo[y] = leergrid(grid, 1, y) + comprasU[y] - leergrid(grid, 7, y);
                }
                if (unidadesSaldo[y] <= 0)
                {
                    unidadesSaldo[y] = unidadesSaldo[y] * -1;
                }
                importeSaldos[y] = unidadesSaldo[y] * leergrid(grid, 8, y);
                //comprasU[y] = comprasU[y];
                //comprasI[y] = comprasI[y];
                m_LLENAR_DGV(grid, y, 5, comprasU[y].ToString("n0"));
                m_LLENAR_DGV(grid, y, 6, comprasI[y].ToString("C2"));
                m_LLENAR_DGV(grid, y, 10, unidadesSaldo[y].ToString("n0"));
                m_LLENAR_DGV(grid, y, 11, importeSaldos[y].ToString("C2"));
                //nulos(grid, 5, "");
                //nulos(grid, 6, "$");
            }
            #endregion
            m_REFRESH_DGV();
            m_REFRESH_DGV();

            #endregion
        }
        private void nulosAux(int columna)
        {
            for (int i = 1; i <= dgv1.Rows.Count - 1; i++)
            {
                if (dgvAux.Rows[i].Cells[columna].Value == null)
                {
                    dgvAux.Rows[i].Cells[columna].Value = "0";
                }
            }
        }
        private void SaldosInicialesConsulta(int mes, int anio, int grid,DateTime fecha)
        {
            string fecha_inicio = anio.ToString() + "-" + mes.ToString("d2") + "-01";
            string fecha_final = anio.ToString() + "-" + (mes + 1).ToString("d2") + "-01";
            string whereQ = ""; string ifnullnoSuc = ""; string selectNosuc = ""; string ifnull = ""; string groupbynosuc = ""; string consultaSaldos = "";
            if (where != "")
            {
                whereQ = " and " + where;
            }
            else
            {
                whereQ = "";
            }
            if (soloSuc == false)
            {
                ifnull = "e." + groupby;
                ifnullnoSuc = "e.iddivisiones,0";
                selectNosuc = "";
                //whereLeft = "";
                groupbynosuc = "";
            }
            else
            {
                ifnull = "v."+groupby;
                ifnullnoSuc = "sub." + groupby + ", " + ifnull;
                selectNosuc = "v." + groupby;
                groupbynosuc = "GROUP BY v." + groupby;
            }
            double val1 = 0, val2 = 0, val3 = 0;
            if (solototal == true)
            {
                
            }
            else
            {
                consultaSaldos = "SELECT IFNULL(SUM(v.`ctd`), 0) AS Unidades,IFNULL(SUM(v.`ventat`), 0) AS costo,IFNULL((SUM(v.`ventat`) / SUM(v.`ctd`)), 0) AS costoN,IFNULL(" + ifnull + ", 0) AS grupo FROM fecha AS f INNER JOIN sucursal AS s INNER JOIN estarticulo AS e INNER JOIN exist AS v ON f.`idFecha` = v.idfecha AND s.idsucursal = v.idsucursal AND e.`idarticulo` = v.idarticulo AND s.visible = 'S' AND f.`Fecha` = '" + fecha.ToString("yyyy-MM-dd") + "' WHERE e.iddivisiones=1 " + whereQ.Replace("V.","e.") +"  " + whereLeft + " GROUP BY grupo ";
            }
            #region Saldos
            cmd = new MySqlCommand(consultaSaldos, Conn);
            reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                if (solototal == true)
                {
                    //llenar
                }
                else
                {
                    if (total == true)
                    {
                        #region total
                        bool existe = false; int x = 1;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    //llenar
                                    val1 = double.Parse(reader["Unidades"].ToString());
                                    val2 = double.Parse(reader["costo"].ToString());
                                    val3 = double.Parse(reader["costoN"].ToString());
                                    m_LLENAR_DGV(grid, x, 1, val1.ToString());
                                    m_LLENAR_DGV(grid, x, 2, val2.ToString("C2"));
                                    m_LLENAR_DGV(grid, x, 3, val3.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                    else
                    {
                        #region individual
                        int x = 1; bool existe = false;
                        while (existe == false)
                        {
                            //llenar
                            if (idd.Contains(reader["grupo"].ToString()))
                            {
                                if (reader["grupo"].ToString() == idd[x])
                                {
                                    //llenar
                                    val1 = double.Parse(reader["Unidades"].ToString());
                                    val2 = double.Parse(reader["costo"].ToString());
                                    val3 = double.Parse(reader["costoN"].ToString());
                                    m_LLENAR_DGV(grid, 1, 1, val1.ToString());
                                    m_LLENAR_DGV(grid, 1, 2, val2.ToString("C2"));
                                    m_LLENAR_DGV(grid, 1, 3, val3.ToString("C2"));
                                    existe = true;
                                }
                            }
                            else
                            {
                                existe = true;
                            }
                            x++;
                        }
                        #endregion
                    }
                }
            }
            reader.Close();
            nulos(grid, 1, "");
            nulos(grid, 2, "$");
            nulos(grid, 3, "$");
            #endregion
        }
        private double leergrid(int grid, int columna, int renglon)
        {
            double val = 0;
            switch(grid)
            {
                case 1:
                    this.Invoke(new Action(() =>
                    {
                         val=double.Parse(dgv1.Rows[renglon].Cells[columna].Value.ToString(),NumberStyles.Currency);
                    }));
                    break;
                case 2:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv2.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    
                    break;
                case 3:
                    this.Invoke(new Action(() =>
                    {
                         val = double.Parse(dgv3.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 4:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv4.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 5:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv5.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 6:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv6.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 7:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv7.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 8:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv8.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 9:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv9.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 10:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv10.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 11:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv11.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
                case 12:
                    this.Invoke(new Action(() =>
                    {
                        val = double.Parse(dgv12.Rows[renglon].Cells[columna].Value.ToString(), NumberStyles.Currency);
                    }));
                    break;
            }
            return val;
        }
        private void bgw_DMAtotal_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            waitingbar.Visible = false;
            waitingbar.StopWaiting();
        }
        private void bgw_Generar_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            waitingbar.Visible = false;
            waitingbar.StopWaiting();
        }
        private void m_defaultColumnValue_DGV(int grid, int columna, string val)
        {

            this.Invoke(new Action(() =>
            {
                switch (grid)
                {
                    case 1: dgv1.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 2: dgv2.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 3: dgv3.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 4: dgv4.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 5: dgv5.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 6: dgv6.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 7: dgv7.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 8: dgv8.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 9: dgv9.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 10: dgv10.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 11: dgv11.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    case 12: dgv12.Columns[columna].DefaultCellStyle.NullValue = val;
                        break;
                    //  case 13: dgvProf13.Rows[columna].Cells[1].Value = val; 
                    //    break;

                }
            }));

        }

    }
}
 